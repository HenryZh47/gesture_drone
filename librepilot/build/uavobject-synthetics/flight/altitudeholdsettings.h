/**
 ******************************************************************************
 * @addtogroup UAVObjects OpenPilot UAVObjects
 * @{
 * @addtogroup AltitudeHoldSettings AltitudeHoldSettings
 * @brief Settings for the @ref AltitudeHold module
 *
 * Autogenerated files and functions for AltitudeHoldSettings Object
 *
 * @{
 *
 * @file       altitudeholdsettings.h
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010-2013.
 * @brief      Implementation of the AltitudeHoldSettings object. This file has been
 *             automatically generated by the UAVObjectGenerator.
 *
 * @note       Object definition file: altitudeholdsettings.xml.
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef ALTITUDEHOLDSETTINGS_H
#define ALTITUDEHOLDSETTINGS_H
#include <stdbool.h>
/* Object constants */
#define ALTITUDEHOLDSETTINGS_OBJID 0x6E3464C4
#define ALTITUDEHOLDSETTINGS_ISSINGLEINST 1
#define ALTITUDEHOLDSETTINGS_ISSETTINGS 1
#define ALTITUDEHOLDSETTINGS_ISPRIORITY 0
#define ALTITUDEHOLDSETTINGS_NUMBYTES sizeof(AltitudeHoldSettingsData)

/* Generic interface functions */
int32_t AltitudeHoldSettingsInitialize();
UAVObjHandle AltitudeHoldSettingsHandle();
void AltitudeHoldSettingsSetDefaults(UAVObjHandle obj, uint16_t instId);

/* Field ThrustRate information */

/* Field ThrustLimits information */

// Array element names for field ThrustLimits
typedef enum {
    ALTITUDEHOLDSETTINGS_THRUSTLIMITS_MIN=0,
    ALTITUDEHOLDSETTINGS_THRUSTLIMITS_NEUTRAL=1,
    ALTITUDEHOLDSETTINGS_THRUSTLIMITS_MAX=2
} AltitudeHoldSettingsThrustLimitsElem;

// Number of elements for field ThrustLimits
#define ALTITUDEHOLDSETTINGS_THRUSTLIMITS_NUMELEM 3

/* Field VerticalPosP information */

/* Field VerticalVelPID information */

// Array element names for field VerticalVelPID
typedef enum {
    ALTITUDEHOLDSETTINGS_VERTICALVELPID_KP=0,
    ALTITUDEHOLDSETTINGS_VERTICALVELPID_KI=1,
    ALTITUDEHOLDSETTINGS_VERTICALVELPID_KD=2,
    ALTITUDEHOLDSETTINGS_VERTICALVELPID_BETA=3
} AltitudeHoldSettingsVerticalVelPIDElem;

// Number of elements for field VerticalVelPID
#define ALTITUDEHOLDSETTINGS_VERTICALVELPID_NUMELEM 4

/* Field CutThrustWhenZero information */

// Enumeration options for field CutThrustWhenZero
typedef enum __attribute__ ((__packed__)) {
    ALTITUDEHOLDSETTINGS_CUTTHRUSTWHENZERO_FALSE=0,
    ALTITUDEHOLDSETTINGS_CUTTHRUSTWHENZERO_TRUE=1
} AltitudeHoldSettingsCutThrustWhenZeroOptions;

/* Field ThrustExp information */



typedef struct __attribute__ ((__packed__)) {
    float Min;
    float Neutral;
    float Max;
}  AltitudeHoldSettingsThrustLimitsData ;
typedef struct __attribute__ ((__packed__)) {
    float array[3];
}  AltitudeHoldSettingsThrustLimitsDataArray ;
#define AltitudeHoldSettingsThrustLimitsToArray( var ) UAVObjectFieldToArray( AltitudeHoldSettingsThrustLimitsData, var )

typedef struct __attribute__ ((__packed__)) {
    float Kp;
    float Ki;
    float Kd;
    float Beta;
}  AltitudeHoldSettingsVerticalVelPIDData ;
typedef struct __attribute__ ((__packed__)) {
    float array[4];
}  AltitudeHoldSettingsVerticalVelPIDDataArray ;
#define AltitudeHoldSettingsVerticalVelPIDToArray( var ) UAVObjectFieldToArray( AltitudeHoldSettingsVerticalVelPIDData, var )


/*
 * Packed Object data (unaligned).
 * Should only be used where 4 byte alignment can be guaranteed
 * (eg a single instance on the heap)
 */
typedef struct {
        float ThrustRate;
    AltitudeHoldSettingsThrustLimitsData ThrustLimits;
    float VerticalPosP;
    AltitudeHoldSettingsVerticalVelPIDData VerticalVelPID;
    AltitudeHoldSettingsCutThrustWhenZeroOptions CutThrustWhenZero;
    uint8_t ThrustExp;

} __attribute__((packed)) AltitudeHoldSettingsDataPacked;

/*
 * Packed Object data.
 * Alignment is forced to 4 bytes so as to avoid the potential for CPU usage faults
 * on Cortex M4F during load/store of float UAVO fields
 */
typedef AltitudeHoldSettingsDataPacked __attribute__((aligned(4))) AltitudeHoldSettingsData;

/* Typesafe Object access functions */
static inline int32_t AltitudeHoldSettingsGet(AltitudeHoldSettingsData * dataOut) {
    return UAVObjGetData(AltitudeHoldSettingsHandle(), dataOut);
}
static inline int32_t AltitudeHoldSettingsSet(const AltitudeHoldSettingsData * dataIn) {
    return UAVObjSetData(AltitudeHoldSettingsHandle(), dataIn);
}
static inline int32_t AltitudeHoldSettingsInstGet(uint16_t instId, AltitudeHoldSettingsData * dataOut) {
    return UAVObjGetInstanceData(AltitudeHoldSettingsHandle(), instId, dataOut);
}
static inline int32_t AltitudeHoldSettingsInstSet(uint16_t instId, const AltitudeHoldSettingsData * dataIn) {
    return UAVObjSetInstanceData(AltitudeHoldSettingsHandle(), instId, dataIn);
}
static inline int32_t AltitudeHoldSettingsConnectQueue(xQueueHandle queue) {
    return UAVObjConnectQueue(AltitudeHoldSettingsHandle(), queue, EV_MASK_ALL_UPDATES);
}
static inline int32_t AltitudeHoldSettingsConnectCallback(UAVObjEventCallback cb) {
    return UAVObjConnectCallback(AltitudeHoldSettingsHandle(), cb, EV_MASK_ALL_UPDATES, false);
}
static inline int32_t AltitudeHoldSettingsConnectFastCallback(UAVObjEventCallback cb) {
    return UAVObjConnectCallback(AltitudeHoldSettingsHandle(), cb, EV_MASK_ALL_UPDATES, true);
}
static inline uint16_t AltitudeHoldSettingsCreateInstance() {
    return UAVObjCreateInstance(AltitudeHoldSettingsHandle(), &AltitudeHoldSettingsSetDefaults);
}
static inline void AltitudeHoldSettingsRequestUpdate() {
    UAVObjRequestUpdate(AltitudeHoldSettingsHandle());
}
static inline void AltitudeHoldSettingsRequestInstUpdate(uint16_t instId) {
    UAVObjRequestInstanceUpdate(AltitudeHoldSettingsHandle(), instId);
}
static inline void AltitudeHoldSettingsUpdated() {
    UAVObjUpdated(AltitudeHoldSettingsHandle());
}
static inline void AltitudeHoldSettingsInstUpdated(uint16_t instId) {
    UAVObjInstanceUpdated(AltitudeHoldSettingsHandle(), instId);
}
static inline void AltitudeHoldSettingsLogging() {
    UAVObjLogging(AltitudeHoldSettingsHandle());
}
static inline void AltitudeHoldSettingsInstLogging(uint16_t instId) {
    UAVObjInstanceLogging(AltitudeHoldSettingsHandle(), instId);
}
static inline int32_t AltitudeHoldSettingsGetMetadata(UAVObjMetadata * dataOut) {
    return UAVObjGetMetadata(AltitudeHoldSettingsHandle(), dataOut);
}
static inline int32_t AltitudeHoldSettingsSetMetadata(const UAVObjMetadata * dataIn) {
    return UAVObjSetMetadata(AltitudeHoldSettingsHandle(), dataIn);
}
static inline int8_t AltitudeHoldSettingsReadOnly() {
    return UAVObjReadOnly(AltitudeHoldSettingsHandle());
}

/* Set/Get functions */
extern void AltitudeHoldSettingsThrustRateSet(float *NewThrustRate);
extern void AltitudeHoldSettingsThrustRateGet(float *NewThrustRate);
extern void AltitudeHoldSettingsThrustLimitsSet(AltitudeHoldSettingsThrustLimitsData *NewThrustLimits);
extern void AltitudeHoldSettingsThrustLimitsGet(AltitudeHoldSettingsThrustLimitsData *NewThrustLimits);
extern void AltitudeHoldSettingsThrustLimitsArraySet(float *NewThrustLimits);
extern void AltitudeHoldSettingsThrustLimitsArrayGet(float *NewThrustLimits);
extern void AltitudeHoldSettingsVerticalPosPSet(float *NewVerticalPosP);
extern void AltitudeHoldSettingsVerticalPosPGet(float *NewVerticalPosP);
extern void AltitudeHoldSettingsVerticalVelPIDSet(AltitudeHoldSettingsVerticalVelPIDData *NewVerticalVelPID);
extern void AltitudeHoldSettingsVerticalVelPIDGet(AltitudeHoldSettingsVerticalVelPIDData *NewVerticalVelPID);
extern void AltitudeHoldSettingsVerticalVelPIDArraySet(float *NewVerticalVelPID);
extern void AltitudeHoldSettingsVerticalVelPIDArrayGet(float *NewVerticalVelPID);
extern void AltitudeHoldSettingsCutThrustWhenZeroSet(AltitudeHoldSettingsCutThrustWhenZeroOptions *NewCutThrustWhenZero);
extern void AltitudeHoldSettingsCutThrustWhenZeroGet(AltitudeHoldSettingsCutThrustWhenZeroOptions *NewCutThrustWhenZero);
extern void AltitudeHoldSettingsThrustExpSet(uint8_t *NewThrustExp);
extern void AltitudeHoldSettingsThrustExpGet(uint8_t *NewThrustExp);


#endif // ALTITUDEHOLDSETTINGS_H

/**
 * @}
 * @}
 */
