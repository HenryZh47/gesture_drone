/**
 ******************************************************************************
 * @addtogroup UAVObjects OpenPilot UAVObjects
 * @{
 * @addtogroup CameraControlActivity CameraControlActivity
 * @brief Contains position and timestamp of each camera operation
 *
 * Autogenerated files and functions for CameraControlActivity Object
 *
 * @{
 *
 * @file       cameracontrolactivity.h
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010-2013.
 * @brief      Implementation of the CameraControlActivity object. This file has been
 *             automatically generated by the UAVObjectGenerator.
 *
 * @note       Object definition file: cameracontrolactivity.xml.
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef CAMERACONTROLACTIVITY_H
#define CAMERACONTROLACTIVITY_H
#include <stdbool.h>
/* Object constants */
#define CAMERACONTROLACTIVITY_OBJID 0x9B7A7310
#define CAMERACONTROLACTIVITY_ISSINGLEINST 1
#define CAMERACONTROLACTIVITY_ISSETTINGS 0
#define CAMERACONTROLACTIVITY_ISPRIORITY 0
#define CAMERACONTROLACTIVITY_NUMBYTES sizeof(CameraControlActivityData)

/* Generic interface functions */
int32_t CameraControlActivityInitialize();
UAVObjHandle CameraControlActivityHandle();
void CameraControlActivitySetDefaults(UAVObjHandle obj, uint16_t instId);

/* Field Latitude information */

/* Field Longitude information */

/* Field Altitude information */

/* Field Roll information */

/* Field Pitch information */

/* Field Yaw information */

/* Field SystemTS information */

/* Field ImageId information */

/* Field TriggerYear information */

/* Field TriggerMillisecond information */

/* Field TriggerMonth information */

/* Field TriggerDay information */

/* Field TriggerHour information */

/* Field TriggerMinute information */

/* Field TriggerSecond information */

/* Field Activity information */

// Enumeration options for field Activity
typedef enum __attribute__ ((__packed__)) {
    CAMERACONTROLACTIVITY_ACTIVITY_IDLE=0,
    CAMERACONTROLACTIVITY_ACTIVITY_TRIGGERPICTURE=1,
    CAMERACONTROLACTIVITY_ACTIVITY_STARTVIDEO=2,
    CAMERACONTROLACTIVITY_ACTIVITY_STOPVIDEO=3
} CameraControlActivityActivityOptions;

/* Field Reason information */

// Enumeration options for field Reason
typedef enum __attribute__ ((__packed__)) {
    CAMERACONTROLACTIVITY_REASON_MANUAL=0,
    CAMERACONTROLACTIVITY_REASON_AUTODISTANCE=1,
    CAMERACONTROLACTIVITY_REASON_AUTOTIME=2
} CameraControlActivityReasonOptions;




/*
 * Packed Object data (unaligned).
 * Should only be used where 4 byte alignment can be guaranteed
 * (eg a single instance on the heap)
 */
typedef struct {
        int32_t Latitude;
    int32_t Longitude;
    float Altitude;
    float Roll;
    float Pitch;
    float Yaw;
    uint32_t SystemTS;
    uint16_t ImageId;
    int16_t TriggerYear;
    int16_t TriggerMillisecond;
    int8_t TriggerMonth;
    int8_t TriggerDay;
    int8_t TriggerHour;
    int8_t TriggerMinute;
    int8_t TriggerSecond;
    CameraControlActivityActivityOptions Activity;
    CameraControlActivityReasonOptions Reason;

} __attribute__((packed)) CameraControlActivityDataPacked;

/*
 * Packed Object data.
 * Alignment is forced to 4 bytes so as to avoid the potential for CPU usage faults
 * on Cortex M4F during load/store of float UAVO fields
 */
typedef CameraControlActivityDataPacked __attribute__((aligned(4))) CameraControlActivityData;

/* Typesafe Object access functions */
static inline int32_t CameraControlActivityGet(CameraControlActivityData * dataOut) {
    return UAVObjGetData(CameraControlActivityHandle(), dataOut);
}
static inline int32_t CameraControlActivitySet(const CameraControlActivityData * dataIn) {
    return UAVObjSetData(CameraControlActivityHandle(), dataIn);
}
static inline int32_t CameraControlActivityInstGet(uint16_t instId, CameraControlActivityData * dataOut) {
    return UAVObjGetInstanceData(CameraControlActivityHandle(), instId, dataOut);
}
static inline int32_t CameraControlActivityInstSet(uint16_t instId, const CameraControlActivityData * dataIn) {
    return UAVObjSetInstanceData(CameraControlActivityHandle(), instId, dataIn);
}
static inline int32_t CameraControlActivityConnectQueue(xQueueHandle queue) {
    return UAVObjConnectQueue(CameraControlActivityHandle(), queue, EV_MASK_ALL_UPDATES);
}
static inline int32_t CameraControlActivityConnectCallback(UAVObjEventCallback cb) {
    return UAVObjConnectCallback(CameraControlActivityHandle(), cb, EV_MASK_ALL_UPDATES, false);
}
static inline int32_t CameraControlActivityConnectFastCallback(UAVObjEventCallback cb) {
    return UAVObjConnectCallback(CameraControlActivityHandle(), cb, EV_MASK_ALL_UPDATES, true);
}
static inline uint16_t CameraControlActivityCreateInstance() {
    return UAVObjCreateInstance(CameraControlActivityHandle(), &CameraControlActivitySetDefaults);
}
static inline void CameraControlActivityRequestUpdate() {
    UAVObjRequestUpdate(CameraControlActivityHandle());
}
static inline void CameraControlActivityRequestInstUpdate(uint16_t instId) {
    UAVObjRequestInstanceUpdate(CameraControlActivityHandle(), instId);
}
static inline void CameraControlActivityUpdated() {
    UAVObjUpdated(CameraControlActivityHandle());
}
static inline void CameraControlActivityInstUpdated(uint16_t instId) {
    UAVObjInstanceUpdated(CameraControlActivityHandle(), instId);
}
static inline void CameraControlActivityLogging() {
    UAVObjLogging(CameraControlActivityHandle());
}
static inline void CameraControlActivityInstLogging(uint16_t instId) {
    UAVObjInstanceLogging(CameraControlActivityHandle(), instId);
}
static inline int32_t CameraControlActivityGetMetadata(UAVObjMetadata * dataOut) {
    return UAVObjGetMetadata(CameraControlActivityHandle(), dataOut);
}
static inline int32_t CameraControlActivitySetMetadata(const UAVObjMetadata * dataIn) {
    return UAVObjSetMetadata(CameraControlActivityHandle(), dataIn);
}
static inline int8_t CameraControlActivityReadOnly() {
    return UAVObjReadOnly(CameraControlActivityHandle());
}

/* Set/Get functions */
extern void CameraControlActivityLatitudeSet(int32_t *NewLatitude);
extern void CameraControlActivityLatitudeGet(int32_t *NewLatitude);
extern void CameraControlActivityLongitudeSet(int32_t *NewLongitude);
extern void CameraControlActivityLongitudeGet(int32_t *NewLongitude);
extern void CameraControlActivityAltitudeSet(float *NewAltitude);
extern void CameraControlActivityAltitudeGet(float *NewAltitude);
extern void CameraControlActivityRollSet(float *NewRoll);
extern void CameraControlActivityRollGet(float *NewRoll);
extern void CameraControlActivityPitchSet(float *NewPitch);
extern void CameraControlActivityPitchGet(float *NewPitch);
extern void CameraControlActivityYawSet(float *NewYaw);
extern void CameraControlActivityYawGet(float *NewYaw);
extern void CameraControlActivitySystemTSSet(uint32_t *NewSystemTS);
extern void CameraControlActivitySystemTSGet(uint32_t *NewSystemTS);
extern void CameraControlActivityImageIdSet(uint16_t *NewImageId);
extern void CameraControlActivityImageIdGet(uint16_t *NewImageId);
extern void CameraControlActivityTriggerYearSet(int16_t *NewTriggerYear);
extern void CameraControlActivityTriggerYearGet(int16_t *NewTriggerYear);
extern void CameraControlActivityTriggerMillisecondSet(int16_t *NewTriggerMillisecond);
extern void CameraControlActivityTriggerMillisecondGet(int16_t *NewTriggerMillisecond);
extern void CameraControlActivityTriggerMonthSet(int8_t *NewTriggerMonth);
extern void CameraControlActivityTriggerMonthGet(int8_t *NewTriggerMonth);
extern void CameraControlActivityTriggerDaySet(int8_t *NewTriggerDay);
extern void CameraControlActivityTriggerDayGet(int8_t *NewTriggerDay);
extern void CameraControlActivityTriggerHourSet(int8_t *NewTriggerHour);
extern void CameraControlActivityTriggerHourGet(int8_t *NewTriggerHour);
extern void CameraControlActivityTriggerMinuteSet(int8_t *NewTriggerMinute);
extern void CameraControlActivityTriggerMinuteGet(int8_t *NewTriggerMinute);
extern void CameraControlActivityTriggerSecondSet(int8_t *NewTriggerSecond);
extern void CameraControlActivityTriggerSecondGet(int8_t *NewTriggerSecond);
extern void CameraControlActivityActivitySet(CameraControlActivityActivityOptions *NewActivity);
extern void CameraControlActivityActivityGet(CameraControlActivityActivityOptions *NewActivity);
extern void CameraControlActivityReasonSet(CameraControlActivityReasonOptions *NewReason);
extern void CameraControlActivityReasonGet(CameraControlActivityReasonOptions *NewReason);


#endif // CAMERACONTROLACTIVITY_H

/**
 * @}
 * @}
 */
