/**
 ******************************************************************************
 * @addtogroup UAVObjects OpenPilot UAVObjects
 * @{
 * @addtogroup CameraControlSettings CameraControlSettings
 * @brief Settings for the @ref CameraControl module
 *
 * Autogenerated files and functions for CameraControlSettings Object
 *
 * @{
 *
 * @file       cameracontrolsettings.h
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010-2013.
 * @brief      Implementation of the CameraControlSettings object. This file has been
 *             automatically generated by the UAVObjectGenerator.
 *
 * @note       Object definition file: cameracontrolsettings.xml.
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef CAMERACONTROLSETTINGS_H
#define CAMERACONTROLSETTINGS_H
#include <stdbool.h>
/* Object constants */
#define CAMERACONTROLSETTINGS_OBJID 0x17C08956
#define CAMERACONTROLSETTINGS_ISSINGLEINST 1
#define CAMERACONTROLSETTINGS_ISSETTINGS 1
#define CAMERACONTROLSETTINGS_ISPRIORITY 0
#define CAMERACONTROLSETTINGS_NUMBYTES sizeof(CameraControlSettingsData)

/* Generic interface functions */
int32_t CameraControlSettingsInitialize();
UAVObjHandle CameraControlSettingsHandle();
void CameraControlSettingsSetDefaults(UAVObjHandle obj, uint16_t instId);

/* Field OutputValues information */

// Array element names for field OutputValues
typedef enum {
    CAMERACONTROLSETTINGS_OUTPUTVALUES_IDLE=0,
    CAMERACONTROLSETTINGS_OUTPUTVALUES_SHOT=1,
    CAMERACONTROLSETTINGS_OUTPUTVALUES_VIDEO=2
} CameraControlSettingsOutputValuesElem;

// Number of elements for field OutputValues
#define CAMERACONTROLSETTINGS_OUTPUTVALUES_NUMELEM 3

/* Field InputValues information */

// Array element names for field InputValues
typedef enum {
    CAMERACONTROLSETTINGS_INPUTVALUES_IDLE=0,
    CAMERACONTROLSETTINGS_INPUTVALUES_SHOT=1,
    CAMERACONTROLSETTINGS_INPUTVALUES_VIDEO=2
} CameraControlSettingsInputValuesElem;

// Number of elements for field InputValues
#define CAMERACONTROLSETTINGS_INPUTVALUES_NUMELEM 3

/* Field TimeInterval information */

/* Field SpaceInterval information */

/* Field MinimumTimeInterval information */

/* Field TriggerPulseWidth information */

/* Field AutoTriggerInput information */

// Enumeration options for field AutoTriggerInput
typedef enum __attribute__ ((__packed__)) {
    CAMERACONTROLSETTINGS_AUTOTRIGGERINPUT_NONE=0,
    CAMERACONTROLSETTINGS_AUTOTRIGGERINPUT_ACCESSORY0=1,
    CAMERACONTROLSETTINGS_AUTOTRIGGERINPUT_ACCESSORY1=2,
    CAMERACONTROLSETTINGS_AUTOTRIGGERINPUT_ACCESSORY2=3,
    CAMERACONTROLSETTINGS_AUTOTRIGGERINPUT_ACCESSORY3=4,
    CAMERACONTROLSETTINGS_AUTOTRIGGERINPUT_ACCESSORY4=5,
    CAMERACONTROLSETTINGS_AUTOTRIGGERINPUT_ACCESSORY5=6
} CameraControlSettingsAutoTriggerInputOptions;

/* Field ManualTriggerInput information */

// Enumeration options for field ManualTriggerInput
typedef enum __attribute__ ((__packed__)) {
    CAMERACONTROLSETTINGS_MANUALTRIGGERINPUT_NONE=0,
    CAMERACONTROLSETTINGS_MANUALTRIGGERINPUT_ACCESSORY0=1,
    CAMERACONTROLSETTINGS_MANUALTRIGGERINPUT_ACCESSORY1=2,
    CAMERACONTROLSETTINGS_MANUALTRIGGERINPUT_ACCESSORY2=3,
    CAMERACONTROLSETTINGS_MANUALTRIGGERINPUT_ACCESSORY3=4,
    CAMERACONTROLSETTINGS_MANUALTRIGGERINPUT_ACCESSORY4=5,
    CAMERACONTROLSETTINGS_MANUALTRIGGERINPUT_ACCESSORY5=6
} CameraControlSettingsManualTriggerInputOptions;

/* Field AutoTriggerMode information */

// Enumeration options for field AutoTriggerMode
typedef enum __attribute__ ((__packed__)) {
    CAMERACONTROLSETTINGS_AUTOTRIGGERMODE_DISABLED=0,
    CAMERACONTROLSETTINGS_AUTOTRIGGERMODE_WHENARMED=1,
    CAMERACONTROLSETTINGS_AUTOTRIGGERMODE_ALWAYS=2,
    CAMERACONTROLSETTINGS_AUTOTRIGGERMODE_INPUT=3,
    CAMERACONTROLSETTINGS_AUTOTRIGGERMODE_MISSION=4
} CameraControlSettingsAutoTriggerModeOptions;



typedef struct __attribute__ ((__packed__)) {
    float Idle;
    float Shot;
    float Video;
}  CameraControlSettingsOutputValuesData ;
typedef struct __attribute__ ((__packed__)) {
    float array[3];
}  CameraControlSettingsOutputValuesDataArray ;
#define CameraControlSettingsOutputValuesToArray( var ) UAVObjectFieldToArray( CameraControlSettingsOutputValuesData, var )

typedef struct __attribute__ ((__packed__)) {
    float Idle;
    float Shot;
    float Video;
}  CameraControlSettingsInputValuesData ;
typedef struct __attribute__ ((__packed__)) {
    float array[3];
}  CameraControlSettingsInputValuesDataArray ;
#define CameraControlSettingsInputValuesToArray( var ) UAVObjectFieldToArray( CameraControlSettingsInputValuesData, var )


/*
 * Packed Object data (unaligned).
 * Should only be used where 4 byte alignment can be guaranteed
 * (eg a single instance on the heap)
 */
typedef struct {
        CameraControlSettingsOutputValuesData OutputValues;
    CameraControlSettingsInputValuesData InputValues;
    float TimeInterval;
    float SpaceInterval;
    float MinimumTimeInterval;
    uint16_t TriggerPulseWidth;
    CameraControlSettingsAutoTriggerInputOptions AutoTriggerInput;
    CameraControlSettingsManualTriggerInputOptions ManualTriggerInput;
    CameraControlSettingsAutoTriggerModeOptions AutoTriggerMode;

} __attribute__((packed)) CameraControlSettingsDataPacked;

/*
 * Packed Object data.
 * Alignment is forced to 4 bytes so as to avoid the potential for CPU usage faults
 * on Cortex M4F during load/store of float UAVO fields
 */
typedef CameraControlSettingsDataPacked __attribute__((aligned(4))) CameraControlSettingsData;

/* Typesafe Object access functions */
static inline int32_t CameraControlSettingsGet(CameraControlSettingsData * dataOut) {
    return UAVObjGetData(CameraControlSettingsHandle(), dataOut);
}
static inline int32_t CameraControlSettingsSet(const CameraControlSettingsData * dataIn) {
    return UAVObjSetData(CameraControlSettingsHandle(), dataIn);
}
static inline int32_t CameraControlSettingsInstGet(uint16_t instId, CameraControlSettingsData * dataOut) {
    return UAVObjGetInstanceData(CameraControlSettingsHandle(), instId, dataOut);
}
static inline int32_t CameraControlSettingsInstSet(uint16_t instId, const CameraControlSettingsData * dataIn) {
    return UAVObjSetInstanceData(CameraControlSettingsHandle(), instId, dataIn);
}
static inline int32_t CameraControlSettingsConnectQueue(xQueueHandle queue) {
    return UAVObjConnectQueue(CameraControlSettingsHandle(), queue, EV_MASK_ALL_UPDATES);
}
static inline int32_t CameraControlSettingsConnectCallback(UAVObjEventCallback cb) {
    return UAVObjConnectCallback(CameraControlSettingsHandle(), cb, EV_MASK_ALL_UPDATES, false);
}
static inline int32_t CameraControlSettingsConnectFastCallback(UAVObjEventCallback cb) {
    return UAVObjConnectCallback(CameraControlSettingsHandle(), cb, EV_MASK_ALL_UPDATES, true);
}
static inline uint16_t CameraControlSettingsCreateInstance() {
    return UAVObjCreateInstance(CameraControlSettingsHandle(), &CameraControlSettingsSetDefaults);
}
static inline void CameraControlSettingsRequestUpdate() {
    UAVObjRequestUpdate(CameraControlSettingsHandle());
}
static inline void CameraControlSettingsRequestInstUpdate(uint16_t instId) {
    UAVObjRequestInstanceUpdate(CameraControlSettingsHandle(), instId);
}
static inline void CameraControlSettingsUpdated() {
    UAVObjUpdated(CameraControlSettingsHandle());
}
static inline void CameraControlSettingsInstUpdated(uint16_t instId) {
    UAVObjInstanceUpdated(CameraControlSettingsHandle(), instId);
}
static inline void CameraControlSettingsLogging() {
    UAVObjLogging(CameraControlSettingsHandle());
}
static inline void CameraControlSettingsInstLogging(uint16_t instId) {
    UAVObjInstanceLogging(CameraControlSettingsHandle(), instId);
}
static inline int32_t CameraControlSettingsGetMetadata(UAVObjMetadata * dataOut) {
    return UAVObjGetMetadata(CameraControlSettingsHandle(), dataOut);
}
static inline int32_t CameraControlSettingsSetMetadata(const UAVObjMetadata * dataIn) {
    return UAVObjSetMetadata(CameraControlSettingsHandle(), dataIn);
}
static inline int8_t CameraControlSettingsReadOnly() {
    return UAVObjReadOnly(CameraControlSettingsHandle());
}

/* Set/Get functions */
extern void CameraControlSettingsOutputValuesSet(CameraControlSettingsOutputValuesData *NewOutputValues);
extern void CameraControlSettingsOutputValuesGet(CameraControlSettingsOutputValuesData *NewOutputValues);
extern void CameraControlSettingsOutputValuesArraySet(float *NewOutputValues);
extern void CameraControlSettingsOutputValuesArrayGet(float *NewOutputValues);
extern void CameraControlSettingsInputValuesSet(CameraControlSettingsInputValuesData *NewInputValues);
extern void CameraControlSettingsInputValuesGet(CameraControlSettingsInputValuesData *NewInputValues);
extern void CameraControlSettingsInputValuesArraySet(float *NewInputValues);
extern void CameraControlSettingsInputValuesArrayGet(float *NewInputValues);
extern void CameraControlSettingsTimeIntervalSet(float *NewTimeInterval);
extern void CameraControlSettingsTimeIntervalGet(float *NewTimeInterval);
extern void CameraControlSettingsSpaceIntervalSet(float *NewSpaceInterval);
extern void CameraControlSettingsSpaceIntervalGet(float *NewSpaceInterval);
extern void CameraControlSettingsMinimumTimeIntervalSet(float *NewMinimumTimeInterval);
extern void CameraControlSettingsMinimumTimeIntervalGet(float *NewMinimumTimeInterval);
extern void CameraControlSettingsTriggerPulseWidthSet(uint16_t *NewTriggerPulseWidth);
extern void CameraControlSettingsTriggerPulseWidthGet(uint16_t *NewTriggerPulseWidth);
extern void CameraControlSettingsAutoTriggerInputSet(CameraControlSettingsAutoTriggerInputOptions *NewAutoTriggerInput);
extern void CameraControlSettingsAutoTriggerInputGet(CameraControlSettingsAutoTriggerInputOptions *NewAutoTriggerInput);
extern void CameraControlSettingsManualTriggerInputSet(CameraControlSettingsManualTriggerInputOptions *NewManualTriggerInput);
extern void CameraControlSettingsManualTriggerInputGet(CameraControlSettingsManualTriggerInputOptions *NewManualTriggerInput);
extern void CameraControlSettingsAutoTriggerModeSet(CameraControlSettingsAutoTriggerModeOptions *NewAutoTriggerMode);
extern void CameraControlSettingsAutoTriggerModeGet(CameraControlSettingsAutoTriggerModeOptions *NewAutoTriggerMode);


#endif // CAMERACONTROLSETTINGS_H

/**
 * @}
 * @}
 */
