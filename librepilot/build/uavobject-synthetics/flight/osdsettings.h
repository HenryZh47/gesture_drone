/**
 ******************************************************************************
 * @addtogroup UAVObjects OpenPilot UAVObjects
 * @{
 * @addtogroup OsdSettings OsdSettings
 * @brief OSD settings used by the OSDgen module
 *
 * Autogenerated files and functions for OsdSettings Object
 *
 * @{
 *
 * @file       osdsettings.h
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010-2013.
 * @brief      Implementation of the OsdSettings object. This file has been
 *             automatically generated by the UAVObjectGenerator.
 *
 * @note       Object definition file: osdsettings.xml.
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef OSDSETTINGS_H
#define OSDSETTINGS_H
#include <stdbool.h>
/* Object constants */
#define OSDSETTINGS_OBJID 0xDCBBA81A
#define OSDSETTINGS_ISSINGLEINST 1
#define OSDSETTINGS_ISSETTINGS 1
#define OSDSETTINGS_ISPRIORITY 0
#define OSDSETTINGS_NUMBYTES sizeof(OsdSettingsData)

/* Generic interface functions */
int32_t OsdSettingsInitialize();
UAVObjHandle OsdSettingsHandle();
void OsdSettingsSetDefaults(UAVObjHandle obj, uint16_t instId);

/* Field AttitudeSetup information */

// Array element names for field AttitudeSetup
typedef enum {
    OSDSETTINGS_ATTITUDESETUP_X=0,
    OSDSETTINGS_ATTITUDESETUP_Y=1
} OsdSettingsAttitudeSetupElem;

// Number of elements for field AttitudeSetup
#define OSDSETTINGS_ATTITUDESETUP_NUMELEM 2

/* Field TimeSetup information */

// Array element names for field TimeSetup
typedef enum {
    OSDSETTINGS_TIMESETUP_X=0,
    OSDSETTINGS_TIMESETUP_Y=1
} OsdSettingsTimeSetupElem;

// Number of elements for field TimeSetup
#define OSDSETTINGS_TIMESETUP_NUMELEM 2

/* Field BatterySetup information */

// Array element names for field BatterySetup
typedef enum {
    OSDSETTINGS_BATTERYSETUP_X=0,
    OSDSETTINGS_BATTERYSETUP_Y=1
} OsdSettingsBatterySetupElem;

// Number of elements for field BatterySetup
#define OSDSETTINGS_BATTERYSETUP_NUMELEM 2

/* Field SpeedSetup information */

// Array element names for field SpeedSetup
typedef enum {
    OSDSETTINGS_SPEEDSETUP_X=0,
    OSDSETTINGS_SPEEDSETUP_Y=1
} OsdSettingsSpeedSetupElem;

// Number of elements for field SpeedSetup
#define OSDSETTINGS_SPEEDSETUP_NUMELEM 2

/* Field AltitudeSetup information */

// Array element names for field AltitudeSetup
typedef enum {
    OSDSETTINGS_ALTITUDESETUP_X=0,
    OSDSETTINGS_ALTITUDESETUP_Y=1
} OsdSettingsAltitudeSetupElem;

// Number of elements for field AltitudeSetup
#define OSDSETTINGS_ALTITUDESETUP_NUMELEM 2

/* Field HeadingSetup information */

// Array element names for field HeadingSetup
typedef enum {
    OSDSETTINGS_HEADINGSETUP_X=0,
    OSDSETTINGS_HEADINGSETUP_Y=1
} OsdSettingsHeadingSetupElem;

// Number of elements for field HeadingSetup
#define OSDSETTINGS_HEADINGSETUP_NUMELEM 2

/* Field Attitude information */

// Enumeration options for field Attitude
typedef enum __attribute__ ((__packed__)) {
    OSDSETTINGS_ATTITUDE_DISABLED=0,
    OSDSETTINGS_ATTITUDE_ENABLED=1
} OsdSettingsAttitudeOptions;

/* Field Time information */

// Enumeration options for field Time
typedef enum __attribute__ ((__packed__)) {
    OSDSETTINGS_TIME_DISABLED=0,
    OSDSETTINGS_TIME_ENABLED=1
} OsdSettingsTimeOptions;

/* Field Battery information */

// Enumeration options for field Battery
typedef enum __attribute__ ((__packed__)) {
    OSDSETTINGS_BATTERY_DISABLED=0,
    OSDSETTINGS_BATTERY_ENABLED=1
} OsdSettingsBatteryOptions;

/* Field Speed information */

// Enumeration options for field Speed
typedef enum __attribute__ ((__packed__)) {
    OSDSETTINGS_SPEED_DISABLED=0,
    OSDSETTINGS_SPEED_ENABLED=1
} OsdSettingsSpeedOptions;

/* Field Altitude information */

// Enumeration options for field Altitude
typedef enum __attribute__ ((__packed__)) {
    OSDSETTINGS_ALTITUDE_DISABLED=0,
    OSDSETTINGS_ALTITUDE_ENABLED=1
} OsdSettingsAltitudeOptions;

/* Field Heading information */

// Enumeration options for field Heading
typedef enum __attribute__ ((__packed__)) {
    OSDSETTINGS_HEADING_DISABLED=0,
    OSDSETTINGS_HEADING_ENABLED=1
} OsdSettingsHeadingOptions;

/* Field Screen information */

/* Field White information */

/* Field Black information */

/* Field AltitudeSource information */

// Enumeration options for field AltitudeSource
typedef enum __attribute__ ((__packed__)) {
    OSDSETTINGS_ALTITUDESOURCE_GPS=0,
    OSDSETTINGS_ALTITUDESOURCE_BARO=1
} OsdSettingsAltitudeSourceOptions;



typedef struct __attribute__ ((__packed__)) {
    int16_t X;
    int16_t Y;
}  OsdSettingsAttitudeSetupData ;
typedef struct __attribute__ ((__packed__)) {
    int16_t array[2];
}  OsdSettingsAttitudeSetupDataArray ;
#define OsdSettingsAttitudeSetupToArray( var ) UAVObjectFieldToArray( OsdSettingsAttitudeSetupData, var )

typedef struct __attribute__ ((__packed__)) {
    int16_t X;
    int16_t Y;
}  OsdSettingsTimeSetupData ;
typedef struct __attribute__ ((__packed__)) {
    int16_t array[2];
}  OsdSettingsTimeSetupDataArray ;
#define OsdSettingsTimeSetupToArray( var ) UAVObjectFieldToArray( OsdSettingsTimeSetupData, var )

typedef struct __attribute__ ((__packed__)) {
    int16_t X;
    int16_t Y;
}  OsdSettingsBatterySetupData ;
typedef struct __attribute__ ((__packed__)) {
    int16_t array[2];
}  OsdSettingsBatterySetupDataArray ;
#define OsdSettingsBatterySetupToArray( var ) UAVObjectFieldToArray( OsdSettingsBatterySetupData, var )

typedef struct __attribute__ ((__packed__)) {
    int16_t X;
    int16_t Y;
}  OsdSettingsSpeedSetupData ;
typedef struct __attribute__ ((__packed__)) {
    int16_t array[2];
}  OsdSettingsSpeedSetupDataArray ;
#define OsdSettingsSpeedSetupToArray( var ) UAVObjectFieldToArray( OsdSettingsSpeedSetupData, var )

typedef struct __attribute__ ((__packed__)) {
    int16_t X;
    int16_t Y;
}  OsdSettingsAltitudeSetupData ;
typedef struct __attribute__ ((__packed__)) {
    int16_t array[2];
}  OsdSettingsAltitudeSetupDataArray ;
#define OsdSettingsAltitudeSetupToArray( var ) UAVObjectFieldToArray( OsdSettingsAltitudeSetupData, var )

typedef struct __attribute__ ((__packed__)) {
    int16_t X;
    int16_t Y;
}  OsdSettingsHeadingSetupData ;
typedef struct __attribute__ ((__packed__)) {
    int16_t array[2];
}  OsdSettingsHeadingSetupDataArray ;
#define OsdSettingsHeadingSetupToArray( var ) UAVObjectFieldToArray( OsdSettingsHeadingSetupData, var )


/*
 * Packed Object data (unaligned).
 * Should only be used where 4 byte alignment can be guaranteed
 * (eg a single instance on the heap)
 */
typedef struct {
        OsdSettingsAttitudeSetupData AttitudeSetup;
    OsdSettingsTimeSetupData TimeSetup;
    OsdSettingsBatterySetupData BatterySetup;
    OsdSettingsSpeedSetupData SpeedSetup;
    OsdSettingsAltitudeSetupData AltitudeSetup;
    OsdSettingsHeadingSetupData HeadingSetup;
    OsdSettingsAttitudeOptions Attitude;
    OsdSettingsTimeOptions Time;
    OsdSettingsBatteryOptions Battery;
    OsdSettingsSpeedOptions Speed;
    OsdSettingsAltitudeOptions Altitude;
    OsdSettingsHeadingOptions Heading;
    uint8_t Screen;
    uint8_t White;
    uint8_t Black;
    OsdSettingsAltitudeSourceOptions AltitudeSource;

} __attribute__((packed)) OsdSettingsDataPacked;

/*
 * Packed Object data.
 * Alignment is forced to 4 bytes so as to avoid the potential for CPU usage faults
 * on Cortex M4F during load/store of float UAVO fields
 */
typedef OsdSettingsDataPacked __attribute__((aligned(4))) OsdSettingsData;

/* Typesafe Object access functions */
static inline int32_t OsdSettingsGet(OsdSettingsData * dataOut) {
    return UAVObjGetData(OsdSettingsHandle(), dataOut);
}
static inline int32_t OsdSettingsSet(const OsdSettingsData * dataIn) {
    return UAVObjSetData(OsdSettingsHandle(), dataIn);
}
static inline int32_t OsdSettingsInstGet(uint16_t instId, OsdSettingsData * dataOut) {
    return UAVObjGetInstanceData(OsdSettingsHandle(), instId, dataOut);
}
static inline int32_t OsdSettingsInstSet(uint16_t instId, const OsdSettingsData * dataIn) {
    return UAVObjSetInstanceData(OsdSettingsHandle(), instId, dataIn);
}
static inline int32_t OsdSettingsConnectQueue(xQueueHandle queue) {
    return UAVObjConnectQueue(OsdSettingsHandle(), queue, EV_MASK_ALL_UPDATES);
}
static inline int32_t OsdSettingsConnectCallback(UAVObjEventCallback cb) {
    return UAVObjConnectCallback(OsdSettingsHandle(), cb, EV_MASK_ALL_UPDATES, false);
}
static inline int32_t OsdSettingsConnectFastCallback(UAVObjEventCallback cb) {
    return UAVObjConnectCallback(OsdSettingsHandle(), cb, EV_MASK_ALL_UPDATES, true);
}
static inline uint16_t OsdSettingsCreateInstance() {
    return UAVObjCreateInstance(OsdSettingsHandle(), &OsdSettingsSetDefaults);
}
static inline void OsdSettingsRequestUpdate() {
    UAVObjRequestUpdate(OsdSettingsHandle());
}
static inline void OsdSettingsRequestInstUpdate(uint16_t instId) {
    UAVObjRequestInstanceUpdate(OsdSettingsHandle(), instId);
}
static inline void OsdSettingsUpdated() {
    UAVObjUpdated(OsdSettingsHandle());
}
static inline void OsdSettingsInstUpdated(uint16_t instId) {
    UAVObjInstanceUpdated(OsdSettingsHandle(), instId);
}
static inline void OsdSettingsLogging() {
    UAVObjLogging(OsdSettingsHandle());
}
static inline void OsdSettingsInstLogging(uint16_t instId) {
    UAVObjInstanceLogging(OsdSettingsHandle(), instId);
}
static inline int32_t OsdSettingsGetMetadata(UAVObjMetadata * dataOut) {
    return UAVObjGetMetadata(OsdSettingsHandle(), dataOut);
}
static inline int32_t OsdSettingsSetMetadata(const UAVObjMetadata * dataIn) {
    return UAVObjSetMetadata(OsdSettingsHandle(), dataIn);
}
static inline int8_t OsdSettingsReadOnly() {
    return UAVObjReadOnly(OsdSettingsHandle());
}

/* Set/Get functions */
extern void OsdSettingsAttitudeSetupSet(OsdSettingsAttitudeSetupData *NewAttitudeSetup);
extern void OsdSettingsAttitudeSetupGet(OsdSettingsAttitudeSetupData *NewAttitudeSetup);
extern void OsdSettingsAttitudeSetupArraySet(int16_t *NewAttitudeSetup);
extern void OsdSettingsAttitudeSetupArrayGet(int16_t *NewAttitudeSetup);
extern void OsdSettingsTimeSetupSet(OsdSettingsTimeSetupData *NewTimeSetup);
extern void OsdSettingsTimeSetupGet(OsdSettingsTimeSetupData *NewTimeSetup);
extern void OsdSettingsTimeSetupArraySet(int16_t *NewTimeSetup);
extern void OsdSettingsTimeSetupArrayGet(int16_t *NewTimeSetup);
extern void OsdSettingsBatterySetupSet(OsdSettingsBatterySetupData *NewBatterySetup);
extern void OsdSettingsBatterySetupGet(OsdSettingsBatterySetupData *NewBatterySetup);
extern void OsdSettingsBatterySetupArraySet(int16_t *NewBatterySetup);
extern void OsdSettingsBatterySetupArrayGet(int16_t *NewBatterySetup);
extern void OsdSettingsSpeedSetupSet(OsdSettingsSpeedSetupData *NewSpeedSetup);
extern void OsdSettingsSpeedSetupGet(OsdSettingsSpeedSetupData *NewSpeedSetup);
extern void OsdSettingsSpeedSetupArraySet(int16_t *NewSpeedSetup);
extern void OsdSettingsSpeedSetupArrayGet(int16_t *NewSpeedSetup);
extern void OsdSettingsAltitudeSetupSet(OsdSettingsAltitudeSetupData *NewAltitudeSetup);
extern void OsdSettingsAltitudeSetupGet(OsdSettingsAltitudeSetupData *NewAltitudeSetup);
extern void OsdSettingsAltitudeSetupArraySet(int16_t *NewAltitudeSetup);
extern void OsdSettingsAltitudeSetupArrayGet(int16_t *NewAltitudeSetup);
extern void OsdSettingsHeadingSetupSet(OsdSettingsHeadingSetupData *NewHeadingSetup);
extern void OsdSettingsHeadingSetupGet(OsdSettingsHeadingSetupData *NewHeadingSetup);
extern void OsdSettingsHeadingSetupArraySet(int16_t *NewHeadingSetup);
extern void OsdSettingsHeadingSetupArrayGet(int16_t *NewHeadingSetup);
extern void OsdSettingsAttitudeSet(OsdSettingsAttitudeOptions *NewAttitude);
extern void OsdSettingsAttitudeGet(OsdSettingsAttitudeOptions *NewAttitude);
extern void OsdSettingsTimeSet(OsdSettingsTimeOptions *NewTime);
extern void OsdSettingsTimeGet(OsdSettingsTimeOptions *NewTime);
extern void OsdSettingsBatterySet(OsdSettingsBatteryOptions *NewBattery);
extern void OsdSettingsBatteryGet(OsdSettingsBatteryOptions *NewBattery);
extern void OsdSettingsSpeedSet(OsdSettingsSpeedOptions *NewSpeed);
extern void OsdSettingsSpeedGet(OsdSettingsSpeedOptions *NewSpeed);
extern void OsdSettingsAltitudeSet(OsdSettingsAltitudeOptions *NewAltitude);
extern void OsdSettingsAltitudeGet(OsdSettingsAltitudeOptions *NewAltitude);
extern void OsdSettingsHeadingSet(OsdSettingsHeadingOptions *NewHeading);
extern void OsdSettingsHeadingGet(OsdSettingsHeadingOptions *NewHeading);
extern void OsdSettingsScreenSet(uint8_t *NewScreen);
extern void OsdSettingsScreenGet(uint8_t *NewScreen);
extern void OsdSettingsWhiteSet(uint8_t *NewWhite);
extern void OsdSettingsWhiteGet(uint8_t *NewWhite);
extern void OsdSettingsBlackSet(uint8_t *NewBlack);
extern void OsdSettingsBlackGet(uint8_t *NewBlack);
extern void OsdSettingsAltitudeSourceSet(OsdSettingsAltitudeSourceOptions *NewAltitudeSource);
extern void OsdSettingsAltitudeSourceGet(OsdSettingsAltitudeSourceOptions *NewAltitudeSource);


#endif // OSDSETTINGS_H

/**
 * @}
 * @}
 */
