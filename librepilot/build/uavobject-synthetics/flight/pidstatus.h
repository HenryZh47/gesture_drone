/**
 ******************************************************************************
 * @addtogroup UAVObjects OpenPilot UAVObjects
 * @{
 * @addtogroup PIDStatus PIDStatus
 * @brief Status of a PID loop for debugging
 *
 * Autogenerated files and functions for PIDStatus Object
 *
 * @{
 *
 * @file       pidstatus.h
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010-2013.
 * @brief      Implementation of the PIDStatus object. This file has been
 *             automatically generated by the UAVObjectGenerator.
 *
 * @note       Object definition file: pidstatus.xml.
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef PIDSTATUS_H
#define PIDSTATUS_H
#include <stdbool.h>
/* Object constants */
#define PIDSTATUS_OBJID 0x75CF70A6
#define PIDSTATUS_ISSINGLEINST 1
#define PIDSTATUS_ISSETTINGS 0
#define PIDSTATUS_ISPRIORITY 0
#define PIDSTATUS_NUMBYTES sizeof(PIDStatusData)

/* Generic interface functions */
int32_t PIDStatusInitialize();
UAVObjHandle PIDStatusHandle();
void PIDStatusSetDefaults(UAVObjHandle obj, uint16_t instId);

/* Field setpoint information */

/* Field actual information */

/* Field error information */

/* Field ulow information */

/* Field uhigh information */

/* Field command information */

/* Field P information */

/* Field I information */

/* Field D information */




/*
 * Packed Object data (unaligned).
 * Should only be used where 4 byte alignment can be guaranteed
 * (eg a single instance on the heap)
 */
typedef struct {
        float setpoint;
    float actual;
    float error;
    float ulow;
    float uhigh;
    float command;
    float P;
    float I;
    float D;

} __attribute__((packed)) PIDStatusDataPacked;

/*
 * Packed Object data.
 * Alignment is forced to 4 bytes so as to avoid the potential for CPU usage faults
 * on Cortex M4F during load/store of float UAVO fields
 */
typedef PIDStatusDataPacked __attribute__((aligned(4))) PIDStatusData;

/* Typesafe Object access functions */
static inline int32_t PIDStatusGet(PIDStatusData * dataOut) {
    return UAVObjGetData(PIDStatusHandle(), dataOut);
}
static inline int32_t PIDStatusSet(const PIDStatusData * dataIn) {
    return UAVObjSetData(PIDStatusHandle(), dataIn);
}
static inline int32_t PIDStatusInstGet(uint16_t instId, PIDStatusData * dataOut) {
    return UAVObjGetInstanceData(PIDStatusHandle(), instId, dataOut);
}
static inline int32_t PIDStatusInstSet(uint16_t instId, const PIDStatusData * dataIn) {
    return UAVObjSetInstanceData(PIDStatusHandle(), instId, dataIn);
}
static inline int32_t PIDStatusConnectQueue(xQueueHandle queue) {
    return UAVObjConnectQueue(PIDStatusHandle(), queue, EV_MASK_ALL_UPDATES);
}
static inline int32_t PIDStatusConnectCallback(UAVObjEventCallback cb) {
    return UAVObjConnectCallback(PIDStatusHandle(), cb, EV_MASK_ALL_UPDATES, false);
}
static inline int32_t PIDStatusConnectFastCallback(UAVObjEventCallback cb) {
    return UAVObjConnectCallback(PIDStatusHandle(), cb, EV_MASK_ALL_UPDATES, true);
}
static inline uint16_t PIDStatusCreateInstance() {
    return UAVObjCreateInstance(PIDStatusHandle(), &PIDStatusSetDefaults);
}
static inline void PIDStatusRequestUpdate() {
    UAVObjRequestUpdate(PIDStatusHandle());
}
static inline void PIDStatusRequestInstUpdate(uint16_t instId) {
    UAVObjRequestInstanceUpdate(PIDStatusHandle(), instId);
}
static inline void PIDStatusUpdated() {
    UAVObjUpdated(PIDStatusHandle());
}
static inline void PIDStatusInstUpdated(uint16_t instId) {
    UAVObjInstanceUpdated(PIDStatusHandle(), instId);
}
static inline void PIDStatusLogging() {
    UAVObjLogging(PIDStatusHandle());
}
static inline void PIDStatusInstLogging(uint16_t instId) {
    UAVObjInstanceLogging(PIDStatusHandle(), instId);
}
static inline int32_t PIDStatusGetMetadata(UAVObjMetadata * dataOut) {
    return UAVObjGetMetadata(PIDStatusHandle(), dataOut);
}
static inline int32_t PIDStatusSetMetadata(const UAVObjMetadata * dataIn) {
    return UAVObjSetMetadata(PIDStatusHandle(), dataIn);
}
static inline int8_t PIDStatusReadOnly() {
    return UAVObjReadOnly(PIDStatusHandle());
}

/* Set/Get functions */
extern void PIDStatussetpointSet(float *Newsetpoint);
extern void PIDStatussetpointGet(float *Newsetpoint);
extern void PIDStatusactualSet(float *Newactual);
extern void PIDStatusactualGet(float *Newactual);
extern void PIDStatuserrorSet(float *Newerror);
extern void PIDStatuserrorGet(float *Newerror);
extern void PIDStatusulowSet(float *Newulow);
extern void PIDStatusulowGet(float *Newulow);
extern void PIDStatusuhighSet(float *Newuhigh);
extern void PIDStatusuhighGet(float *Newuhigh);
extern void PIDStatuscommandSet(float *Newcommand);
extern void PIDStatuscommandGet(float *Newcommand);
extern void PIDStatusPSet(float *NewP);
extern void PIDStatusPGet(float *NewP);
extern void PIDStatusISet(float *NewI);
extern void PIDStatusIGet(float *NewI);
extern void PIDStatusDSet(float *NewD);
extern void PIDStatusDGet(float *NewD);


#endif // PIDSTATUS_H

/**
 * @}
 * @}
 */
