/**
 ******************************************************************************
 * @addtogroup UAVObjects OpenPilot UAVObjects
 * @{
 * @addtogroup StatusGroundDrive StatusGroundDrive
 * @brief Status of a Ground drive sequence
 *
 * Autogenerated files and functions for StatusGroundDrive Object
 *
 * @{
 *
 * @file       statusgrounddrive.h
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010-2013.
 * @brief      Implementation of the StatusGroundDrive object. This file has been
 *             automatically generated by the UAVObjectGenerator.
 *
 * @note       Object definition file: statusgrounddrive.xml.
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef STATUSGROUNDDRIVE_H
#define STATUSGROUNDDRIVE_H
#include <stdbool.h>
/* Object constants */
#define STATUSGROUNDDRIVE_OBJID 0xC8A92AA8
#define STATUSGROUNDDRIVE_ISSINGLEINST 1
#define STATUSGROUNDDRIVE_ISSETTINGS 0
#define STATUSGROUNDDRIVE_ISPRIORITY 0
#define STATUSGROUNDDRIVE_NUMBYTES sizeof(StatusGroundDriveData)

/* Generic interface functions */
int32_t StatusGroundDriveInitialize();
UAVObjHandle StatusGroundDriveHandle();
void StatusGroundDriveSetDefaults(UAVObjHandle obj, uint16_t instId);

/* Field NECommand information */

// Array element names for field NECommand
typedef enum {
    STATUSGROUNDDRIVE_NECOMMAND_NORTH=0,
    STATUSGROUNDDRIVE_NECOMMAND_EAST=1
} StatusGroundDriveNECommandElem;

// Number of elements for field NECommand
#define STATUSGROUNDDRIVE_NECOMMAND_NUMELEM 2

/* Field State information */

// Array element names for field State
typedef enum {
    STATUSGROUNDDRIVE_STATE_YAW=0,
    STATUSGROUNDDRIVE_STATE_VELOCITY=1,
    STATUSGROUNDDRIVE_STATE_THRUST=2
} StatusGroundDriveStateElem;

// Number of elements for field State
#define STATUSGROUNDDRIVE_STATE_NUMELEM 3

/* Field BodyCommand information */

// Array element names for field BodyCommand
typedef enum {
    STATUSGROUNDDRIVE_BODYCOMMAND_FORWARD=0,
    STATUSGROUNDDRIVE_BODYCOMMAND_RIGHT=1
} StatusGroundDriveBodyCommandElem;

// Number of elements for field BodyCommand
#define STATUSGROUNDDRIVE_BODYCOMMAND_NUMELEM 2

/* Field ControlCommand information */

// Array element names for field ControlCommand
typedef enum {
    STATUSGROUNDDRIVE_CONTROLCOMMAND_SPEED=0,
    STATUSGROUNDDRIVE_CONTROLCOMMAND_COURSE=1
} StatusGroundDriveControlCommandElem;

// Number of elements for field ControlCommand
#define STATUSGROUNDDRIVE_CONTROLCOMMAND_NUMELEM 2

/* Field ControlState information */

// Enumeration options for field ControlState
typedef enum __attribute__ ((__packed__)) {
    STATUSGROUNDDRIVE_CONTROLSTATE_INACTIVE=0,
    STATUSGROUNDDRIVE_CONTROLSTATE_ONTRACK=1,
    STATUSGROUNDDRIVE_CONTROLSTATE_TURNAROUNDRIGHT=2,
    STATUSGROUNDDRIVE_CONTROLSTATE_TURNAROUNDLEFT=3,
    STATUSGROUNDDRIVE_CONTROLSTATE_BRAKE=4
} StatusGroundDriveControlStateOptions;



typedef struct __attribute__ ((__packed__)) {
    float North;
    float East;
}  StatusGroundDriveNECommandData ;
typedef struct __attribute__ ((__packed__)) {
    float array[2];
}  StatusGroundDriveNECommandDataArray ;
#define StatusGroundDriveNECommandToArray( var ) UAVObjectFieldToArray( StatusGroundDriveNECommandData, var )

typedef struct __attribute__ ((__packed__)) {
    float Yaw;
    float Velocity;
    float Thrust;
}  StatusGroundDriveStateData ;
typedef struct __attribute__ ((__packed__)) {
    float array[3];
}  StatusGroundDriveStateDataArray ;
#define StatusGroundDriveStateToArray( var ) UAVObjectFieldToArray( StatusGroundDriveStateData, var )

typedef struct __attribute__ ((__packed__)) {
    float Forward;
    float Right;
}  StatusGroundDriveBodyCommandData ;
typedef struct __attribute__ ((__packed__)) {
    float array[2];
}  StatusGroundDriveBodyCommandDataArray ;
#define StatusGroundDriveBodyCommandToArray( var ) UAVObjectFieldToArray( StatusGroundDriveBodyCommandData, var )

typedef struct __attribute__ ((__packed__)) {
    float Speed;
    float Course;
}  StatusGroundDriveControlCommandData ;
typedef struct __attribute__ ((__packed__)) {
    float array[2];
}  StatusGroundDriveControlCommandDataArray ;
#define StatusGroundDriveControlCommandToArray( var ) UAVObjectFieldToArray( StatusGroundDriveControlCommandData, var )


/*
 * Packed Object data (unaligned).
 * Should only be used where 4 byte alignment can be guaranteed
 * (eg a single instance on the heap)
 */
typedef struct {
        StatusGroundDriveNECommandData NECommand;
    StatusGroundDriveStateData State;
    StatusGroundDriveBodyCommandData BodyCommand;
    StatusGroundDriveControlCommandData ControlCommand;
    StatusGroundDriveControlStateOptions ControlState;

} __attribute__((packed)) StatusGroundDriveDataPacked;

/*
 * Packed Object data.
 * Alignment is forced to 4 bytes so as to avoid the potential for CPU usage faults
 * on Cortex M4F during load/store of float UAVO fields
 */
typedef StatusGroundDriveDataPacked __attribute__((aligned(4))) StatusGroundDriveData;

/* Typesafe Object access functions */
static inline int32_t StatusGroundDriveGet(StatusGroundDriveData * dataOut) {
    return UAVObjGetData(StatusGroundDriveHandle(), dataOut);
}
static inline int32_t StatusGroundDriveSet(const StatusGroundDriveData * dataIn) {
    return UAVObjSetData(StatusGroundDriveHandle(), dataIn);
}
static inline int32_t StatusGroundDriveInstGet(uint16_t instId, StatusGroundDriveData * dataOut) {
    return UAVObjGetInstanceData(StatusGroundDriveHandle(), instId, dataOut);
}
static inline int32_t StatusGroundDriveInstSet(uint16_t instId, const StatusGroundDriveData * dataIn) {
    return UAVObjSetInstanceData(StatusGroundDriveHandle(), instId, dataIn);
}
static inline int32_t StatusGroundDriveConnectQueue(xQueueHandle queue) {
    return UAVObjConnectQueue(StatusGroundDriveHandle(), queue, EV_MASK_ALL_UPDATES);
}
static inline int32_t StatusGroundDriveConnectCallback(UAVObjEventCallback cb) {
    return UAVObjConnectCallback(StatusGroundDriveHandle(), cb, EV_MASK_ALL_UPDATES, false);
}
static inline int32_t StatusGroundDriveConnectFastCallback(UAVObjEventCallback cb) {
    return UAVObjConnectCallback(StatusGroundDriveHandle(), cb, EV_MASK_ALL_UPDATES, true);
}
static inline uint16_t StatusGroundDriveCreateInstance() {
    return UAVObjCreateInstance(StatusGroundDriveHandle(), &StatusGroundDriveSetDefaults);
}
static inline void StatusGroundDriveRequestUpdate() {
    UAVObjRequestUpdate(StatusGroundDriveHandle());
}
static inline void StatusGroundDriveRequestInstUpdate(uint16_t instId) {
    UAVObjRequestInstanceUpdate(StatusGroundDriveHandle(), instId);
}
static inline void StatusGroundDriveUpdated() {
    UAVObjUpdated(StatusGroundDriveHandle());
}
static inline void StatusGroundDriveInstUpdated(uint16_t instId) {
    UAVObjInstanceUpdated(StatusGroundDriveHandle(), instId);
}
static inline void StatusGroundDriveLogging() {
    UAVObjLogging(StatusGroundDriveHandle());
}
static inline void StatusGroundDriveInstLogging(uint16_t instId) {
    UAVObjInstanceLogging(StatusGroundDriveHandle(), instId);
}
static inline int32_t StatusGroundDriveGetMetadata(UAVObjMetadata * dataOut) {
    return UAVObjGetMetadata(StatusGroundDriveHandle(), dataOut);
}
static inline int32_t StatusGroundDriveSetMetadata(const UAVObjMetadata * dataIn) {
    return UAVObjSetMetadata(StatusGroundDriveHandle(), dataIn);
}
static inline int8_t StatusGroundDriveReadOnly() {
    return UAVObjReadOnly(StatusGroundDriveHandle());
}

/* Set/Get functions */
extern void StatusGroundDriveNECommandSet(StatusGroundDriveNECommandData *NewNECommand);
extern void StatusGroundDriveNECommandGet(StatusGroundDriveNECommandData *NewNECommand);
extern void StatusGroundDriveNECommandArraySet(float *NewNECommand);
extern void StatusGroundDriveNECommandArrayGet(float *NewNECommand);
extern void StatusGroundDriveStateSet(StatusGroundDriveStateData *NewState);
extern void StatusGroundDriveStateGet(StatusGroundDriveStateData *NewState);
extern void StatusGroundDriveStateArraySet(float *NewState);
extern void StatusGroundDriveStateArrayGet(float *NewState);
extern void StatusGroundDriveBodyCommandSet(StatusGroundDriveBodyCommandData *NewBodyCommand);
extern void StatusGroundDriveBodyCommandGet(StatusGroundDriveBodyCommandData *NewBodyCommand);
extern void StatusGroundDriveBodyCommandArraySet(float *NewBodyCommand);
extern void StatusGroundDriveBodyCommandArrayGet(float *NewBodyCommand);
extern void StatusGroundDriveControlCommandSet(StatusGroundDriveControlCommandData *NewControlCommand);
extern void StatusGroundDriveControlCommandGet(StatusGroundDriveControlCommandData *NewControlCommand);
extern void StatusGroundDriveControlCommandArraySet(float *NewControlCommand);
extern void StatusGroundDriveControlCommandArrayGet(float *NewControlCommand);
extern void StatusGroundDriveControlStateSet(StatusGroundDriveControlStateOptions *NewControlState);
extern void StatusGroundDriveControlStateGet(StatusGroundDriveControlStateOptions *NewControlState);


#endif // STATUSGROUNDDRIVE_H

/**
 * @}
 * @}
 */
