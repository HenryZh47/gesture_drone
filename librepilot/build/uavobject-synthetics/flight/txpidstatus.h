/**
 ******************************************************************************
 * @addtogroup UAVObjects OpenPilot UAVObjects
 * @{
 * @addtogroup TxPIDStatus TxPIDStatus
 * @brief Status of @ref TxPID optional module used to tune PID settings using R/C transmitter.
 *
 * Autogenerated files and functions for TxPIDStatus Object
 *
 * @{
 *
 * @file       txpidstatus.h
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010-2013.
 * @brief      Implementation of the TxPIDStatus object. This file has been
 *             automatically generated by the UAVObjectGenerator.
 *
 * @note       Object definition file: txpidstatus.xml.
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef TXPIDSTATUS_H
#define TXPIDSTATUS_H
#include <stdbool.h>
/* Object constants */
#define TXPIDSTATUS_OBJID 0x18EDDF50
#define TXPIDSTATUS_ISSINGLEINST 1
#define TXPIDSTATUS_ISSETTINGS 0
#define TXPIDSTATUS_ISPRIORITY 1
#define TXPIDSTATUS_NUMBYTES sizeof(TxPIDStatusData)

/* Generic interface functions */
int32_t TxPIDStatusInitialize();
UAVObjHandle TxPIDStatusHandle();
void TxPIDStatusSetDefaults(UAVObjHandle obj, uint16_t instId);

/* Field CurPID information */

// Array element names for field CurPID
typedef enum {
    TXPIDSTATUS_CURPID_INSTANCE1=0,
    TXPIDSTATUS_CURPID_INSTANCE2=1,
    TXPIDSTATUS_CURPID_INSTANCE3=2
} TxPIDStatusCurPIDElem;

// Number of elements for field CurPID
#define TXPIDSTATUS_CURPID_NUMELEM 3



typedef struct __attribute__ ((__packed__)) {
    float Instance1;
    float Instance2;
    float Instance3;
}  TxPIDStatusCurPIDData ;
typedef struct __attribute__ ((__packed__)) {
    float array[3];
}  TxPIDStatusCurPIDDataArray ;
#define TxPIDStatusCurPIDToArray( var ) UAVObjectFieldToArray( TxPIDStatusCurPIDData, var )


/*
 * Packed Object data (unaligned).
 * Should only be used where 4 byte alignment can be guaranteed
 * (eg a single instance on the heap)
 */
typedef struct {
        TxPIDStatusCurPIDData CurPID;

} __attribute__((packed)) TxPIDStatusDataPacked;

/*
 * Packed Object data.
 * Alignment is forced to 4 bytes so as to avoid the potential for CPU usage faults
 * on Cortex M4F during load/store of float UAVO fields
 */
typedef TxPIDStatusDataPacked __attribute__((aligned(4))) TxPIDStatusData;

/* Typesafe Object access functions */
static inline int32_t TxPIDStatusGet(TxPIDStatusData * dataOut) {
    return UAVObjGetData(TxPIDStatusHandle(), dataOut);
}
static inline int32_t TxPIDStatusSet(const TxPIDStatusData * dataIn) {
    return UAVObjSetData(TxPIDStatusHandle(), dataIn);
}
static inline int32_t TxPIDStatusInstGet(uint16_t instId, TxPIDStatusData * dataOut) {
    return UAVObjGetInstanceData(TxPIDStatusHandle(), instId, dataOut);
}
static inline int32_t TxPIDStatusInstSet(uint16_t instId, const TxPIDStatusData * dataIn) {
    return UAVObjSetInstanceData(TxPIDStatusHandle(), instId, dataIn);
}
static inline int32_t TxPIDStatusConnectQueue(xQueueHandle queue) {
    return UAVObjConnectQueue(TxPIDStatusHandle(), queue, EV_MASK_ALL_UPDATES);
}
static inline int32_t TxPIDStatusConnectCallback(UAVObjEventCallback cb) {
    return UAVObjConnectCallback(TxPIDStatusHandle(), cb, EV_MASK_ALL_UPDATES, false);
}
static inline int32_t TxPIDStatusConnectFastCallback(UAVObjEventCallback cb) {
    return UAVObjConnectCallback(TxPIDStatusHandle(), cb, EV_MASK_ALL_UPDATES, true);
}
static inline uint16_t TxPIDStatusCreateInstance() {
    return UAVObjCreateInstance(TxPIDStatusHandle(), &TxPIDStatusSetDefaults);
}
static inline void TxPIDStatusRequestUpdate() {
    UAVObjRequestUpdate(TxPIDStatusHandle());
}
static inline void TxPIDStatusRequestInstUpdate(uint16_t instId) {
    UAVObjRequestInstanceUpdate(TxPIDStatusHandle(), instId);
}
static inline void TxPIDStatusUpdated() {
    UAVObjUpdated(TxPIDStatusHandle());
}
static inline void TxPIDStatusInstUpdated(uint16_t instId) {
    UAVObjInstanceUpdated(TxPIDStatusHandle(), instId);
}
static inline void TxPIDStatusLogging() {
    UAVObjLogging(TxPIDStatusHandle());
}
static inline void TxPIDStatusInstLogging(uint16_t instId) {
    UAVObjInstanceLogging(TxPIDStatusHandle(), instId);
}
static inline int32_t TxPIDStatusGetMetadata(UAVObjMetadata * dataOut) {
    return UAVObjGetMetadata(TxPIDStatusHandle(), dataOut);
}
static inline int32_t TxPIDStatusSetMetadata(const UAVObjMetadata * dataIn) {
    return UAVObjSetMetadata(TxPIDStatusHandle(), dataIn);
}
static inline int8_t TxPIDStatusReadOnly() {
    return UAVObjReadOnly(TxPIDStatusHandle());
}

/* Set/Get functions */
extern void TxPIDStatusCurPIDSet(TxPIDStatusCurPIDData *NewCurPID);
extern void TxPIDStatusCurPIDGet(TxPIDStatusCurPIDData *NewCurPID);
extern void TxPIDStatusCurPIDArraySet(float *NewCurPID);
extern void TxPIDStatusCurPIDArrayGet(float *NewCurPID);


#endif // TXPIDSTATUS_H

/**
 * @}
 * @}
 */
