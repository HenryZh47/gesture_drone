/**
 ******************************************************************************
 *
 * @file       CameraStabSettings.java
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010.
 * @brief      Template for an uavobject in java
 *             This is a autogenerated file!! Do not modify and expect a result.
 *             Settings for the @ref CameraStab module
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

package org.openpilot.uavtalk.uavobjects;

import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.List;
import java.util.ListIterator;

import org.openpilot.uavtalk.UAVObjectManager;
import org.openpilot.uavtalk.UAVObject;
import org.openpilot.uavtalk.UAVDataObject;
import org.openpilot.uavtalk.UAVObjectField;

/**
Settings for the @ref CameraStab module

generated from camerastabsettings.xml
 **/
public class CameraStabSettings extends UAVDataObject {

	public CameraStabSettings() {
		super(OBJID, ISSINGLEINST, ISSETTINGS, NAME);
		
		List<UAVObjectField> fields = new ArrayList<UAVObjectField>();
		

		List<String> MaxAxisLockRateElemNames = new ArrayList<String>();
		MaxAxisLockRateElemNames.add("0");
		fields.add( new UAVObjectField("MaxAxisLockRate", "deg/s", UAVObjectField.FieldType.FLOAT32, MaxAxisLockRateElemNames, null) );

		List<String> MaxAccelElemNames = new ArrayList<String>();
		MaxAccelElemNames.add("0");
		fields.add( new UAVObjectField("MaxAccel", "units/sec", UAVObjectField.FieldType.UINT16, MaxAccelElemNames, null) );

		List<String> InputElemNames = new ArrayList<String>();
		InputElemNames.add("Roll");
		InputElemNames.add("Pitch");
		InputElemNames.add("Yaw");
		List<String> InputEnumOptions = new ArrayList<String>();
		InputEnumOptions.add("Accessory0");
		InputEnumOptions.add("Accessory1");
		InputEnumOptions.add("Accessory2");
		InputEnumOptions.add("Accessory3");
		InputEnumOptions.add("Accessory4");
		InputEnumOptions.add("Accessory5");
		InputEnumOptions.add("None");
		fields.add( new UAVObjectField("Input", "channel", UAVObjectField.FieldType.ENUM, InputElemNames, InputEnumOptions) );

		List<String> InputRangeElemNames = new ArrayList<String>();
		InputRangeElemNames.add("Roll");
		InputRangeElemNames.add("Pitch");
		InputRangeElemNames.add("Yaw");
		fields.add( new UAVObjectField("InputRange", "deg", UAVObjectField.FieldType.UINT8, InputRangeElemNames, null) );

		List<String> InputRateElemNames = new ArrayList<String>();
		InputRateElemNames.add("Roll");
		InputRateElemNames.add("Pitch");
		InputRateElemNames.add("Yaw");
		fields.add( new UAVObjectField("InputRate", "deg/s", UAVObjectField.FieldType.UINT8, InputRateElemNames, null) );

		List<String> StabilizationModeElemNames = new ArrayList<String>();
		StabilizationModeElemNames.add("Roll");
		StabilizationModeElemNames.add("Pitch");
		StabilizationModeElemNames.add("Yaw");
		List<String> StabilizationModeEnumOptions = new ArrayList<String>();
		StabilizationModeEnumOptions.add("Attitude");
		StabilizationModeEnumOptions.add("AxisLock");
		fields.add( new UAVObjectField("StabilizationMode", "", UAVObjectField.FieldType.ENUM, StabilizationModeElemNames, StabilizationModeEnumOptions) );

		List<String> OutputRangeElemNames = new ArrayList<String>();
		OutputRangeElemNames.add("Roll");
		OutputRangeElemNames.add("Pitch");
		OutputRangeElemNames.add("Yaw");
		fields.add( new UAVObjectField("OutputRange", "deg", UAVObjectField.FieldType.UINT8, OutputRangeElemNames, null) );

		List<String> ResponseTimeElemNames = new ArrayList<String>();
		ResponseTimeElemNames.add("Roll");
		ResponseTimeElemNames.add("Pitch");
		ResponseTimeElemNames.add("Yaw");
		fields.add( new UAVObjectField("ResponseTime", "ms", UAVObjectField.FieldType.UINT8, ResponseTimeElemNames, null) );

		List<String> GimbalTypeElemNames = new ArrayList<String>();
		GimbalTypeElemNames.add("0");
		List<String> GimbalTypeEnumOptions = new ArrayList<String>();
		GimbalTypeEnumOptions.add("Generic");
		GimbalTypeEnumOptions.add("Yaw-Roll-Pitch");
		GimbalTypeEnumOptions.add("Yaw-Pitch-Roll");
		GimbalTypeEnumOptions.add("Roll-Pitch-Mixed");
		fields.add( new UAVObjectField("GimbalType", "", UAVObjectField.FieldType.ENUM, GimbalTypeElemNames, GimbalTypeEnumOptions) );

		List<String> FeedForwardElemNames = new ArrayList<String>();
		FeedForwardElemNames.add("Roll");
		FeedForwardElemNames.add("Pitch");
		FeedForwardElemNames.add("Yaw");
		fields.add( new UAVObjectField("FeedForward", "", UAVObjectField.FieldType.UINT8, FeedForwardElemNames, null) );

		List<String> AccelTimeElemNames = new ArrayList<String>();
		AccelTimeElemNames.add("Roll");
		AccelTimeElemNames.add("Pitch");
		AccelTimeElemNames.add("Yaw");
		fields.add( new UAVObjectField("AccelTime", "ms", UAVObjectField.FieldType.UINT8, AccelTimeElemNames, null) );

		List<String> DecelTimeElemNames = new ArrayList<String>();
		DecelTimeElemNames.add("Roll");
		DecelTimeElemNames.add("Pitch");
		DecelTimeElemNames.add("Yaw");
		fields.add( new UAVObjectField("DecelTime", "ms", UAVObjectField.FieldType.UINT8, DecelTimeElemNames, null) );

		List<String> Servo1PitchReverseElemNames = new ArrayList<String>();
		Servo1PitchReverseElemNames.add("0");
		List<String> Servo1PitchReverseEnumOptions = new ArrayList<String>();
		Servo1PitchReverseEnumOptions.add("False");
		Servo1PitchReverseEnumOptions.add("True");
		fields.add( new UAVObjectField("Servo1PitchReverse", "", UAVObjectField.FieldType.ENUM, Servo1PitchReverseElemNames, Servo1PitchReverseEnumOptions) );

		List<String> Servo2PitchReverseElemNames = new ArrayList<String>();
		Servo2PitchReverseElemNames.add("0");
		List<String> Servo2PitchReverseEnumOptions = new ArrayList<String>();
		Servo2PitchReverseEnumOptions.add("False");
		Servo2PitchReverseEnumOptions.add("True");
		fields.add( new UAVObjectField("Servo2PitchReverse", "", UAVObjectField.FieldType.ENUM, Servo2PitchReverseElemNames, Servo2PitchReverseEnumOptions) );


		// Compute the number of bytes for this object
		int numBytes = 0;
		ListIterator<UAVObjectField> li = fields.listIterator();
		while(li.hasNext()) {
			numBytes += li.next().getNumBytes();
		}
		NUMBYTES = numBytes;

		// Initialize object
		initializeFields(fields, ByteBuffer.allocate(NUMBYTES), NUMBYTES);
		// Set the default field values
		setDefaultFieldValues();
		// Set the object description
		setDescription(DESCRIPTION);
	}

	/**
	 * Create a Metadata object filled with default values for this object
	 * @return Metadata object with default values
	 */
	public Metadata getDefaultMetadata() {
		UAVObject.Metadata metadata = new UAVObject.Metadata();
    	metadata.flags =
		    UAVObject.Metadata.AccessModeNum(UAVObject.AccessMode.ACCESS_READWRITE) << UAVOBJ_ACCESS_SHIFT |
		    UAVObject.Metadata.AccessModeNum(UAVObject.AccessMode.ACCESS_READWRITE) << UAVOBJ_GCS_ACCESS_SHIFT |
		    1 << UAVOBJ_TELEMETRY_ACKED_SHIFT |
		    1 << UAVOBJ_GCS_TELEMETRY_ACKED_SHIFT |
		    UAVObject.Metadata.UpdateModeNum(UAVObject.UpdateMode.UPDATEMODE_ONCHANGE) << UAVOBJ_TELEMETRY_UPDATE_MODE_SHIFT |
		    UAVObject.Metadata.UpdateModeNum(UAVObject.UpdateMode.UPDATEMODE_ONCHANGE) << UAVOBJ_GCS_TELEMETRY_UPDATE_MODE_SHIFT |
		    UAVObject.Metadata.UpdateModeNum(UAVObject.UpdateMode.UPDATEMODE_MANUAL) << UAVOBJ_LOGGING_UPDATE_MODE_SHIFT;
    	metadata.flightTelemetryUpdatePeriod = 0;
    	metadata.gcsTelemetryUpdatePeriod = 0;
    	metadata.loggingUpdatePeriod = 0;
 
		return metadata;
	}

	/**
	 * Initialize object fields with the default values.
	 * If a default value is not specified the object fields
	 * will be initialized to zero.
	 */
	public void setDefaultFieldValues()
	{
		getField("MaxAxisLockRate").setValue(1);
		getField("MaxAccel").setValue(500);
		getField("Input").setValue("None",0);
		getField("Input").setValue("None",1);
		getField("Input").setValue("None",2);
		getField("InputRange").setValue(20,0);
		getField("InputRange").setValue(20,1);
		getField("InputRange").setValue(20,2);
		getField("InputRate").setValue(50,0);
		getField("InputRate").setValue(50,1);
		getField("InputRate").setValue(50,2);
		getField("StabilizationMode").setValue("Attitude",0);
		getField("StabilizationMode").setValue("Attitude",1);
		getField("StabilizationMode").setValue("Attitude",2);
		getField("OutputRange").setValue(20,0);
		getField("OutputRange").setValue(20,1);
		getField("OutputRange").setValue(20,2);
		getField("ResponseTime").setValue(0,0);
		getField("ResponseTime").setValue(0,1);
		getField("ResponseTime").setValue(0,2);
		getField("GimbalType").setValue("Generic");
		getField("FeedForward").setValue(0,0);
		getField("FeedForward").setValue(0,1);
		getField("FeedForward").setValue(0,2);
		getField("AccelTime").setValue(5,0);
		getField("AccelTime").setValue(5,1);
		getField("AccelTime").setValue(5,2);
		getField("DecelTime").setValue(5,0);
		getField("DecelTime").setValue(5,1);
		getField("DecelTime").setValue(5,2);
		getField("Servo1PitchReverse").setValue("False");
		getField("Servo2PitchReverse").setValue("False");

	}

	/**
	 * Create a clone of this object, a new instance ID must be specified.
	 * Do not use this function directly to create new instances, the
	 * UAVObjectManager should be used instead.
	 */
	public UAVDataObject clone(long instID) {
		// TODO: Need to get specific instance to clone
		try {
			CameraStabSettings obj = new CameraStabSettings();
			obj.initialize(instID, this.getMetaObject());
			return obj;
		} catch  (Exception e) {
			return null;
		}
	}

	/**
	 * Returns a new instance of this UAVDataObject with default field
	 * values. This is intended to be used by 'reset to default' functionality.
	 * 
	 * @return new instance of this class with default values.
	 */
	@Override
	public UAVDataObject getDefaultInstance(){
		return new CameraStabSettings();
	}

	/**
	 * Static function to retrieve an instance of the object.
	 */
	public CameraStabSettings GetInstance(UAVObjectManager objMngr, long instID)
	{
	    return (CameraStabSettings)(objMngr.getObject(CameraStabSettings.OBJID, instID));
	}

	// Constants
	protected static final long OBJID = 0x8E30D4B4l;
	protected static final String NAME = "CameraStabSettings";
	protected static String DESCRIPTION = "Settings for the @ref CameraStab module";
	protected static final boolean ISSINGLEINST = 1 > 0;
	protected static final boolean ISSETTINGS = 1 > 0;
	protected static int NUMBYTES = 0;


}
