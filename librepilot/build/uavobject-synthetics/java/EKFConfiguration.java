/**
 ******************************************************************************
 *
 * @file       EKFConfiguration.java
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010.
 * @brief      Template for an uavobject in java
 *             This is a autogenerated file!! Do not modify and expect a result.
 *             Extended Kalman Filter initialisation
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

package org.openpilot.uavtalk.uavobjects;

import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.List;
import java.util.ListIterator;

import org.openpilot.uavtalk.UAVObjectManager;
import org.openpilot.uavtalk.UAVObject;
import org.openpilot.uavtalk.UAVDataObject;
import org.openpilot.uavtalk.UAVObjectField;

/**
Extended Kalman Filter initialisation

generated from ekfconfiguration.xml
 **/
public class EKFConfiguration extends UAVDataObject {

	public EKFConfiguration() {
		super(OBJID, ISSINGLEINST, ISSETTINGS, NAME);
		
		List<UAVObjectField> fields = new ArrayList<UAVObjectField>();
		

		List<String> PElemNames = new ArrayList<String>();
		PElemNames.add("PositionNorth");
		PElemNames.add("PositionEast");
		PElemNames.add("PositionDown");
		PElemNames.add("VelocityNorth");
		PElemNames.add("VelocityEast");
		PElemNames.add("VelocityDown");
		PElemNames.add("AttitudeQ1");
		PElemNames.add("AttitudeQ2");
		PElemNames.add("AttitudeQ3");
		PElemNames.add("AttitudeQ4");
		PElemNames.add("GyroDriftX");
		PElemNames.add("GyroDriftY");
		PElemNames.add("GyroDriftZ");
		fields.add( new UAVObjectField("P", "1^2", UAVObjectField.FieldType.FLOAT32, PElemNames, null) );

		List<String> QElemNames = new ArrayList<String>();
		QElemNames.add("GyroX");
		QElemNames.add("GyroY");
		QElemNames.add("GyroZ");
		QElemNames.add("AccelX");
		QElemNames.add("AccelY");
		QElemNames.add("AccelZ");
		QElemNames.add("GyroDriftX");
		QElemNames.add("GyroDriftY");
		QElemNames.add("GyroDriftZ");
		fields.add( new UAVObjectField("Q", "1^2", UAVObjectField.FieldType.FLOAT32, QElemNames, null) );

		List<String> RElemNames = new ArrayList<String>();
		RElemNames.add("GPSPosNorth");
		RElemNames.add("GPSPosEast");
		RElemNames.add("GPSPosDown");
		RElemNames.add("GPSVelNorth");
		RElemNames.add("GPSVelEast");
		RElemNames.add("GPSVelDown");
		RElemNames.add("MagX");
		RElemNames.add("MagY");
		RElemNames.add("MagZ");
		RElemNames.add("BaroZ");
		fields.add( new UAVObjectField("R", "1^2", UAVObjectField.FieldType.FLOAT32, RElemNames, null) );

		List<String> FakeRElemNames = new ArrayList<String>();
		FakeRElemNames.add("FakeGPSPosIndoor");
		FakeRElemNames.add("FakeGPSVelIndoor");
		FakeRElemNames.add("FakeGPSVelAirspeed");
		fields.add( new UAVObjectField("FakeR", "1^2", UAVObjectField.FieldType.FLOAT32, FakeRElemNames, null) );


		// Compute the number of bytes for this object
		int numBytes = 0;
		ListIterator<UAVObjectField> li = fields.listIterator();
		while(li.hasNext()) {
			numBytes += li.next().getNumBytes();
		}
		NUMBYTES = numBytes;

		// Initialize object
		initializeFields(fields, ByteBuffer.allocate(NUMBYTES), NUMBYTES);
		// Set the default field values
		setDefaultFieldValues();
		// Set the object description
		setDescription(DESCRIPTION);
	}

	/**
	 * Create a Metadata object filled with default values for this object
	 * @return Metadata object with default values
	 */
	public Metadata getDefaultMetadata() {
		UAVObject.Metadata metadata = new UAVObject.Metadata();
    	metadata.flags =
		    UAVObject.Metadata.AccessModeNum(UAVObject.AccessMode.ACCESS_READWRITE) << UAVOBJ_ACCESS_SHIFT |
		    UAVObject.Metadata.AccessModeNum(UAVObject.AccessMode.ACCESS_READWRITE) << UAVOBJ_GCS_ACCESS_SHIFT |
		    1 << UAVOBJ_TELEMETRY_ACKED_SHIFT |
		    1 << UAVOBJ_GCS_TELEMETRY_ACKED_SHIFT |
		    UAVObject.Metadata.UpdateModeNum(UAVObject.UpdateMode.UPDATEMODE_ONCHANGE) << UAVOBJ_TELEMETRY_UPDATE_MODE_SHIFT |
		    UAVObject.Metadata.UpdateModeNum(UAVObject.UpdateMode.UPDATEMODE_ONCHANGE) << UAVOBJ_GCS_TELEMETRY_UPDATE_MODE_SHIFT |
		    UAVObject.Metadata.UpdateModeNum(UAVObject.UpdateMode.UPDATEMODE_MANUAL) << UAVOBJ_LOGGING_UPDATE_MODE_SHIFT;
    	metadata.flightTelemetryUpdatePeriod = 0;
    	metadata.gcsTelemetryUpdatePeriod = 0;
    	metadata.loggingUpdatePeriod = 0;
 
		return metadata;
	}

	/**
	 * Initialize object fields with the default values.
	 * If a default value is not specified the object fields
	 * will be initialized to zero.
	 */
	public void setDefaultFieldValues()
	{
		getField("P").setValue(10,0);
		getField("P").setValue(10,1);
		getField("P").setValue(10,2);
		getField("P").setValue(1,3);
		getField("P").setValue(1,4);
		getField("P").setValue(1,5);
		getField("P").setValue(0.007,6);
		getField("P").setValue(0.007,7);
		getField("P").setValue(0.007,8);
		getField("P").setValue(0.007,9);
		getField("P").setValue(1e-6,10);
		getField("P").setValue(1e-6,11);
		getField("P").setValue(1e-6,12);
		getField("Q").setValue(0.01,0);
		getField("Q").setValue(0.01,1);
		getField("Q").setValue(0.01,2);
		getField("Q").setValue(0.01,3);
		getField("Q").setValue(0.01,4);
		getField("Q").setValue(0.01,5);
		getField("Q").setValue(1e-6,6);
		getField("Q").setValue(1e-6,7);
		getField("Q").setValue(1e-6,8);
		getField("R").setValue(1,0);
		getField("R").setValue(1,1);
		getField("R").setValue(1e+6,2);
		getField("R").setValue(0.001,3);
		getField("R").setValue(0.001,4);
		getField("R").setValue(0.001,5);
		getField("R").setValue(10,6);
		getField("R").setValue(10,7);
		getField("R").setValue(10,8);
		getField("R").setValue(0.01,9);
		getField("FakeR").setValue(10,0);
		getField("FakeR").setValue(1,1);
		getField("FakeR").setValue(1000,2);

	}

	/**
	 * Create a clone of this object, a new instance ID must be specified.
	 * Do not use this function directly to create new instances, the
	 * UAVObjectManager should be used instead.
	 */
	public UAVDataObject clone(long instID) {
		// TODO: Need to get specific instance to clone
		try {
			EKFConfiguration obj = new EKFConfiguration();
			obj.initialize(instID, this.getMetaObject());
			return obj;
		} catch  (Exception e) {
			return null;
		}
	}

	/**
	 * Returns a new instance of this UAVDataObject with default field
	 * values. This is intended to be used by 'reset to default' functionality.
	 * 
	 * @return new instance of this class with default values.
	 */
	@Override
	public UAVDataObject getDefaultInstance(){
		return new EKFConfiguration();
	}

	/**
	 * Static function to retrieve an instance of the object.
	 */
	public EKFConfiguration GetInstance(UAVObjectManager objMngr, long instID)
	{
	    return (EKFConfiguration)(objMngr.getObject(EKFConfiguration.OBJID, instID));
	}

	// Constants
	protected static final long OBJID = 0x5E91213Cl;
	protected static final String NAME = "EKFConfiguration";
	protected static String DESCRIPTION = "Extended Kalman Filter initialisation";
	protected static final boolean ISSINGLEINST = 1 > 0;
	protected static final boolean ISSETTINGS = 1 > 0;
	protected static int NUMBYTES = 0;


}
