/**
 ******************************************************************************
 *
 * @file       FixedWingPathFollowerSettings.java
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010.
 * @brief      Template for an uavobject in java
 *             This is a autogenerated file!! Do not modify and expect a result.
 *             Settings for the @ref FixedWingPathFollowerModule
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

package org.openpilot.uavtalk.uavobjects;

import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.List;
import java.util.ListIterator;

import org.openpilot.uavtalk.UAVObjectManager;
import org.openpilot.uavtalk.UAVObject;
import org.openpilot.uavtalk.UAVDataObject;
import org.openpilot.uavtalk.UAVObjectField;

/**
Settings for the @ref FixedWingPathFollowerModule

generated from fixedwingpathfollowersettings.xml
 **/
public class FixedWingPathFollowerSettings extends UAVDataObject {

	public FixedWingPathFollowerSettings() {
		super(OBJID, ISSINGLEINST, ISSETTINGS, NAME);
		
		List<UAVObjectField> fields = new ArrayList<UAVObjectField>();
		

		List<String> HorizontalVelMaxElemNames = new ArrayList<String>();
		HorizontalVelMaxElemNames.add("0");
		fields.add( new UAVObjectField("HorizontalVelMax", "m/s", UAVObjectField.FieldType.FLOAT32, HorizontalVelMaxElemNames, null) );

		List<String> HorizontalVelMinElemNames = new ArrayList<String>();
		HorizontalVelMinElemNames.add("0");
		fields.add( new UAVObjectField("HorizontalVelMin", "m/s", UAVObjectField.FieldType.FLOAT32, HorizontalVelMinElemNames, null) );

		List<String> VerticalVelMaxElemNames = new ArrayList<String>();
		VerticalVelMaxElemNames.add("0");
		fields.add( new UAVObjectField("VerticalVelMax", "m/s", UAVObjectField.FieldType.FLOAT32, VerticalVelMaxElemNames, null) );

		List<String> CourseFeedForwardElemNames = new ArrayList<String>();
		CourseFeedForwardElemNames.add("0");
		fields.add( new UAVObjectField("CourseFeedForward", "s", UAVObjectField.FieldType.FLOAT32, CourseFeedForwardElemNames, null) );

		List<String> ReverseCourseOverlapElemNames = new ArrayList<String>();
		ReverseCourseOverlapElemNames.add("0");
		fields.add( new UAVObjectField("ReverseCourseOverlap", "deg", UAVObjectField.FieldType.FLOAT32, ReverseCourseOverlapElemNames, null) );

		List<String> HorizontalPosPElemNames = new ArrayList<String>();
		HorizontalPosPElemNames.add("0");
		fields.add( new UAVObjectField("HorizontalPosP", "(m/s)/m", UAVObjectField.FieldType.FLOAT32, HorizontalPosPElemNames, null) );

		List<String> VerticalPosPElemNames = new ArrayList<String>();
		VerticalPosPElemNames.add("0");
		fields.add( new UAVObjectField("VerticalPosP", "(m/s)/m", UAVObjectField.FieldType.FLOAT32, VerticalPosPElemNames, null) );

		List<String> CoursePIElemNames = new ArrayList<String>();
		CoursePIElemNames.add("Kp");
		CoursePIElemNames.add("Ki");
		CoursePIElemNames.add("ILimit");
		fields.add( new UAVObjectField("CoursePI", "deg/deg", UAVObjectField.FieldType.FLOAT32, CoursePIElemNames, null) );

		List<String> SpeedPIElemNames = new ArrayList<String>();
		SpeedPIElemNames.add("Kp");
		SpeedPIElemNames.add("Ki");
		SpeedPIElemNames.add("ILimit");
		fields.add( new UAVObjectField("SpeedPI", "deg / (m/s)", UAVObjectField.FieldType.FLOAT32, SpeedPIElemNames, null) );

		List<String> VerticalToPitchCrossFeedElemNames = new ArrayList<String>();
		VerticalToPitchCrossFeedElemNames.add("Kp");
		VerticalToPitchCrossFeedElemNames.add("Max");
		fields.add( new UAVObjectField("VerticalToPitchCrossFeed", "deg / (m/s)", UAVObjectField.FieldType.FLOAT32, VerticalToPitchCrossFeedElemNames, null) );

		List<String> AirspeedToPowerCrossFeedElemNames = new ArrayList<String>();
		AirspeedToPowerCrossFeedElemNames.add("Kp");
		AirspeedToPowerCrossFeedElemNames.add("Max");
		fields.add( new UAVObjectField("AirspeedToPowerCrossFeed", "1 / (m/s)", UAVObjectField.FieldType.FLOAT32, AirspeedToPowerCrossFeedElemNames, null) );

		List<String> PowerPIElemNames = new ArrayList<String>();
		PowerPIElemNames.add("Kp");
		PowerPIElemNames.add("Ki");
		PowerPIElemNames.add("ILimit");
		fields.add( new UAVObjectField("PowerPI", "1/(m/s)", UAVObjectField.FieldType.FLOAT32, PowerPIElemNames, null) );

		List<String> RollLimitElemNames = new ArrayList<String>();
		RollLimitElemNames.add("Min");
		RollLimitElemNames.add("Neutral");
		RollLimitElemNames.add("Max");
		fields.add( new UAVObjectField("RollLimit", "deg", UAVObjectField.FieldType.FLOAT32, RollLimitElemNames, null) );

		List<String> PitchLimitElemNames = new ArrayList<String>();
		PitchLimitElemNames.add("Min");
		PitchLimitElemNames.add("Neutral");
		PitchLimitElemNames.add("Max");
		fields.add( new UAVObjectField("PitchLimit", "deg", UAVObjectField.FieldType.FLOAT32, PitchLimitElemNames, null) );

		List<String> ThrustLimitElemNames = new ArrayList<String>();
		ThrustLimitElemNames.add("Min");
		ThrustLimitElemNames.add("Neutral");
		ThrustLimitElemNames.add("Max");
		fields.add( new UAVObjectField("ThrustLimit", "", UAVObjectField.FieldType.FLOAT32, ThrustLimitElemNames, null) );

		List<String> SafetymarginsElemNames = new ArrayList<String>();
		SafetymarginsElemNames.add("Wind");
		SafetymarginsElemNames.add("Stallspeed");
		SafetymarginsElemNames.add("Lowspeed");
		SafetymarginsElemNames.add("Highspeed");
		SafetymarginsElemNames.add("Overspeed");
		SafetymarginsElemNames.add("Lowpower");
		SafetymarginsElemNames.add("Highpower");
		SafetymarginsElemNames.add("Rollcontrol");
		SafetymarginsElemNames.add("Pitchcontrol");
		fields.add( new UAVObjectField("Safetymargins", "", UAVObjectField.FieldType.FLOAT32, SafetymarginsElemNames, null) );

		List<String> SafetyCutoffLimitsElemNames = new ArrayList<String>();
		SafetyCutoffLimitsElemNames.add("RollDeg");
		SafetyCutoffLimitsElemNames.add("PitchDeg");
		SafetyCutoffLimitsElemNames.add("YawDeg");
		SafetyCutoffLimitsElemNames.add("MaxDecelerationDeltaMPS");
		fields.add( new UAVObjectField("SafetyCutoffLimits", "", UAVObjectField.FieldType.FLOAT32, SafetyCutoffLimitsElemNames, null) );

		List<String> TakeOffPitchElemNames = new ArrayList<String>();
		TakeOffPitchElemNames.add("0");
		fields.add( new UAVObjectField("TakeOffPitch", "deg", UAVObjectField.FieldType.FLOAT32, TakeOffPitchElemNames, null) );

		List<String> LandingPitchElemNames = new ArrayList<String>();
		LandingPitchElemNames.add("0");
		fields.add( new UAVObjectField("LandingPitch", "deg", UAVObjectField.FieldType.FLOAT32, LandingPitchElemNames, null) );

		List<String> UpdatePeriodElemNames = new ArrayList<String>();
		UpdatePeriodElemNames.add("0");
		fields.add( new UAVObjectField("UpdatePeriod", "ms", UAVObjectField.FieldType.INT32, UpdatePeriodElemNames, null) );

		List<String> UseAirspeedSensorElemNames = new ArrayList<String>();
		UseAirspeedSensorElemNames.add("0");
		List<String> UseAirspeedSensorEnumOptions = new ArrayList<String>();
		UseAirspeedSensorEnumOptions.add("False");
		UseAirspeedSensorEnumOptions.add("True");
		fields.add( new UAVObjectField("UseAirspeedSensor", "bool", UAVObjectField.FieldType.ENUM, UseAirspeedSensorElemNames, UseAirspeedSensorEnumOptions) );


		// Compute the number of bytes for this object
		int numBytes = 0;
		ListIterator<UAVObjectField> li = fields.listIterator();
		while(li.hasNext()) {
			numBytes += li.next().getNumBytes();
		}
		NUMBYTES = numBytes;

		// Initialize object
		initializeFields(fields, ByteBuffer.allocate(NUMBYTES), NUMBYTES);
		// Set the default field values
		setDefaultFieldValues();
		// Set the object description
		setDescription(DESCRIPTION);
	}

	/**
	 * Create a Metadata object filled with default values for this object
	 * @return Metadata object with default values
	 */
	public Metadata getDefaultMetadata() {
		UAVObject.Metadata metadata = new UAVObject.Metadata();
    	metadata.flags =
		    UAVObject.Metadata.AccessModeNum(UAVObject.AccessMode.ACCESS_READWRITE) << UAVOBJ_ACCESS_SHIFT |
		    UAVObject.Metadata.AccessModeNum(UAVObject.AccessMode.ACCESS_READWRITE) << UAVOBJ_GCS_ACCESS_SHIFT |
		    1 << UAVOBJ_TELEMETRY_ACKED_SHIFT |
		    1 << UAVOBJ_GCS_TELEMETRY_ACKED_SHIFT |
		    UAVObject.Metadata.UpdateModeNum(UAVObject.UpdateMode.UPDATEMODE_ONCHANGE) << UAVOBJ_TELEMETRY_UPDATE_MODE_SHIFT |
		    UAVObject.Metadata.UpdateModeNum(UAVObject.UpdateMode.UPDATEMODE_ONCHANGE) << UAVOBJ_GCS_TELEMETRY_UPDATE_MODE_SHIFT |
		    UAVObject.Metadata.UpdateModeNum(UAVObject.UpdateMode.UPDATEMODE_MANUAL) << UAVOBJ_LOGGING_UPDATE_MODE_SHIFT;
    	metadata.flightTelemetryUpdatePeriod = 0;
    	metadata.gcsTelemetryUpdatePeriod = 0;
    	metadata.loggingUpdatePeriod = 0;
 
		return metadata;
	}

	/**
	 * Initialize object fields with the default values.
	 * If a default value is not specified the object fields
	 * will be initialized to zero.
	 */
	public void setDefaultFieldValues()
	{
		getField("HorizontalVelMax").setValue(20);
		getField("HorizontalVelMin").setValue(10);
		getField("VerticalVelMax").setValue(10);
		getField("CourseFeedForward").setValue(1);
		getField("ReverseCourseOverlap").setValue(20);
		getField("HorizontalPosP").setValue(0.2);
		getField("VerticalPosP").setValue(0.4);
		getField("CoursePI").setValue(0.2,0);
		getField("CoursePI").setValue(0,1);
		getField("CoursePI").setValue(0,2);
		getField("SpeedPI").setValue(2.5,0);
		getField("SpeedPI").setValue(0.25,1);
		getField("SpeedPI").setValue(10,2);
		getField("VerticalToPitchCrossFeed").setValue(5,0);
		getField("VerticalToPitchCrossFeed").setValue(10,1);
		getField("AirspeedToPowerCrossFeed").setValue(0.2,0);
		getField("AirspeedToPowerCrossFeed").setValue(1,1);
		getField("PowerPI").setValue(0.01,0);
		getField("PowerPI").setValue(0.05,1);
		getField("PowerPI").setValue(0.5,2);
		getField("RollLimit").setValue(-45,0);
		getField("RollLimit").setValue(0,1);
		getField("RollLimit").setValue(45,2);
		getField("PitchLimit").setValue(-10,0);
		getField("PitchLimit").setValue(5,1);
		getField("PitchLimit").setValue(20,2);
		getField("ThrustLimit").setValue(0.1,0);
		getField("ThrustLimit").setValue(0.5,1);
		getField("ThrustLimit").setValue(0.9,2);
		getField("Safetymargins").setValue(1,0);
		getField("Safetymargins").setValue(1,1);
		getField("Safetymargins").setValue(0.5,2);
		getField("Safetymargins").setValue(1.5,3);
		getField("Safetymargins").setValue(1,4);
		getField("Safetymargins").setValue(1,5);
		getField("Safetymargins").setValue(0,6);
		getField("Safetymargins").setValue(1,7);
		getField("Safetymargins").setValue(1,8);
		getField("SafetyCutoffLimits").setValue(25,0);
		getField("SafetyCutoffLimits").setValue(25,1);
		getField("SafetyCutoffLimits").setValue(25,2);
		getField("SafetyCutoffLimits").setValue(4,3);
		getField("TakeOffPitch").setValue(25);
		getField("LandingPitch").setValue(7.5);
		getField("UpdatePeriod").setValue(100);
		getField("UseAirspeedSensor").setValue("True");

	}

	/**
	 * Create a clone of this object, a new instance ID must be specified.
	 * Do not use this function directly to create new instances, the
	 * UAVObjectManager should be used instead.
	 */
	public UAVDataObject clone(long instID) {
		// TODO: Need to get specific instance to clone
		try {
			FixedWingPathFollowerSettings obj = new FixedWingPathFollowerSettings();
			obj.initialize(instID, this.getMetaObject());
			return obj;
		} catch  (Exception e) {
			return null;
		}
	}

	/**
	 * Returns a new instance of this UAVDataObject with default field
	 * values. This is intended to be used by 'reset to default' functionality.
	 * 
	 * @return new instance of this class with default values.
	 */
	@Override
	public UAVDataObject getDefaultInstance(){
		return new FixedWingPathFollowerSettings();
	}

	/**
	 * Static function to retrieve an instance of the object.
	 */
	public FixedWingPathFollowerSettings GetInstance(UAVObjectManager objMngr, long instID)
	{
	    return (FixedWingPathFollowerSettings)(objMngr.getObject(FixedWingPathFollowerSettings.OBJID, instID));
	}

	// Constants
	protected static final long OBJID = 0xDA4294AAl;
	protected static final String NAME = "FixedWingPathFollowerSettings";
	protected static String DESCRIPTION = "Settings for the @ref FixedWingPathFollowerModule";
	protected static final boolean ISSINGLEINST = 1 > 0;
	protected static final boolean ISSETTINGS = 1 > 0;
	protected static int NUMBYTES = 0;


}
