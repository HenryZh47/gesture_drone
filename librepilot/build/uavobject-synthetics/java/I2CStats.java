/**
 ******************************************************************************
 *
 * @file       I2CStats.java
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010.
 * @brief      Template for an uavobject in java
 *             This is a autogenerated file!! Do not modify and expect a result.
 *             Tracks statistics on the I2C bus.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

package org.openpilot.uavtalk.uavobjects;

import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.List;
import java.util.ListIterator;

import org.openpilot.uavtalk.UAVObjectManager;
import org.openpilot.uavtalk.UAVObject;
import org.openpilot.uavtalk.UAVDataObject;
import org.openpilot.uavtalk.UAVObjectField;

/**
Tracks statistics on the I2C bus.

generated from i2cstats.xml
 **/
public class I2CStats extends UAVDataObject {

	public I2CStats() {
		super(OBJID, ISSINGLEINST, ISSETTINGS, NAME);
		
		List<UAVObjectField> fields = new ArrayList<UAVObjectField>();
		

		List<String> evirq_logElemNames = new ArrayList<String>();
		evirq_logElemNames.add("0");
		evirq_logElemNames.add("1");
		evirq_logElemNames.add("2");
		evirq_logElemNames.add("3");
		evirq_logElemNames.add("4");
		fields.add( new UAVObjectField("evirq_log", "", UAVObjectField.FieldType.UINT32, evirq_logElemNames, null) );

		List<String> erirq_logElemNames = new ArrayList<String>();
		erirq_logElemNames.add("0");
		erirq_logElemNames.add("1");
		erirq_logElemNames.add("2");
		erirq_logElemNames.add("3");
		erirq_logElemNames.add("4");
		fields.add( new UAVObjectField("erirq_log", "", UAVObjectField.FieldType.UINT32, erirq_logElemNames, null) );

		List<String> event_errorsElemNames = new ArrayList<String>();
		event_errorsElemNames.add("0");
		fields.add( new UAVObjectField("event_errors", "", UAVObjectField.FieldType.UINT8, event_errorsElemNames, null) );

		List<String> fsm_errorsElemNames = new ArrayList<String>();
		fsm_errorsElemNames.add("0");
		fields.add( new UAVObjectField("fsm_errors", "", UAVObjectField.FieldType.UINT8, fsm_errorsElemNames, null) );

		List<String> irq_errorsElemNames = new ArrayList<String>();
		irq_errorsElemNames.add("0");
		fields.add( new UAVObjectField("irq_errors", "", UAVObjectField.FieldType.UINT8, irq_errorsElemNames, null) );

		List<String> nacksElemNames = new ArrayList<String>();
		nacksElemNames.add("0");
		fields.add( new UAVObjectField("nacks", "", UAVObjectField.FieldType.UINT8, nacksElemNames, null) );

		List<String> timeoutsElemNames = new ArrayList<String>();
		timeoutsElemNames.add("0");
		fields.add( new UAVObjectField("timeouts", "", UAVObjectField.FieldType.UINT8, timeoutsElemNames, null) );

		List<String> last_error_typeElemNames = new ArrayList<String>();
		last_error_typeElemNames.add("0");
		List<String> last_error_typeEnumOptions = new ArrayList<String>();
		last_error_typeEnumOptions.add("EVENT");
		last_error_typeEnumOptions.add("FSM");
		last_error_typeEnumOptions.add("INTERRUPT");
		fields.add( new UAVObjectField("last_error_type", "", UAVObjectField.FieldType.ENUM, last_error_typeElemNames, last_error_typeEnumOptions) );

		List<String> event_logElemNames = new ArrayList<String>();
		event_logElemNames.add("0");
		event_logElemNames.add("1");
		event_logElemNames.add("2");
		event_logElemNames.add("3");
		event_logElemNames.add("4");
		List<String> event_logEnumOptions = new ArrayList<String>();
		event_logEnumOptions.add("I2C_EVENT_BUS_ERROR");
		event_logEnumOptions.add("I2C_EVENT_START");
		event_logEnumOptions.add("I2C_EVENT_STARTED_MORE_TXN_READ");
		event_logEnumOptions.add("I2C_EVENT_STARTED_MORE_TXN_WRITE");
		event_logEnumOptions.add("I2C_EVENT_STARTED_LAST_TXN_READ");
		event_logEnumOptions.add("I2C_EVENT_STARTED_LAST_TXN_WRITE");
		event_logEnumOptions.add("I2C_EVENT_ADDR_SENT_LEN_EQ_0");
		event_logEnumOptions.add("I2C_EVENT_ADDR_SENT_LEN_EQ_1");
		event_logEnumOptions.add("I2C_EVENT_ADDR_SENT_LEN_EQ_2");
		event_logEnumOptions.add("I2C_EVENT_ADDR_SENT_LEN_GT_2");
		event_logEnumOptions.add("I2C_EVENT_TRANSFER_DONE_LEN_EQ_0");
		event_logEnumOptions.add("I2C_EVENT_TRANSFER_DONE_LEN_EQ_1");
		event_logEnumOptions.add("I2C_EVENT_TRANSFER_DONE_LEN_EQ_2");
		event_logEnumOptions.add("I2C_EVENT_TRANSFER_DONE_LEN_GT_2");
		event_logEnumOptions.add("I2C_EVENT_NACK");
		event_logEnumOptions.add("I2C_EVENT_STOPPED");
		event_logEnumOptions.add("I2C_EVENT_AUTO");
		fields.add( new UAVObjectField("event_log", "", UAVObjectField.FieldType.ENUM, event_logElemNames, event_logEnumOptions) );

		List<String> state_logElemNames = new ArrayList<String>();
		state_logElemNames.add("0");
		state_logElemNames.add("1");
		state_logElemNames.add("2");
		state_logElemNames.add("3");
		state_logElemNames.add("4");
		List<String> state_logEnumOptions = new ArrayList<String>();
		state_logEnumOptions.add("I2C_STATE_FSM_FAULT");
		state_logEnumOptions.add("I2C_STATE_BUS_ERROR");
		state_logEnumOptions.add("I2C_STATE_STOPPED");
		state_logEnumOptions.add("I2C_STATE_STOPPING");
		state_logEnumOptions.add("I2C_STATE_STARTING");
		state_logEnumOptions.add("I2C_STATE_R_MORE_TXN_ADDR");
		state_logEnumOptions.add("I2C_STATE_R_MORE_TXN_PRE_ONE");
		state_logEnumOptions.add("I2C_STATE_R_MORE_TXN_PRE_FIRST");
		state_logEnumOptions.add("I2C_STATE_R_MORE_TXN_PRE_MIDDLE");
		state_logEnumOptions.add("I2C_STATE_R_MORE_TXN_LAST");
		state_logEnumOptions.add("I2C_STATE_R_MORE_TXN_POST_LAST");
		state_logEnumOptions.add("R_LAST_TXN_ADDR");
		state_logEnumOptions.add("I2C_STATE_R_LAST_TXN_PRE_ONE");
		state_logEnumOptions.add("I2C_STATE_R_LAST_TXN_PRE_FIRST");
		state_logEnumOptions.add("I2C_STATE_R_LAST_TXN_PRE_MIDDLE");
		state_logEnumOptions.add("I2C_STATE_R_LAST_TXN_PRE_LAST");
		state_logEnumOptions.add("I2C_STATE_R_LAST_TXN_POST_LAST");
		state_logEnumOptions.add("I2C_STATE_W_MORE_TXN_ADDR");
		state_logEnumOptions.add("I2C_STATE_W_MORE_TXN_MIDDLE");
		state_logEnumOptions.add("I2C_STATE_W_MORE_TXN_LAST");
		state_logEnumOptions.add("I2C_STATE_W_LAST_TXN_ADDR");
		state_logEnumOptions.add("I2C_STATE_W_LAST_TXN_MIDDLE");
		state_logEnumOptions.add("I2C_STATE_W_LAST_TXN_LAST");
		state_logEnumOptions.add("I2C_STATE_NACK");
		fields.add( new UAVObjectField("state_log", "", UAVObjectField.FieldType.ENUM, state_logElemNames, state_logEnumOptions) );


		// Compute the number of bytes for this object
		int numBytes = 0;
		ListIterator<UAVObjectField> li = fields.listIterator();
		while(li.hasNext()) {
			numBytes += li.next().getNumBytes();
		}
		NUMBYTES = numBytes;

		// Initialize object
		initializeFields(fields, ByteBuffer.allocate(NUMBYTES), NUMBYTES);
		// Set the default field values
		setDefaultFieldValues();
		// Set the object description
		setDescription(DESCRIPTION);
	}

	/**
	 * Create a Metadata object filled with default values for this object
	 * @return Metadata object with default values
	 */
	public Metadata getDefaultMetadata() {
		UAVObject.Metadata metadata = new UAVObject.Metadata();
    	metadata.flags =
		    UAVObject.Metadata.AccessModeNum(UAVObject.AccessMode.ACCESS_READWRITE) << UAVOBJ_ACCESS_SHIFT |
		    UAVObject.Metadata.AccessModeNum(UAVObject.AccessMode.ACCESS_READWRITE) << UAVOBJ_GCS_ACCESS_SHIFT |
		    0 << UAVOBJ_TELEMETRY_ACKED_SHIFT |
		    0 << UAVOBJ_GCS_TELEMETRY_ACKED_SHIFT |
		    UAVObject.Metadata.UpdateModeNum(UAVObject.UpdateMode.UPDATEMODE_PERIODIC) << UAVOBJ_TELEMETRY_UPDATE_MODE_SHIFT |
		    UAVObject.Metadata.UpdateModeNum(UAVObject.UpdateMode.UPDATEMODE_MANUAL) << UAVOBJ_GCS_TELEMETRY_UPDATE_MODE_SHIFT |
		    UAVObject.Metadata.UpdateModeNum(UAVObject.UpdateMode.UPDATEMODE_MANUAL) << UAVOBJ_LOGGING_UPDATE_MODE_SHIFT;
    	metadata.flightTelemetryUpdatePeriod = 10000;
    	metadata.gcsTelemetryUpdatePeriod = 0;
    	metadata.loggingUpdatePeriod = 0;
 
		return metadata;
	}

	/**
	 * Initialize object fields with the default values.
	 * If a default value is not specified the object fields
	 * will be initialized to zero.
	 */
	public void setDefaultFieldValues()
	{

	}

	/**
	 * Create a clone of this object, a new instance ID must be specified.
	 * Do not use this function directly to create new instances, the
	 * UAVObjectManager should be used instead.
	 */
	public UAVDataObject clone(long instID) {
		// TODO: Need to get specific instance to clone
		try {
			I2CStats obj = new I2CStats();
			obj.initialize(instID, this.getMetaObject());
			return obj;
		} catch  (Exception e) {
			return null;
		}
	}

	/**
	 * Returns a new instance of this UAVDataObject with default field
	 * values. This is intended to be used by 'reset to default' functionality.
	 * 
	 * @return new instance of this class with default values.
	 */
	@Override
	public UAVDataObject getDefaultInstance(){
		return new I2CStats();
	}

	/**
	 * Static function to retrieve an instance of the object.
	 */
	public I2CStats GetInstance(UAVObjectManager objMngr, long instID)
	{
	    return (I2CStats)(objMngr.getObject(I2CStats.OBJID, instID));
	}

	// Constants
	protected static final long OBJID = 0xB714823El;
	protected static final String NAME = "I2CStats";
	protected static String DESCRIPTION = "Tracks statistics on the I2C bus.";
	protected static final boolean ISSINGLEINST = 1 > 0;
	protected static final boolean ISSETTINGS = 0 > 0;
	protected static int NUMBYTES = 0;


}
