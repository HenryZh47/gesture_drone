/**
 ******************************************************************************
 *
 * @file       StabilizationSettings.java
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010.
 * @brief      Template for an uavobject in java
 *             This is a autogenerated file!! Do not modify and expect a result.
 *             PID settings used by the Stabilization module to combine the @ref AttitudeActual and @ref AttitudeDesired to compute @ref ActuatorDesired
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

package org.openpilot.uavtalk.uavobjects;

import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.List;
import java.util.ListIterator;

import org.openpilot.uavtalk.UAVObjectManager;
import org.openpilot.uavtalk.UAVObject;
import org.openpilot.uavtalk.UAVDataObject;
import org.openpilot.uavtalk.UAVObjectField;

/**
PID settings used by the Stabilization module to combine the @ref AttitudeActual and @ref AttitudeDesired to compute @ref ActuatorDesired

generated from stabilizationsettings.xml
 **/
public class StabilizationSettings extends UAVDataObject {

	public StabilizationSettings() {
		super(OBJID, ISSINGLEINST, ISSETTINGS, NAME);
		
		List<UAVObjectField> fields = new ArrayList<UAVObjectField>();
		

		List<String> VbarSensitivityElemNames = new ArrayList<String>();
		VbarSensitivityElemNames.add("Roll");
		VbarSensitivityElemNames.add("Pitch");
		VbarSensitivityElemNames.add("Yaw");
		fields.add( new UAVObjectField("VbarSensitivity", "frac", UAVObjectField.FieldType.FLOAT32, VbarSensitivityElemNames, null) );

		List<String> VbarRollPIElemNames = new ArrayList<String>();
		VbarRollPIElemNames.add("Kp");
		VbarRollPIElemNames.add("Ki");
		fields.add( new UAVObjectField("VbarRollPI", "1/(deg/s)", UAVObjectField.FieldType.FLOAT32, VbarRollPIElemNames, null) );

		List<String> VbarPitchPIElemNames = new ArrayList<String>();
		VbarPitchPIElemNames.add("Kp");
		VbarPitchPIElemNames.add("Ki");
		fields.add( new UAVObjectField("VbarPitchPI", "1/(deg/s)", UAVObjectField.FieldType.FLOAT32, VbarPitchPIElemNames, null) );

		List<String> VbarYawPIElemNames = new ArrayList<String>();
		VbarYawPIElemNames.add("Kp");
		VbarYawPIElemNames.add("Ki");
		fields.add( new UAVObjectField("VbarYawPI", "1/(deg/s)", UAVObjectField.FieldType.FLOAT32, VbarYawPIElemNames, null) );

		List<String> VbarTauElemNames = new ArrayList<String>();
		VbarTauElemNames.add("0");
		fields.add( new UAVObjectField("VbarTau", "sec", UAVObjectField.FieldType.FLOAT32, VbarTauElemNames, null) );

		List<String> GyroTauElemNames = new ArrayList<String>();
		GyroTauElemNames.add("0");
		fields.add( new UAVObjectField("GyroTau", "", UAVObjectField.FieldType.FLOAT32, GyroTauElemNames, null) );

		List<String> DerivativeGammaElemNames = new ArrayList<String>();
		DerivativeGammaElemNames.add("0");
		fields.add( new UAVObjectField("DerivativeGamma", "", UAVObjectField.FieldType.FLOAT32, DerivativeGammaElemNames, null) );

		List<String> AxisLockKpElemNames = new ArrayList<String>();
		AxisLockKpElemNames.add("0");
		fields.add( new UAVObjectField("AxisLockKp", "", UAVObjectField.FieldType.FLOAT32, AxisLockKpElemNames, null) );

		List<String> WeakLevelingKpElemNames = new ArrayList<String>();
		WeakLevelingKpElemNames.add("0");
		fields.add( new UAVObjectField("WeakLevelingKp", "(deg/s)/deg", UAVObjectField.FieldType.FLOAT32, WeakLevelingKpElemNames, null) );

		List<String> CruiseControlMaxPowerFactorElemNames = new ArrayList<String>();
		CruiseControlMaxPowerFactorElemNames.add("0");
		fields.add( new UAVObjectField("CruiseControlMaxPowerFactor", "x", UAVObjectField.FieldType.FLOAT32, CruiseControlMaxPowerFactorElemNames, null) );

		List<String> CruiseControlPowerTrimElemNames = new ArrayList<String>();
		CruiseControlPowerTrimElemNames.add("0");
		fields.add( new UAVObjectField("CruiseControlPowerTrim", "%", UAVObjectField.FieldType.FLOAT32, CruiseControlPowerTrimElemNames, null) );

		List<String> CruiseControlPowerDelayCompElemNames = new ArrayList<String>();
		CruiseControlPowerDelayCompElemNames.add("0");
		fields.add( new UAVObjectField("CruiseControlPowerDelayComp", "sec", UAVObjectField.FieldType.FLOAT32, CruiseControlPowerDelayCompElemNames, null) );

		List<String> ScaleToAirspeedElemNames = new ArrayList<String>();
		ScaleToAirspeedElemNames.add("0");
		fields.add( new UAVObjectField("ScaleToAirspeed", "m/s", UAVObjectField.FieldType.FLOAT32, ScaleToAirspeedElemNames, null) );

		List<String> ScaleToAirspeedLimitsElemNames = new ArrayList<String>();
		ScaleToAirspeedLimitsElemNames.add("Min");
		ScaleToAirspeedLimitsElemNames.add("Max");
		fields.add( new UAVObjectField("ScaleToAirspeedLimits", "", UAVObjectField.FieldType.FLOAT32, ScaleToAirspeedLimitsElemNames, null) );

		List<String> FlightModeMapElemNames = new ArrayList<String>();
		FlightModeMapElemNames.add("0");
		FlightModeMapElemNames.add("1");
		FlightModeMapElemNames.add("2");
		FlightModeMapElemNames.add("3");
		FlightModeMapElemNames.add("4");
		FlightModeMapElemNames.add("5");
		List<String> FlightModeMapEnumOptions = new ArrayList<String>();
		FlightModeMapEnumOptions.add("Bank1");
		FlightModeMapEnumOptions.add("Bank2");
		FlightModeMapEnumOptions.add("Bank3");
		fields.add( new UAVObjectField("FlightModeMap", "", UAVObjectField.FieldType.ENUM, FlightModeMapElemNames, FlightModeMapEnumOptions) );

		List<String> VbarGyroSuppressElemNames = new ArrayList<String>();
		VbarGyroSuppressElemNames.add("0");
		fields.add( new UAVObjectField("VbarGyroSuppress", "%", UAVObjectField.FieldType.INT8, VbarGyroSuppressElemNames, null) );

		List<String> VbarPiroCompElemNames = new ArrayList<String>();
		VbarPiroCompElemNames.add("0");
		List<String> VbarPiroCompEnumOptions = new ArrayList<String>();
		VbarPiroCompEnumOptions.add("False");
		VbarPiroCompEnumOptions.add("True");
		fields.add( new UAVObjectField("VbarPiroComp", "", UAVObjectField.FieldType.ENUM, VbarPiroCompElemNames, VbarPiroCompEnumOptions) );

		List<String> VbarMaxAngleElemNames = new ArrayList<String>();
		VbarMaxAngleElemNames.add("0");
		fields.add( new UAVObjectField("VbarMaxAngle", "deg", UAVObjectField.FieldType.UINT8, VbarMaxAngleElemNames, null) );

		List<String> DerivativeCutoffElemNames = new ArrayList<String>();
		DerivativeCutoffElemNames.add("0");
		fields.add( new UAVObjectField("DerivativeCutoff", "Hz", UAVObjectField.FieldType.UINT8, DerivativeCutoffElemNames, null) );

		List<String> MaxAxisLockElemNames = new ArrayList<String>();
		MaxAxisLockElemNames.add("0");
		fields.add( new UAVObjectField("MaxAxisLock", "deg", UAVObjectField.FieldType.UINT8, MaxAxisLockElemNames, null) );

		List<String> MaxAxisLockRateElemNames = new ArrayList<String>();
		MaxAxisLockRateElemNames.add("0");
		fields.add( new UAVObjectField("MaxAxisLockRate", "deg/s", UAVObjectField.FieldType.UINT8, MaxAxisLockRateElemNames, null) );

		List<String> MaxWeakLevelingRateElemNames = new ArrayList<String>();
		MaxWeakLevelingRateElemNames.add("0");
		fields.add( new UAVObjectField("MaxWeakLevelingRate", "deg/s", UAVObjectField.FieldType.UINT8, MaxWeakLevelingRateElemNames, null) );

		List<String> RattitudeModeTransitionElemNames = new ArrayList<String>();
		RattitudeModeTransitionElemNames.add("0");
		fields.add( new UAVObjectField("RattitudeModeTransition", "%", UAVObjectField.FieldType.UINT8, RattitudeModeTransitionElemNames, null) );

		List<String> CruiseControlMinThrustElemNames = new ArrayList<String>();
		CruiseControlMinThrustElemNames.add("0");
		fields.add( new UAVObjectField("CruiseControlMinThrust", "%", UAVObjectField.FieldType.INT8, CruiseControlMinThrustElemNames, null) );

		List<String> CruiseControlMaxThrustElemNames = new ArrayList<String>();
		CruiseControlMaxThrustElemNames.add("0");
		fields.add( new UAVObjectField("CruiseControlMaxThrust", "%", UAVObjectField.FieldType.UINT8, CruiseControlMaxThrustElemNames, null) );

		List<String> CruiseControlMaxAngleElemNames = new ArrayList<String>();
		CruiseControlMaxAngleElemNames.add("0");
		fields.add( new UAVObjectField("CruiseControlMaxAngle", "deg", UAVObjectField.FieldType.UINT8, CruiseControlMaxAngleElemNames, null) );

		List<String> CruiseControlFlightModeSwitchPosEnableElemNames = new ArrayList<String>();
		CruiseControlFlightModeSwitchPosEnableElemNames.add("0");
		CruiseControlFlightModeSwitchPosEnableElemNames.add("1");
		CruiseControlFlightModeSwitchPosEnableElemNames.add("2");
		CruiseControlFlightModeSwitchPosEnableElemNames.add("3");
		CruiseControlFlightModeSwitchPosEnableElemNames.add("4");
		CruiseControlFlightModeSwitchPosEnableElemNames.add("5");
		List<String> CruiseControlFlightModeSwitchPosEnableEnumOptions = new ArrayList<String>();
		CruiseControlFlightModeSwitchPosEnableEnumOptions.add("False");
		CruiseControlFlightModeSwitchPosEnableEnumOptions.add("True");
		fields.add( new UAVObjectField("CruiseControlFlightModeSwitchPosEnable", "", UAVObjectField.FieldType.ENUM, CruiseControlFlightModeSwitchPosEnableElemNames, CruiseControlFlightModeSwitchPosEnableEnumOptions) );

		List<String> CruiseControlInvertedThrustReversingElemNames = new ArrayList<String>();
		CruiseControlInvertedThrustReversingElemNames.add("0");
		List<String> CruiseControlInvertedThrustReversingEnumOptions = new ArrayList<String>();
		CruiseControlInvertedThrustReversingEnumOptions.add("Unreversed");
		CruiseControlInvertedThrustReversingEnumOptions.add("Reversed");
		fields.add( new UAVObjectField("CruiseControlInvertedThrustReversing", "", UAVObjectField.FieldType.ENUM, CruiseControlInvertedThrustReversingElemNames, CruiseControlInvertedThrustReversingEnumOptions) );

		List<String> CruiseControlInvertedPowerOutputElemNames = new ArrayList<String>();
		CruiseControlInvertedPowerOutputElemNames.add("0");
		List<String> CruiseControlInvertedPowerOutputEnumOptions = new ArrayList<String>();
		CruiseControlInvertedPowerOutputEnumOptions.add("Zero");
		CruiseControlInvertedPowerOutputEnumOptions.add("Normal");
		CruiseControlInvertedPowerOutputEnumOptions.add("Boosted");
		fields.add( new UAVObjectField("CruiseControlInvertedPowerOutput", "", UAVObjectField.FieldType.ENUM, CruiseControlInvertedPowerOutputElemNames, CruiseControlInvertedPowerOutputEnumOptions) );

		List<String> LowThrottleZeroIntegralElemNames = new ArrayList<String>();
		LowThrottleZeroIntegralElemNames.add("0");
		List<String> LowThrottleZeroIntegralEnumOptions = new ArrayList<String>();
		LowThrottleZeroIntegralEnumOptions.add("False");
		LowThrottleZeroIntegralEnumOptions.add("True");
		fields.add( new UAVObjectField("LowThrottleZeroIntegral", "", UAVObjectField.FieldType.ENUM, LowThrottleZeroIntegralElemNames, LowThrottleZeroIntegralEnumOptions) );

		List<String> FlightModeAssistMapElemNames = new ArrayList<String>();
		FlightModeAssistMapElemNames.add("0");
		FlightModeAssistMapElemNames.add("1");
		FlightModeAssistMapElemNames.add("2");
		FlightModeAssistMapElemNames.add("3");
		FlightModeAssistMapElemNames.add("4");
		FlightModeAssistMapElemNames.add("5");
		List<String> FlightModeAssistMapEnumOptions = new ArrayList<String>();
		FlightModeAssistMapEnumOptions.add("None");
		FlightModeAssistMapEnumOptions.add("GPSAssist");
		fields.add( new UAVObjectField("FlightModeAssistMap", "", UAVObjectField.FieldType.ENUM, FlightModeAssistMapElemNames, FlightModeAssistMapEnumOptions) );

		List<String> MeasureBasedDTermElemNames = new ArrayList<String>();
		MeasureBasedDTermElemNames.add("0");
		List<String> MeasureBasedDTermEnumOptions = new ArrayList<String>();
		MeasureBasedDTermEnumOptions.add("False");
		MeasureBasedDTermEnumOptions.add("True");
		fields.add( new UAVObjectField("MeasureBasedDTerm", "", UAVObjectField.FieldType.ENUM, MeasureBasedDTermElemNames, MeasureBasedDTermEnumOptions) );


		// Compute the number of bytes for this object
		int numBytes = 0;
		ListIterator<UAVObjectField> li = fields.listIterator();
		while(li.hasNext()) {
			numBytes += li.next().getNumBytes();
		}
		NUMBYTES = numBytes;

		// Initialize object
		initializeFields(fields, ByteBuffer.allocate(NUMBYTES), NUMBYTES);
		// Set the default field values
		setDefaultFieldValues();
		// Set the object description
		setDescription(DESCRIPTION);
	}

	/**
	 * Create a Metadata object filled with default values for this object
	 * @return Metadata object with default values
	 */
	public Metadata getDefaultMetadata() {
		UAVObject.Metadata metadata = new UAVObject.Metadata();
    	metadata.flags =
		    UAVObject.Metadata.AccessModeNum(UAVObject.AccessMode.ACCESS_READWRITE) << UAVOBJ_ACCESS_SHIFT |
		    UAVObject.Metadata.AccessModeNum(UAVObject.AccessMode.ACCESS_READWRITE) << UAVOBJ_GCS_ACCESS_SHIFT |
		    1 << UAVOBJ_TELEMETRY_ACKED_SHIFT |
		    1 << UAVOBJ_GCS_TELEMETRY_ACKED_SHIFT |
		    UAVObject.Metadata.UpdateModeNum(UAVObject.UpdateMode.UPDATEMODE_ONCHANGE) << UAVOBJ_TELEMETRY_UPDATE_MODE_SHIFT |
		    UAVObject.Metadata.UpdateModeNum(UAVObject.UpdateMode.UPDATEMODE_ONCHANGE) << UAVOBJ_GCS_TELEMETRY_UPDATE_MODE_SHIFT |
		    UAVObject.Metadata.UpdateModeNum(UAVObject.UpdateMode.UPDATEMODE_MANUAL) << UAVOBJ_LOGGING_UPDATE_MODE_SHIFT;
    	metadata.flightTelemetryUpdatePeriod = 0;
    	metadata.gcsTelemetryUpdatePeriod = 0;
    	metadata.loggingUpdatePeriod = 0;
 
		return metadata;
	}

	/**
	 * Initialize object fields with the default values.
	 * If a default value is not specified the object fields
	 * will be initialized to zero.
	 */
	public void setDefaultFieldValues()
	{
		getField("VbarSensitivity").setValue(0.5,0);
		getField("VbarSensitivity").setValue(0.5,1);
		getField("VbarSensitivity").setValue(0.5,2);
		getField("VbarRollPI").setValue(0.005,0);
		getField("VbarRollPI").setValue(0.002,1);
		getField("VbarPitchPI").setValue(0.005,0);
		getField("VbarPitchPI").setValue(0.002,1);
		getField("VbarYawPI").setValue(0.005,0);
		getField("VbarYawPI").setValue(0.002,1);
		getField("VbarTau").setValue(0.5);
		getField("GyroTau").setValue(0.003);
		getField("DerivativeGamma").setValue(1);
		getField("AxisLockKp").setValue(2.5);
		getField("WeakLevelingKp").setValue(0.1);
		getField("CruiseControlMaxPowerFactor").setValue(3);
		getField("CruiseControlPowerTrim").setValue(100);
		getField("CruiseControlPowerDelayComp").setValue(0.25);
		getField("ScaleToAirspeed").setValue(0);
		getField("ScaleToAirspeedLimits").setValue(0.05,0);
		getField("ScaleToAirspeedLimits").setValue(3,1);
		getField("FlightModeMap").setValue("Bank1",0);
		getField("FlightModeMap").setValue("Bank1",1);
		getField("FlightModeMap").setValue("Bank1",2);
		getField("FlightModeMap").setValue("Bank1",3);
		getField("FlightModeMap").setValue("Bank1",4);
		getField("FlightModeMap").setValue("Bank1",5);
		getField("VbarGyroSuppress").setValue(30);
		getField("VbarPiroComp").setValue("False");
		getField("VbarMaxAngle").setValue(10);
		getField("DerivativeCutoff").setValue(20);
		getField("MaxAxisLock").setValue(30);
		getField("MaxAxisLockRate").setValue(2);
		getField("MaxWeakLevelingRate").setValue(5);
		getField("RattitudeModeTransition").setValue(80);
		getField("CruiseControlMinThrust").setValue(5);
		getField("CruiseControlMaxThrust").setValue(100);
		getField("CruiseControlMaxAngle").setValue(105);
		getField("CruiseControlFlightModeSwitchPosEnable").setValue("False",0);
		getField("CruiseControlFlightModeSwitchPosEnable").setValue("False",1);
		getField("CruiseControlFlightModeSwitchPosEnable").setValue("False",2);
		getField("CruiseControlFlightModeSwitchPosEnable").setValue("False",3);
		getField("CruiseControlFlightModeSwitchPosEnable").setValue("False",4);
		getField("CruiseControlFlightModeSwitchPosEnable").setValue("False",5);
		getField("CruiseControlInvertedThrustReversing").setValue("Unreversed");
		getField("CruiseControlInvertedPowerOutput").setValue("Zero");
		getField("LowThrottleZeroIntegral").setValue("True");
		getField("FlightModeAssistMap").setValue("None",0);
		getField("FlightModeAssistMap").setValue("None",1);
		getField("FlightModeAssistMap").setValue("None",2);
		getField("FlightModeAssistMap").setValue("None",3);
		getField("FlightModeAssistMap").setValue("None",4);
		getField("FlightModeAssistMap").setValue("None",5);
		getField("MeasureBasedDTerm").setValue("True");

	}

	/**
	 * Create a clone of this object, a new instance ID must be specified.
	 * Do not use this function directly to create new instances, the
	 * UAVObjectManager should be used instead.
	 */
	public UAVDataObject clone(long instID) {
		// TODO: Need to get specific instance to clone
		try {
			StabilizationSettings obj = new StabilizationSettings();
			obj.initialize(instID, this.getMetaObject());
			return obj;
		} catch  (Exception e) {
			return null;
		}
	}

	/**
	 * Returns a new instance of this UAVDataObject with default field
	 * values. This is intended to be used by 'reset to default' functionality.
	 * 
	 * @return new instance of this class with default values.
	 */
	@Override
	public UAVDataObject getDefaultInstance(){
		return new StabilizationSettings();
	}

	/**
	 * Static function to retrieve an instance of the object.
	 */
	public StabilizationSettings GetInstance(UAVObjectManager objMngr, long instID)
	{
	    return (StabilizationSettings)(objMngr.getObject(StabilizationSettings.OBJID, instID));
	}

	// Constants
	protected static final long OBJID = 0xF4D8AECCl;
	protected static final String NAME = "StabilizationSettings";
	protected static String DESCRIPTION = "PID settings used by the Stabilization module to combine the @ref AttitudeActual and @ref AttitudeDesired to compute @ref ActuatorDesired";
	protected static final boolean ISSINGLEINST = 1 > 0;
	protected static final boolean ISSETTINGS = 1 > 0;
	protected static int NUMBYTES = 0;


}
