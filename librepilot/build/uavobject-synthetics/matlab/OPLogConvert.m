function [] = OPLogConvert(varargin)
%% Define indices and arrays of structures to hold data
% THIS FILE IS AUTOMATICALLY GENERATED.

outputType='mat'; %Default output is a .mat file
checkCRC = false;
wrongSyncByte=0;
wrongMessageByte=0;
lastWrongSyncByte=0;
lastWrongMessageByte=0;
str1=[];
str2=[];
str3=[];
str4=[];
str5=[];

fprintf('\n\n***OpenPilot log parser***\n\n');
global crc_table;
crc_table = [ ...
    hex2dec('00'),hex2dec('07'),hex2dec('0e'),hex2dec('09'),hex2dec('1c'),hex2dec('1b'),hex2dec('12'),hex2dec('15'),hex2dec('38'),hex2dec('3f'),hex2dec('36'),hex2dec('31'),hex2dec('24'),hex2dec('23'),hex2dec('2a'),hex2dec('2d'), ...
    hex2dec('70'),hex2dec('77'),hex2dec('7e'),hex2dec('79'),hex2dec('6c'),hex2dec('6b'),hex2dec('62'),hex2dec('65'),hex2dec('48'),hex2dec('4f'),hex2dec('46'),hex2dec('41'),hex2dec('54'),hex2dec('53'),hex2dec('5a'),hex2dec('5d'), ...
    hex2dec('e0'),hex2dec('e7'),hex2dec('ee'),hex2dec('e9'),hex2dec('fc'),hex2dec('fb'),hex2dec('f2'),hex2dec('f5'),hex2dec('d8'),hex2dec('df'),hex2dec('d6'),hex2dec('d1'),hex2dec('c4'),hex2dec('c3'),hex2dec('ca'),hex2dec('cd'), ...
    hex2dec('90'),hex2dec('97'),hex2dec('9e'),hex2dec('99'),hex2dec('8c'),hex2dec('8b'),hex2dec('82'),hex2dec('85'),hex2dec('a8'),hex2dec('af'),hex2dec('a6'),hex2dec('a1'),hex2dec('b4'),hex2dec('b3'),hex2dec('ba'),hex2dec('bd'), ...
    hex2dec('c7'),hex2dec('c0'),hex2dec('c9'),hex2dec('ce'),hex2dec('db'),hex2dec('dc'),hex2dec('d5'),hex2dec('d2'),hex2dec('ff'),hex2dec('f8'),hex2dec('f1'),hex2dec('f6'),hex2dec('e3'),hex2dec('e4'),hex2dec('ed'),hex2dec('ea'), ...
    hex2dec('b7'),hex2dec('b0'),hex2dec('b9'),hex2dec('be'),hex2dec('ab'),hex2dec('ac'),hex2dec('a5'),hex2dec('a2'),hex2dec('8f'),hex2dec('88'),hex2dec('81'),hex2dec('86'),hex2dec('93'),hex2dec('94'),hex2dec('9d'),hex2dec('9a'), ...
    hex2dec('27'),hex2dec('20'),hex2dec('29'),hex2dec('2e'),hex2dec('3b'),hex2dec('3c'),hex2dec('35'),hex2dec('32'),hex2dec('1f'),hex2dec('18'),hex2dec('11'),hex2dec('16'),hex2dec('03'),hex2dec('04'),hex2dec('0d'),hex2dec('0a'), ...
    hex2dec('57'),hex2dec('50'),hex2dec('59'),hex2dec('5e'),hex2dec('4b'),hex2dec('4c'),hex2dec('45'),hex2dec('42'),hex2dec('6f'),hex2dec('68'),hex2dec('61'),hex2dec('66'),hex2dec('73'),hex2dec('74'),hex2dec('7d'),hex2dec('7a'), ...
    hex2dec('89'),hex2dec('8e'),hex2dec('87'),hex2dec('80'),hex2dec('95'),hex2dec('92'),hex2dec('9b'),hex2dec('9c'),hex2dec('b1'),hex2dec('b6'),hex2dec('bf'),hex2dec('b8'),hex2dec('ad'),hex2dec('aa'),hex2dec('a3'),hex2dec('a4'), ...
    hex2dec('f9'),hex2dec('fe'),hex2dec('f7'),hex2dec('f0'),hex2dec('e5'),hex2dec('e2'),hex2dec('eb'),hex2dec('ec'),hex2dec('c1'),hex2dec('c6'),hex2dec('cf'),hex2dec('c8'),hex2dec('dd'),hex2dec('da'),hex2dec('d3'),hex2dec('d4'), ...
    hex2dec('69'),hex2dec('6e'),hex2dec('67'),hex2dec('60'),hex2dec('75'),hex2dec('72'),hex2dec('7b'),hex2dec('7c'),hex2dec('51'),hex2dec('56'),hex2dec('5f'),hex2dec('58'),hex2dec('4d'),hex2dec('4a'),hex2dec('43'),hex2dec('44'), ...
    hex2dec('19'),hex2dec('1e'),hex2dec('17'),hex2dec('10'),hex2dec('05'),hex2dec('02'),hex2dec('0b'),hex2dec('0c'),hex2dec('21'),hex2dec('26'),hex2dec('2f'),hex2dec('28'),hex2dec('3d'),hex2dec('3a'),hex2dec('33'),hex2dec('34'), ...
    hex2dec('4e'),hex2dec('49'),hex2dec('40'),hex2dec('47'),hex2dec('52'),hex2dec('55'),hex2dec('5c'),hex2dec('5b'),hex2dec('76'),hex2dec('71'),hex2dec('78'),hex2dec('7f'),hex2dec('6a'),hex2dec('6d'),hex2dec('64'),hex2dec('63'), ...
    hex2dec('3e'),hex2dec('39'),hex2dec('30'),hex2dec('37'),hex2dec('22'),hex2dec('25'),hex2dec('2c'),hex2dec('2b'),hex2dec('06'),hex2dec('01'),hex2dec('08'),hex2dec('0f'),hex2dec('1a'),hex2dec('1d'),hex2dec('14'),hex2dec('13'), ...
    hex2dec('ae'),hex2dec('a9'),hex2dec('a0'),hex2dec('a7'),hex2dec('b2'),hex2dec('b5'),hex2dec('bc'),hex2dec('bb'),hex2dec('96'),hex2dec('91'),hex2dec('98'),hex2dec('9f'),hex2dec('8a'),hex2dec('8d'),hex2dec('84'),hex2dec('83'), ...
    hex2dec('de'),hex2dec('d9'),hex2dec('d0'),hex2dec('d7'),hex2dec('c2'),hex2dec('c5'),hex2dec('cc'),hex2dec('cb'),hex2dec('e6'),hex2dec('e1'),hex2dec('e8'),hex2dec('ef'),hex2dec('fa'),hex2dec('fd'),hex2dec('f4'),hex2dec('f3')  ...
    ];

if nargin==0
	%%
	if (exist('uigetfile')) %#ok<EXIST>
		[FileName, PathName]=uigetfile('*.opl');
		logfile=fullfile(PathName, FileName);
		
	else
		error('Your technical computing program does not support file choosers. Please input the file name in the argument. ')
	end	
elseif nargin>0
	logfile=varargin{1};
	if nargin>1
		outputType=varargin{2};
	end
end

if ~strcmpi(outputType,'mat') && ~strcmpi(outputType,'csv')
	error('Incorrect file format specified. Second argument must be ''mat'' or ''csv''.');
end


	accelgyrosettingsIdx = 0;
	AccelGyroSettings=struct('timestamp', 0,...
		 'accel_bias', zeros(3,1),...
		 'accel_scale', zeros(3,1),...
		 'accel_temp_coeff', zeros(3,1),...
		 'gyro_bias', zeros(3,1),...
		 'gyro_scale', zeros(3,1),...
		 'gyro_temp_coeff', zeros(6,1),...
		 'temp_calibrated_extent', zeros(2,1));
	ACCELGYROSETTINGS_OBJID=308458192;
	ACCELGYROSETTINGS_NUMBYTES=92;
	AccelGyroSettingsFidIdx = [];

	accelsensorIdx = 0;
	AccelSensor=struct('timestamp', 0,...
		 'x', 0,...
		 'y', 0,...
		 'z', 0,...
		 'temperature', 0);
	ACCELSENSOR_OBJID=2340143030;
	ACCELSENSOR_NUMBYTES=16;
	AccelSensorFidIdx = [];

	accelstateIdx = 0;
	AccelState=struct('timestamp', 0,...
		 'x', 0,...
		 'y', 0,...
		 'z', 0);
	ACCELSTATE_OBJID=2906394118;
	ACCELSTATE_NUMBYTES=12;
	AccelStateFidIdx = [];

	accessorydesiredIdx = 0;
	AccessoryDesired=struct('timestamp', 0,...
		 'instanceID', 0,...
		 'AccessoryVal', 0);
	ACCESSORYDESIRED_OBJID=3288963162;
	ACCESSORYDESIRED_NUMBYTES=4;
	AccessoryDesiredFidIdx = [];

	actuatorcommandIdx = 0;
	ActuatorCommand=struct('timestamp', 0,...
		 'Channel', zeros(12,1),...
		 'UpdateTime', 0,...
		 'MaxUpdateTime', 0,...
		 'NumFailedUpdates', 0);
	ACTUATORCOMMAND_OBJID=3089276900;
	ACTUATORCOMMAND_NUMBYTES=29;
	ActuatorCommandFidIdx = [];

	actuatordesiredIdx = 0;
	ActuatorDesired=struct('timestamp', 0,...
		 'Roll', 0,...
		 'Pitch', 0,...
		 'Yaw', 0,...
		 'Thrust', 0,...
		 'UpdateTime', 0,...
		 'NumLongUpdates', 0);
	ACTUATORDESIRED_OBJID=3940965416;
	ACTUATORDESIRED_NUMBYTES=24;
	ActuatorDesiredFidIdx = [];

	actuatorsettingsIdx = 0;
	ActuatorSettings=struct('timestamp', 0,...
		 'BankUpdateFreq', zeros(6,1),...
		 'ChannelMax', zeros(12,1),...
		 'ChannelNeutral', zeros(12,1),...
		 'ChannelMin', zeros(12,1),...
		 'BankMode', zeros(6,1),...
		 'ChannelType', zeros(12,1),...
		 'ChannelAddr', zeros(12,1),...
		 'MotorsSpinWhileArmed', 0,...
		 'LowThrottleZeroAxis', zeros(3,1));
	ACTUATORSETTINGS_OBJID=1282075362;
	ACTUATORSETTINGS_NUMBYTES=118;
	ActuatorSettingsFidIdx = [];

	airspeedsensorIdx = 0;
	AirspeedSensor=struct('timestamp', 0,...
		 'DifferentialPressure', 0,...
		 'Temperature', 0,...
		 'CalibratedAirspeed', 0,...
		 'TrueAirspeed', 0,...
		 'SensorValue', 0,...
		 'SensorValueTemperature', 0,...
		 'SensorConnected', 0);
	AIRSPEEDSENSOR_OBJID=1133338522;
	AIRSPEEDSENSOR_NUMBYTES=21;
	AirspeedSensorFidIdx = [];

	airspeedsettingsIdx = 0;
	AirspeedSettings=struct('timestamp', 0,...
		 'Scale', 0,...
		 'IMUBasedEstimationLowPassPeriod1', 0,...
		 'IMUBasedEstimationLowPassPeriod2', 0,...
		 'ZeroPoint', 0,...
		 'SamplePeriod', 0,...
		 'AirspeedSensorType', 0);
	AIRSPEEDSETTINGS_OBJID=1777642874;
	AIRSPEEDSETTINGS_NUMBYTES=16;
	AirspeedSettingsFidIdx = [];

	airspeedstateIdx = 0;
	AirspeedState=struct('timestamp', 0,...
		 'CalibratedAirspeed', 0,...
		 'TrueAirspeed', 0);
	AIRSPEEDSTATE_OBJID=3338706728;
	AIRSPEEDSTATE_NUMBYTES=8;
	AirspeedStateFidIdx = [];

	altitudefiltersettingsIdx = 0;
	AltitudeFilterSettings=struct('timestamp', 0,...
		 'AccelLowPassKp', 0,...
		 'AccelDriftKi', 0,...
		 'InitializationAccelDriftKi', 0,...
		 'BaroKp', 0);
	ALTITUDEFILTERSETTINGS_OBJID=3859874860;
	ALTITUDEFILTERSETTINGS_NUMBYTES=16;
	AltitudeFilterSettingsFidIdx = [];

	altitudeholdsettingsIdx = 0;
	AltitudeHoldSettings=struct('timestamp', 0,...
		 'ThrustRate', 0,...
		 'ThrustLimits', zeros(3,1),...
		 'VerticalPosP', 0,...
		 'VerticalVelPID', zeros(4,1),...
		 'CutThrustWhenZero', 0,...
		 'ThrustExp', 0);
	ALTITUDEHOLDSETTINGS_OBJID=1848927428;
	ALTITUDEHOLDSETTINGS_NUMBYTES=38;
	AltitudeHoldSettingsFidIdx = [];

	altitudeholdstatusIdx = 0;
	AltitudeHoldStatus=struct('timestamp', 0,...
		 'VelocityDesired', 0,...
		 'ThrustDemand', 0,...
		 'State', 0);
	ALTITUDEHOLDSTATUS_OBJID=2365987082;
	ALTITUDEHOLDSTATUS_NUMBYTES=9;
	AltitudeHoldStatusFidIdx = [];

	attitudesettingsIdx = 0;
	AttitudeSettings=struct('timestamp', 0,...
		 'BoardRotation', zeros(3,1),...
		 'BoardLevelTrim', zeros(2,1),...
		 'AccelKp', 0,...
		 'AccelKi', 0,...
		 'MagKi', 0,...
		 'MagKp', 0,...
		 'AccelTau', 0,...
		 'YawBiasRate', 0,...
		 'BoardSteadyMaxVariance', 0,...
		 'ZeroDuringArming', 0,...
		 'BiasCorrectGyro', 0,...
		 'InitialZeroWhenBoardSteady', 0,...
		 'TrimFlight', 0);
	ATTITUDESETTINGS_OBJID=186700766;
	ATTITUDESETTINGS_NUMBYTES=52;
	AttitudeSettingsFidIdx = [];

	attitudesimulatedIdx = 0;
	AttitudeSimulated=struct('timestamp', 0,...
		 'q1', 0,...
		 'q2', 0,...
		 'q3', 0,...
		 'q4', 0,...
		 'Roll', 0,...
		 'Pitch', 0,...
		 'Yaw', 0,...
		 'Velocity', zeros(3,1),...
		 'Position', zeros(3,1));
	ATTITUDESIMULATED_OBJID=2456211060;
	ATTITUDESIMULATED_NUMBYTES=52;
	AttitudeSimulatedFidIdx = [];

	attitudestateIdx = 0;
	AttitudeState=struct('timestamp', 0,...
		 'q1', 0,...
		 'q2', 0,...
		 'q3', 0,...
		 'q4', 0,...
		 'Roll', 0,...
		 'Pitch', 0,...
		 'Yaw', 0);
	ATTITUDESTATE_OBJID=3621837156;
	ATTITUDESTATE_NUMBYTES=28;
	AttitudeStateFidIdx = [];

	auxmagsensorIdx = 0;
	AuxMagSensor=struct('timestamp', 0,...
		 'x', 0,...
		 'y', 0,...
		 'z', 0,...
		 'Status', 0);
	AUXMAGSENSOR_OBJID=162814370;
	AUXMAGSENSOR_NUMBYTES=13;
	AuxMagSensorFidIdx = [];

	auxmagsettingsIdx = 0;
	AuxMagSettings=struct('timestamp', 0,...
		 'mag_bias', zeros(3,1),...
		 'mag_transform', zeros(9,1),...
		 'MagBiasNullingRate', 0,...
		 'BoardRotation', zeros(3,1),...
		 'Type', 0,...
		 'Usage', 0);
	AUXMAGSETTINGS_OBJID=3280007008;
	AUXMAGSETTINGS_NUMBYTES=60;
	AuxMagSettingsFidIdx = [];

	barosensorIdx = 0;
	BaroSensor=struct('timestamp', 0,...
		 'Altitude', 0,...
		 'Temperature', 0,...
		 'Pressure', 0);
	BAROSENSOR_OBJID=1209142950;
	BAROSENSOR_NUMBYTES=12;
	BaroSensorFidIdx = [];

	callbackinfoIdx = 0;
	CallbackInfo=struct('timestamp', 0,...
		 'RunningTime', zeros(11,1),...
		 'StackRemaining', zeros(11,1),...
		 'Running', zeros(11,1));
	CALLBACKINFO_OBJID=3301155896;
	CALLBACKINFO_NUMBYTES=77;
	CallbackInfoFidIdx = [];

	cameracontrolactivityIdx = 0;
	CameraControlActivity=struct('timestamp', 0,...
		 'Latitude', 0,...
		 'Longitude', 0,...
		 'Altitude', 0,...
		 'Roll', 0,...
		 'Pitch', 0,...
		 'Yaw', 0,...
		 'SystemTS', 0,...
		 'ImageId', 0,...
		 'TriggerYear', 0,...
		 'TriggerMillisecond', 0,...
		 'TriggerMonth', 0,...
		 'TriggerDay', 0,...
		 'TriggerHour', 0,...
		 'TriggerMinute', 0,...
		 'TriggerSecond', 0,...
		 'Activity', 0,...
		 'Reason', 0);
	CAMERACONTROLACTIVITY_OBJID=2608493328;
	CAMERACONTROLACTIVITY_NUMBYTES=41;
	CameraControlActivityFidIdx = [];

	cameracontrolsettingsIdx = 0;
	CameraControlSettings=struct('timestamp', 0,...
		 'OutputValues', zeros(3,1),...
		 'InputValues', zeros(3,1),...
		 'TimeInterval', 0,...
		 'SpaceInterval', 0,...
		 'MinimumTimeInterval', 0,...
		 'TriggerPulseWidth', 0,...
		 'AutoTriggerInput', 0,...
		 'ManualTriggerInput', 0,...
		 'AutoTriggerMode', 0);
	CAMERACONTROLSETTINGS_OBJID=398494038;
	CAMERACONTROLSETTINGS_NUMBYTES=41;
	CameraControlSettingsFidIdx = [];

	cameradesiredIdx = 0;
	CameraDesired=struct('timestamp', 0,...
		 'RollOrServo1', 0,...
		 'PitchOrServo2', 0,...
		 'Yaw', 0,...
		 'Trigger', 0);
	CAMERADESIRED_OBJID=1845421086;
	CAMERADESIRED_NUMBYTES=16;
	CameraDesiredFidIdx = [];

	camerastabsettingsIdx = 0;
	CameraStabSettings=struct('timestamp', 0,...
		 'MaxAxisLockRate', 0,...
		 'MaxAccel', 0,...
		 'Input', zeros(3,1),...
		 'InputRange', zeros(3,1),...
		 'InputRate', zeros(3,1),...
		 'StabilizationMode', zeros(3,1),...
		 'OutputRange', zeros(3,1),...
		 'ResponseTime', zeros(3,1),...
		 'GimbalType', 0,...
		 'FeedForward', zeros(3,1),...
		 'AccelTime', zeros(3,1),...
		 'DecelTime', zeros(3,1),...
		 'Servo1PitchReverse', 0,...
		 'Servo2PitchReverse', 0);
	CAMERASTABSETTINGS_OBJID=2385564852;
	CAMERASTABSETTINGS_NUMBYTES=36;
	CameraStabSettingsFidIdx = [];

	debuglogcontrolIdx = 0;
	DebugLogControl=struct('timestamp', 0,...
		 'Flight', 0,...
		 'Entry', 0,...
		 'Operation', 0);
	DEBUGLOGCONTROL_OBJID=3281404668;
	DEBUGLOGCONTROL_NUMBYTES=5;
	DebugLogControlFidIdx = [];

	debuglogentryIdx = 0;
	DebugLogEntry=struct('timestamp', 0,...
		 'FlightTime', 0,...
		 'ObjectID', 0,...
		 'Flight', 0,...
		 'Entry', 0,...
		 'InstanceID', 0,...
		 'Size', 0,...
		 'Type', 0,...
		 'Data', zeros(200,1));
	DEBUGLOGENTRY_OBJID=591191232;
	DEBUGLOGENTRY_NUMBYTES=217;
	DebugLogEntryFidIdx = [];

	debuglogsettingsIdx = 0;
	DebugLogSettings=struct('timestamp', 0,...
		 'LoggingEnabled', 0);
	DEBUGLOGSETTINGS_OBJID=1582891980;
	DEBUGLOGSETTINGS_NUMBYTES=1;
	DebugLogSettingsFidIdx = [];

	debuglogstatusIdx = 0;
	DebugLogStatus=struct('timestamp', 0,...
		 'Flight', 0,...
		 'Entry', 0,...
		 'UsedSlots', 0,...
		 'FreeSlots', 0);
	DEBUGLOGSTATUS_OBJID=2242173654;
	DEBUGLOGSTATUS_NUMBYTES=8;
	DebugLogStatusFidIdx = [];

	ekfconfigurationIdx = 0;
	EKFConfiguration=struct('timestamp', 0,...
		 'P', zeros(13,1),...
		 'Q', zeros(9,1),...
		 'R', zeros(10,1),...
		 'FakeR', zeros(3,1));
	EKFCONFIGURATION_OBJID=1586569532;
	EKFCONFIGURATION_NUMBYTES=140;
	EKFConfigurationFidIdx = [];

	ekfstatevarianceIdx = 0;
	EKFStateVariance=struct('timestamp', 0,...
		 'P', zeros(13,1));
	EKFSTATEVARIANCE_OBJID=515081700;
	EKFSTATEVARIANCE_NUMBYTES=52;
	EKFStateVarianceFidIdx = [];

	faultsettingsIdx = 0;
	FaultSettings=struct('timestamp', 0,...
		 'ActivateFault', 0);
	FAULTSETTINGS_OBJID=662223420;
	FAULTSETTINGS_NUMBYTES=1;
	FaultSettingsFidIdx = [];

	firmwareiapobjIdx = 0;
	FirmwareIAPObj=struct('timestamp', 0,...
		 'crc', 0,...
		 'Command', 0,...
		 'BoardRevision', 0,...
		 'Description', zeros(100,1),...
		 'CPUSerial', zeros(12,1),...
		 'BoardType', 0,...
		 'BootloaderRevision', 0,...
		 'ArmReset', 0);
	FIRMWAREIAPOBJ_OBJID=2200498770;
	FIRMWAREIAPOBJ_NUMBYTES=123;
	FirmwareIAPObjFidIdx = [];

	fixedwingpathfollowersettingsIdx = 0;
	FixedWingPathFollowerSettings=struct('timestamp', 0,...
		 'HorizontalVelMax', 0,...
		 'HorizontalVelMin', 0,...
		 'VerticalVelMax', 0,...
		 'CourseFeedForward', 0,...
		 'ReverseCourseOverlap', 0,...
		 'HorizontalPosP', 0,...
		 'VerticalPosP', 0,...
		 'CoursePI', zeros(3,1),...
		 'SpeedPI', zeros(3,1),...
		 'VerticalToPitchCrossFeed', zeros(2,1),...
		 'AirspeedToPowerCrossFeed', zeros(2,1),...
		 'PowerPI', zeros(3,1),...
		 'RollLimit', zeros(3,1),...
		 'PitchLimit', zeros(3,1),...
		 'ThrustLimit', zeros(3,1),...
		 'Safetymargins', zeros(9,1),...
		 'SafetyCutoffLimits', zeros(4,1),...
		 'TakeOffPitch', 0,...
		 'LandingPitch', 0,...
		 'UpdatePeriod', 0,...
		 'UseAirspeedSensor', 0);
	FIXEDWINGPATHFOLLOWERSETTINGS_OBJID=3661796522;
	FIXEDWINGPATHFOLLOWERSETTINGS_NUMBYTES=181;
	FixedWingPathFollowerSettingsFidIdx = [];

	fixedwingpathfollowerstatusIdx = 0;
	FixedWingPathFollowerStatus=struct('timestamp', 0,...
		 'Error', zeros(3,1),...
		 'ErrorInt', zeros(3,1),...
		 'Command', zeros(3,1),...
		 'Errors', zeros(10,1));
	FIXEDWINGPATHFOLLOWERSTATUS_OBJID=904736838;
	FIXEDWINGPATHFOLLOWERSTATUS_NUMBYTES=46;
	FixedWingPathFollowerStatusFidIdx = [];

	flightbatterysettingsIdx = 0;
	FlightBatterySettings=struct('timestamp', 0,...
		 'Capacity', 0,...
		 'CellVoltageThresholds', zeros(2,1),...
		 'SensorCalibrations', zeros(4,1),...
		 'Type', 0,...
		 'NbCells', 0,...
		 'ResetConsumedEnergy', 0);
	FLIGHTBATTERYSETTINGS_OBJID=2224103472;
	FLIGHTBATTERYSETTINGS_NUMBYTES=31;
	FlightBatterySettingsFidIdx = [];

	flightbatterystateIdx = 0;
	FlightBatteryState=struct('timestamp', 0,...
		 'Voltage', 0,...
		 'Current', 0,...
		 'BoardSupplyVoltage', 0,...
		 'PeakCurrent', 0,...
		 'AvgCurrent', 0,...
		 'ConsumedEnergy', 0,...
		 'EstimatedFlightTime', 0,...
		 'NbCells', 0,...
		 'NbCellsAutodetected', 0);
	FLIGHTBATTERYSTATE_OBJID=647373650;
	FLIGHTBATTERYSTATE_NUMBYTES=30;
	FlightBatteryStateFidIdx = [];

	flightmodesettingsIdx = 0;
	FlightModeSettings=struct('timestamp', 0,...
		 'ReturnToBaseAltitudeOffset', 0,...
		 'ReturnToBaseVelocity', 0,...
		 'LandingVelocity', 0,...
		 'AutoTakeOffVelocity', 0,...
		 'AutoTakeOffHeight', 0,...
		 'PositionHoldOffset', zeros(2,1),...
		 'VarioControlLowPassAlpha', 0,...
		 'ArmedTimeout', 0,...
		 'ArmingSequenceTime', 0,...
		 'DisarmingSequenceTime', 0,...
		 'Arming', 0,...
		 'Stabilization1Settings', zeros(4,1),...
		 'Stabilization2Settings', zeros(4,1),...
		 'Stabilization3Settings', zeros(4,1),...
		 'Stabilization4Settings', zeros(4,1),...
		 'Stabilization5Settings', zeros(4,1),...
		 'Stabilization6Settings', zeros(4,1),...
		 'FlightModePosition', zeros(6,1),...
		 'AlwaysStabilizeWhenArmedSwitch', 0,...
		 'DisableSanityChecks', 0,...
		 'ReturnToBaseNextCommand', 0,...
		 'FlightModeChangeRestartsPathPlan', 0);
	FLIGHTMODESETTINGS_OBJID=3717421838;
	FLIGHTMODESETTINGS_NUMBYTES=73;
	FlightModeSettingsFidIdx = [];

	flightplancontrolIdx = 0;
	FlightPlanControl=struct('timestamp', 0,...
		 'Command', 0);
	FLIGHTPLANCONTROL_OBJID=1407447424;
	FLIGHTPLANCONTROL_NUMBYTES=1;
	FlightPlanControlFidIdx = [];

	flightplansettingsIdx = 0;
	FlightPlanSettings=struct('timestamp', 0,...
		 'Test', 0);
	FLIGHTPLANSETTINGS_OBJID=2464808822;
	FLIGHTPLANSETTINGS_NUMBYTES=4;
	FlightPlanSettingsFidIdx = [];

	flightplanstatusIdx = 0;
	FlightPlanStatus=struct('timestamp', 0,...
		 'ErrorFileID', 0,...
		 'ErrorLineNum', 0,...
		 'Debug', zeros(2,1),...
		 'Status', 0,...
		 'ErrorType', 0);
	FLIGHTPLANSTATUS_OBJID=570879558;
	FLIGHTPLANSTATUS_NUMBYTES=18;
	FlightPlanStatusFidIdx = [];

	flightstatusIdx = 0;
	FlightStatus=struct('timestamp', 0,...
		 'Armed', 0,...
		 'FlightMode', 0,...
		 'AlwaysStabilizeWhenArmed', 0,...
		 'FlightModeAssist', 0,...
		 'AssistedControlState', 0,...
		 'AssistedThrottleState', 0,...
		 'ControlChain', zeros(3,1));
	FLIGHTSTATUS_OBJID=617766440;
	FLIGHTSTATUS_NUMBYTES=9;
	FlightStatusFidIdx = [];

	flighttelemetrystatsIdx = 0;
	FlightTelemetryStats=struct('timestamp', 0,...
		 'TxDataRate', 0,...
		 'TxBytes', 0,...
		 'TxFailures', 0,...
		 'TxRetries', 0,...
		 'RxDataRate', 0,...
		 'RxBytes', 0,...
		 'RxFailures', 0,...
		 'RxSyncErrors', 0,...
		 'RxCrcErrors', 0,...
		 'Status', 0);
	FLIGHTTELEMETRYSTATS_OBJID=1731705690;
	FLIGHTTELEMETRYSTATS_NUMBYTES=37;
	FlightTelemetryStatsFidIdx = [];

	gcsreceiverIdx = 0;
	GCSReceiver=struct('timestamp', 0,...
		 'Channel', zeros(8,1));
	GCSRECEIVER_OBJID=3430814832;
	GCSRECEIVER_NUMBYTES=16;
	GCSReceiverFidIdx = [];

	gcstelemetrystatsIdx = 0;
	GCSTelemetryStats=struct('timestamp', 0,...
		 'TxDataRate', 0,...
		 'TxBytes', 0,...
		 'TxFailures', 0,...
		 'TxRetries', 0,...
		 'RxDataRate', 0,...
		 'RxBytes', 0,...
		 'RxFailures', 0,...
		 'RxSyncErrors', 0,...
		 'RxCrcErrors', 0,...
		 'Status', 0);
	GCSTELEMETRYSTATS_OBJID=3402750986;
	GCSTELEMETRYSTATS_NUMBYTES=37;
	GCSTelemetryStatsFidIdx = [];

	gpsextendedstatusIdx = 0;
	GPSExtendedStatus=struct('timestamp', 0,...
		 'FlightTime', 0,...
		 'Options', 0,...
		 'Status', 0,...
		 'BoardType', zeros(2,1),...
		 'FirmwareHash', zeros(8,1),...
		 'FirmwareTag', zeros(26,1));
	GPSEXTENDEDSTATUS_OBJID=3954198396;
	GPSEXTENDEDSTATUS_NUMBYTES=43;
	GPSExtendedStatusFidIdx = [];

	gpspositionsensorIdx = 0;
	GPSPositionSensor=struct('timestamp', 0,...
		 'Latitude', 0,...
		 'Longitude', 0,...
		 'Altitude', 0,...
		 'GeoidSeparation', 0,...
		 'Heading', 0,...
		 'Groundspeed', 0,...
		 'PDOP', 0,...
		 'HDOP', 0,...
		 'VDOP', 0,...
		 'Status', 0,...
		 'Satellites', 0,...
		 'SensorType', 0,...
		 'AutoConfigStatus', 0,...
		 'BaudRate', 0);
	GPSPOSITIONSENSOR_OBJID=2649880186;
	GPSPOSITIONSENSOR_NUMBYTES=41;
	GPSPositionSensorFidIdx = [];

	gpssatellitesIdx = 0;
	GPSSatellites=struct('timestamp', 0,...
		 'Azimuth', zeros(16,1),...
		 'SatsInView', 0,...
		 'PRN', zeros(16,1),...
		 'Elevation', zeros(16,1),...
		 'SNR', zeros(16,1));
	GPSSATELLITES_OBJID=3310728960;
	GPSSATELLITES_NUMBYTES=81;
	GPSSatellitesFidIdx = [];

	gpssettingsIdx = 0;
	GPSSettings=struct('timestamp', 0,...
		 'MaxPDOP', 0,...
		 'DataProtocol', 0,...
		 'MinSatellites', 0,...
		 'UbxAutoConfig', 0,...
		 'UbxRate', 0,...
		 'UbxDynamicModel', 0,...
		 'UbxSBASMode', 0,...
		 'UbxSBASChannelsUsed', 0,...
		 'UbxSBASSats', 0,...
		 'UbxGNSSMode', 0,...
		 'UbxAssistNowAutonomous', 0);
	GPSSETTINGS_OBJID=2269341442;
	GPSSETTINGS_NUMBYTES=14;
	GPSSettingsFidIdx = [];

	gpstimeIdx = 0;
	GPSTime=struct('timestamp', 0,...
		 'Year', 0,...
		 'Millisecond', 0,...
		 'Month', 0,...
		 'Day', 0,...
		 'Hour', 0,...
		 'Minute', 0,...
		 'Second', 0);
	GPSTIME_OBJID=506414974;
	GPSTIME_NUMBYTES=9;
	GPSTimeFidIdx = [];

	gpsvelocitysensorIdx = 0;
	GPSVelocitySensor=struct('timestamp', 0,...
		 'North', 0,...
		 'East', 0,...
		 'Down', 0);
	GPSVELOCITYSENSOR_OBJID=197489748;
	GPSVELOCITYSENSOR_NUMBYTES=12;
	GPSVelocitySensorFidIdx = [];

	groundpathfollowersettingsIdx = 0;
	GroundPathFollowerSettings=struct('timestamp', 0,...
		 'HorizontalVelMax', 0,...
		 'HorizontalVelMin', 0,...
		 'CourseFeedForward', 0,...
		 'VelocityFeedForward', 0,...
		 'HorizontalPosP', 0,...
		 'SpeedPI', zeros(4,1),...
		 'ThrustLimit', zeros(3,1),...
		 'UpdatePeriod', 0);
	GROUNDPATHFOLLOWERSETTINGS_OBJID=3444847436;
	GROUNDPATHFOLLOWERSETTINGS_NUMBYTES=52;
	GroundPathFollowerSettingsFidIdx = [];

	groundtruthIdx = 0;
	GroundTruth=struct('timestamp', 0,...
		 'AccelerationXYZ', zeros(3,1),...
		 'PositionNED', zeros(3,1),...
		 'VelocityNED', zeros(3,1),...
		 'RPY', zeros(3,1),...
		 'AngularRates', zeros(3,1),...
		 'TrueAirspeed', 0,...
		 'CalibratedAirspeed', 0,...
		 'AngleOfAttack', 0,...
		 'AngleOfSlip', 0);
	GROUNDTRUTH_OBJID=4051229864;
	GROUNDTRUTH_NUMBYTES=76;
	GroundTruthFidIdx = [];

	gyrosensorIdx = 0;
	GyroSensor=struct('timestamp', 0,...
		 'x', 0,...
		 'y', 0,...
		 'z', 0,...
		 'temperature', 0,...
		 'SensorReadTimestamp', 0);
	GYROSENSOR_OBJID=2915280988;
	GYROSENSOR_NUMBYTES=20;
	GyroSensorFidIdx = [];

	gyrostateIdx = 0;
	GyroState=struct('timestamp', 0,...
		 'x', 0,...
		 'y', 0,...
		 'z', 0,...
		 'SensorReadTimestamp', 0);
	GYROSTATE_OBJID=437664020;
	GYROSTATE_NUMBYTES=16;
	GyroStateFidIdx = [];

	homelocationIdx = 0;
	HomeLocation=struct('timestamp', 0,...
		 'Latitude', 0,...
		 'Longitude', 0,...
		 'Altitude', 0,...
		 'Be', zeros(3,1),...
		 'g_e', 0,...
		 'Set', 0);
	HOMELOCATION_OBJID=947818310;
	HOMELOCATION_NUMBYTES=29;
	HomeLocationFidIdx = [];

	hwsettingsIdx = 0;
	HwSettings=struct('timestamp', 0,...
		 'CC_RcvrPort', 0,...
		 'CC_MainPort', 0,...
		 'CC_FlexiPort', 0,...
		 'RV_RcvrPort', 0,...
		 'RV_AuxPort', 0,...
		 'RV_AuxSBusPort', 0,...
		 'RV_FlexiPort', 0,...
		 'RV_TelemetryPort', 0,...
		 'RV_GPSPort', 0,...
		 'RM_RcvrPort', 0,...
		 'RM_MainPort', 0,...
		 'RM_FlexiPort', 0,...
		 'SPK2_RcvrPort', 0,...
		 'SPK2_MainPort', 0,...
		 'SPK2_FlexiPort', 0,...
		 'SPK2_I2CPort', 0,...
		 'TelemetrySpeed', 0,...
		 'GPSSpeed', 0,...
		 'DebugConsoleSpeed', 0,...
		 'MSPSpeed', 0,...
		 'MAVLinkSpeed', 0,...
		 'USB_HIDPort', 0,...
		 'USB_VCPPort', 0,...
		 'OptionalModules', zeros(12,1),...
		 'ADCRouting', zeros(8,1),...
		 'DSMxBind', 0,...
		 'WS2811LED_Out', 0);
	HWSETTINGS_OBJID=636559292;
	HWSETTINGS_NUMBYTES=45;
	HwSettingsFidIdx = [];

	i2cstatsIdx = 0;
	I2CStats=struct('timestamp', 0,...
		 'evirq_log', zeros(5,1),...
		 'erirq_log', zeros(5,1),...
		 'event_errors', 0,...
		 'fsm_errors', 0,...
		 'irq_errors', 0,...
		 'nacks', 0,...
		 'timeouts', 0,...
		 'last_error_type', 0,...
		 'event_log', zeros(5,1),...
		 'state_log', zeros(5,1));
	I2CSTATS_OBJID=3071574590;
	I2CSTATS_NUMBYTES=56;
	I2CStatsFidIdx = [];

	magsensorIdx = 0;
	MagSensor=struct('timestamp', 0,...
		 'x', 0,...
		 'y', 0,...
		 'z', 0,...
		 'temperature', 0);
	MAGSENSOR_OBJID=1893389398;
	MAGSENSOR_NUMBYTES=16;
	MagSensorFidIdx = [];

	magstateIdx = 0;
	MagState=struct('timestamp', 0,...
		 'x', 0,...
		 'y', 0,...
		 'z', 0,...
		 'Source', 0);
	MAGSTATE_OBJID=2684267020;
	MAGSTATE_NUMBYTES=13;
	MagStateFidIdx = [];

	manualcontrolcommandIdx = 0;
	ManualControlCommand=struct('timestamp', 0,...
		 'Throttle', 0,...
		 'Roll', 0,...
		 'Pitch', 0,...
		 'Yaw', 0,...
		 'Collective', 0,...
		 'Thrust', 0,...
		 'Channel', zeros(11,1),...
		 'Connected', 0,...
		 'FlightModeSwitchPosition', 0);
	MANUALCONTROLCOMMAND_OBJID=643541374;
	MANUALCONTROLCOMMAND_NUMBYTES=48;
	ManualControlCommandFidIdx = [];

	manualcontrolsettingsIdx = 0;
	ManualControlSettings=struct('timestamp', 0,...
		 'FailsafeChannel', zeros(9,1),...
		 'ChannelMin', zeros(11,1),...
		 'ChannelNeutral', zeros(11,1),...
		 'ChannelMax', zeros(11,1),...
		 'ResponseTime', zeros(9,1),...
		 'ChannelGroups', zeros(11,1),...
		 'ChannelNumber', zeros(11,1),...
		 'Deadband', 0,...
		 'DeadbandAssistedControl', 0,...
		 'FlightModeNumber', 0,...
		 'FailsafeFlightModeSwitchPosition', 0);
	MANUALCONTROLSETTINGS_OBJID=3267729526;
	MANUALCONTROLSETTINGS_NUMBYTES=146;
	ManualControlSettingsFidIdx = [];

	mixersettingsIdx = 0;
	MixerSettings=struct('timestamp', 0,...
		 'ThrottleCurve1', zeros(5,1),...
		 'ThrottleCurve2', zeros(5,1),...
		 'MixerValueRoll', 0,...
		 'MixerValuePitch', 0,...
		 'MixerValueYaw', 0,...
		 'RollDifferential', 0,...
		 'FirstRollServo', 0,...
		 'Curve2Source', 0,...
		 'Mixer1Type', 0,...
		 'Mixer1Vector', zeros(5,1),...
		 'Mixer2Type', 0,...
		 'Mixer2Vector', zeros(5,1),...
		 'Mixer3Type', 0,...
		 'Mixer3Vector', zeros(5,1),...
		 'Mixer4Type', 0,...
		 'Mixer4Vector', zeros(5,1),...
		 'Mixer5Type', 0,...
		 'Mixer5Vector', zeros(5,1),...
		 'Mixer6Type', 0,...
		 'Mixer6Vector', zeros(5,1),...
		 'Mixer7Type', 0,...
		 'Mixer7Vector', zeros(5,1),...
		 'Mixer8Type', 0,...
		 'Mixer8Vector', zeros(5,1),...
		 'Mixer9Type', 0,...
		 'Mixer9Vector', zeros(5,1),...
		 'Mixer10Type', 0,...
		 'Mixer10Vector', zeros(5,1),...
		 'Mixer11Type', 0,...
		 'Mixer11Vector', zeros(5,1),...
		 'Mixer12Type', 0,...
		 'Mixer12Vector', zeros(5,1));
	MIXERSETTINGS_OBJID=1286884780;
	MIXERSETTINGS_NUMBYTES=118;
	MixerSettingsFidIdx = [];

	mixerstatusIdx = 0;
	MixerStatus=struct('timestamp', 0,...
		 'Mixer1', 0,...
		 'Mixer2', 0,...
		 'Mixer3', 0,...
		 'Mixer4', 0,...
		 'Mixer5', 0,...
		 'Mixer6', 0,...
		 'Mixer7', 0,...
		 'Mixer8', 0,...
		 'Mixer9', 0,...
		 'Mixer10', 0,...
		 'Mixer11', 0,...
		 'Mixer12', 0);
	MIXERSTATUS_OBJID=894177088;
	MIXERSTATUS_NUMBYTES=48;
	MixerStatusFidIdx = [];

	mpugyroaccelsettingsIdx = 0;
	MPUGyroAccelSettings=struct('timestamp', 0,...
		 'GyroScale', 0,...
		 'AccelScale', 0,...
		 'FilterSetting', 0);
	MPUGYROACCELSETTINGS_OBJID=2116560584;
	MPUGYROACCELSETTINGS_NUMBYTES=3;
	MPUGyroAccelSettingsFidIdx = [];

	nedaccelIdx = 0;
	NedAccel=struct('timestamp', 0,...
		 'North', 0,...
		 'East', 0,...
		 'Down', 0);
	NEDACCEL_OBJID=2088721344;
	NEDACCEL_NUMBYTES=12;
	NedAccelFidIdx = [];

	objectpersistenceIdx = 0;
	ObjectPersistence=struct('timestamp', 0,...
		 'ObjectID', 0,...
		 'InstanceID', 0,...
		 'Operation', 0,...
		 'Selection', 0);
	OBJECTPERSISTENCE_OBJID=2579903122;
	OBJECTPERSISTENCE_NUMBYTES=10;
	ObjectPersistenceFidIdx = [];

	oplinkreceiverIdx = 0;
	OPLinkReceiver=struct('timestamp', 0,...
		 'Channel', zeros(16,1));
	OPLINKRECEIVER_OBJID=220843986;
	OPLINKRECEIVER_NUMBYTES=32;
	OPLinkReceiverFidIdx = [];

	oplinksettingsIdx = 0;
	OPLinkSettings=struct('timestamp', 0,...
		 'CoordID', 0,...
		 'CustomDeviceID', 0,...
		 'SerialBaudrate', 0,...
		 'RFFrequency', 0,...
		 'FailsafeDelay', 0,...
		 'BeaconFrequency', 0,...
		 'Protocol', 0,...
		 'LinkType', 0,...
		 'MainPort', 0,...
		 'FlexiPort', 0,...
		 'VCPPort', 0,...
		 'ComSpeed', 0,...
		 'MaxRFPower', 0,...
		 'MinChannel', 0,...
		 'MaxChannel', 0,...
		 'Version', 0,...
		 'RSSIType', 0,...
		 'RFPower', 0,...
		 'RFChannelSpacing', 0,...
		 'HopChannel', zeros(24,1),...
		 'ModemParams', 0,...
		 'Flags', 0,...
		 'BeaconDelay', 0,...
		 'BeaconPeriod', 0);
	OPLINKSETTINGS_OBJID=3972745980;
	OPLINKSETTINGS_NUMBYTES=65;
	OPLinkSettingsFidIdx = [];

	oplinkstatusIdx = 0;
	OPLinkStatus=struct('timestamp', 0,...
		 'DeviceID', 0,...
		 'PairIDs', zeros(4,1),...
		 'BoardRevision', 0,...
		 'HeapRemaining', 0,...
		 'UAVTalkErrors', 0,...
		 'LinkQuality', 0,...
		 'TXRate', 0,...
		 'RXRate', 0,...
		 'TXSeq', 0,...
		 'RXSeq', 0,...
		 'TXPacketRate', 0,...
		 'RXPacketRate', 0,...
		 'Description', zeros(40,1),...
		 'CPUSerial', zeros(12,1),...
		 'BoardType', 0,...
		 'RxGood', 0,...
		 'RxCorrected', 0,...
		 'RxErrors', 0,...
		 'RxMissed', 0,...
		 'RxFailure', 0,...
		 'TxDropped', 0,...
		 'TxFailure', 0,...
		 'Resets', 0,...
		 'Timeouts', 0,...
		 'RSSI', 0,...
		 'LinkState', 0,...
		 'PairSignalStrengths', zeros(4,1));
	OPLINKSTATUS_OBJID=3738449780;
	OPLINKSTATUS_NUMBYTES=108;
	OPLinkStatusFidIdx = [];

	osdsettingsIdx = 0;
	OsdSettings=struct('timestamp', 0,...
		 'AttitudeSetup', zeros(2,1),...
		 'TimeSetup', zeros(2,1),...
		 'BatterySetup', zeros(2,1),...
		 'SpeedSetup', zeros(2,1),...
		 'AltitudeSetup', zeros(2,1),...
		 'HeadingSetup', zeros(2,1),...
		 'Attitude', 0,...
		 'Time', 0,...
		 'Battery', 0,...
		 'Speed', 0,...
		 'Altitude', 0,...
		 'Heading', 0,...
		 'Screen', 0,...
		 'White', 0,...
		 'Black', 0,...
		 'AltitudeSource', 0);
	OSDSETTINGS_OBJID=3703285786;
	OSDSETTINGS_NUMBYTES=34;
	OsdSettingsFidIdx = [];

	overosyncsettingsIdx = 0;
	OveroSyncSettings=struct('timestamp', 0,...
		 'LogOn', 0);
	OVEROSYNCSETTINGS_OBJID=2712388216;
	OVEROSYNCSETTINGS_NUMBYTES=1;
	OveroSyncSettingsFidIdx = [];

	overosyncstatsIdx = 0;
	OveroSyncStats=struct('timestamp', 0,...
		 'Send', 0,...
		 'Received', 0,...
		 'FramesyncErrors', 0,...
		 'UnderrunErrors', 0,...
		 'DroppedUpdates', 0,...
		 'Packets', 0,...
		 'Connected', 0);
	OVEROSYNCSTATS_OBJID=3523764140;
	OVEROSYNCSTATS_NUMBYTES=25;
	OveroSyncStatsFidIdx = [];

	pathactionIdx = 0;
	PathAction=struct('timestamp', 0,...
		 'instanceID', 0,...
		 'ModeParameters', zeros(4,1),...
		 'ConditionParameters', zeros(4,1),...
		 'JumpDestination', 0,...
		 'ErrorDestination', 0,...
		 'Mode', 0,...
		 'EndCondition', 0,...
		 'Command', 0);
	PATHACTION_OBJID=1615385844;
	PATHACTION_NUMBYTES=39;
	PathActionFidIdx = [];

	pathdesiredIdx = 0;
	PathDesired=struct('timestamp', 0,...
		 'Start', zeros(3,1),...
		 'End', zeros(3,1),...
		 'StartingVelocity', 0,...
		 'EndingVelocity', 0,...
		 'ModeParameters', zeros(4,1),...
		 'UID', 0,...
		 'Mode', 0);
	PATHDESIRED_OBJID=3167990678;
	PATHDESIRED_NUMBYTES=51;
	PathDesiredFidIdx = [];

	pathplanIdx = 0;
	PathPlan=struct('timestamp', 0,...
		 'WaypointCount', 0,...
		 'PathActionCount', 0,...
		 'Crc', 0);
	PATHPLAN_OBJID=2197148928;
	PATHPLAN_NUMBYTES=5;
	PathPlanFidIdx = [];

	pathstatusIdx = 0;
	PathStatus=struct('timestamp', 0,...
		 'fractional_progress', 0,...
		 'error', 0,...
		 'path_direction_north', 0,...
		 'path_direction_east', 0,...
		 'path_direction_down', 0,...
		 'correction_direction_north', 0,...
		 'correction_direction_east', 0,...
		 'correction_direction_down', 0,...
		 'path_time', 0,...
		 'UID', 0,...
		 'Status', 0);
	PATHSTATUS_OBJID=1707110064;
	PATHSTATUS_NUMBYTES=39;
	PathStatusFidIdx = [];

	pathsummaryIdx = 0;
	PathSummary=struct('timestamp', 0,...
		 'brake_distance_offset', 0,...
		 'time_remaining', 0,...
		 'fractional_progress', 0,...
		 'decelrate', 0,...
		 'brakeRateActualDesiredRatio', 0,...
		 'velocityIntoHold', 0,...
		 'UID', 0,...
		 'brake_exit_reason', 0,...
		 'Mode', 0);
	PATHSUMMARY_OBJID=2136556054;
	PATHSUMMARY_NUMBYTES=28;
	PathSummaryFidIdx = [];

	perfcounterIdx = 0;
	PerfCounter=struct('timestamp', 0,...
		 'instanceID', 0,...
		 'Id', 0,...
		 'Counter', zeros(3,1));
	PERFCOUNTER_OBJID=1764736890;
	PERFCOUNTER_NUMBYTES=16;
	PerfCounterFidIdx = [];

	pidstatusIdx = 0;
	PIDStatus=struct('timestamp', 0,...
		 'setpoint', 0,...
		 'actual', 0,...
		 'error', 0,...
		 'ulow', 0,...
		 'uhigh', 0,...
		 'command', 0,...
		 'P', 0,...
		 'I', 0,...
		 'D', 0);
	PIDSTATUS_OBJID=1976529062;
	PIDSTATUS_NUMBYTES=36;
	PIDStatusFidIdx = [];

	poilearnsettingsIdx = 0;
	PoiLearnSettings=struct('timestamp', 0,...
		 'Input', 0);
	POILEARNSETTINGS_OBJID=2653087776;
	POILEARNSETTINGS_NUMBYTES=1;
	PoiLearnSettingsFidIdx = [];

	poilocationIdx = 0;
	PoiLocation=struct('timestamp', 0,...
		 'North', 0,...
		 'East', 0,...
		 'Down', 0);
	POILOCATION_OBJID=401091000;
	POILOCATION_NUMBYTES=12;
	PoiLocationFidIdx = [];

	positionstateIdx = 0;
	PositionState=struct('timestamp', 0,...
		 'North', 0,...
		 'East', 0,...
		 'Down', 0);
	POSITIONSTATE_OBJID=1258141272;
	POSITIONSTATE_NUMBYTES=12;
	PositionStateFidIdx = [];

	radiocombridgestatsIdx = 0;
	RadioComBridgeStats=struct('timestamp', 0,...
		 'TelemetryTxBytes', 0,...
		 'TelemetryTxFailures', 0,...
		 'TelemetryTxRetries', 0,...
		 'TelemetryRxBytes', 0,...
		 'TelemetryRxFailures', 0,...
		 'TelemetryRxSyncErrors', 0,...
		 'TelemetryRxCrcErrors', 0,...
		 'RadioTxBytes', 0,...
		 'RadioTxFailures', 0,...
		 'RadioTxRetries', 0,...
		 'RadioRxBytes', 0,...
		 'RadioRxFailures', 0,...
		 'RadioRxSyncErrors', 0,...
		 'RadioRxCrcErrors', 0);
	RADIOCOMBRIDGESTATS_OBJID=614051416;
	RADIOCOMBRIDGESTATS_NUMBYTES=56;
	RadioComBridgeStatsFidIdx = [];

	ratedesiredIdx = 0;
	RateDesired=struct('timestamp', 0,...
		 'Roll', 0,...
		 'Pitch', 0,...
		 'Yaw', 0,...
		 'Thrust', 0);
	RATEDESIRED_OBJID=910324286;
	RATEDESIRED_NUMBYTES=16;
	RateDesiredFidIdx = [];

	receiveractivityIdx = 0;
	ReceiverActivity=struct('timestamp', 0,...
		 'ActiveGroup', 0,...
		 'ActiveChannel', 0);
	RECEIVERACTIVITY_OBJID=2685187242;
	RECEIVERACTIVITY_NUMBYTES=2;
	ReceiverActivityFidIdx = [];

	receiverstatusIdx = 0;
	ReceiverStatus=struct('timestamp', 0,...
		 'Quality', 0);
	RECEIVERSTATUS_OBJID=4247055858;
	RECEIVERSTATUS_NUMBYTES=1;
	ReceiverStatusFidIdx = [];

	revocalibrationIdx = 0;
	RevoCalibration=struct('timestamp', 0,...
		 'mag_bias', zeros(3,1),...
		 'mag_transform', zeros(9,1),...
		 'MagBiasNullingRate', 0,...
		 'BiasCorrectedRaw', 0);
	REVOCALIBRATION_OBJID=161856008;
	REVOCALIBRATION_NUMBYTES=53;
	RevoCalibrationFidIdx = [];

	revosettingsIdx = 0;
	RevoSettings=struct('timestamp', 0,...
		 'BaroGPSOffsetCorrectionAlpha', 0,...
		 'MagnetometerMaxDeviation', zeros(2,1),...
		 'BaroTempCorrectionPolynomial', zeros(4,1),...
		 'BaroTempCorrectionExtent', zeros(2,1),...
		 'VelocityPostProcessingLowPassAlpha', 0,...
		 'FusionAlgorithm', 0);
	REVOSETTINGS_OBJID=3294030746;
	REVOSETTINGS_NUMBYTES=41;
	RevoSettingsFidIdx = [];

	sonaraltitudeIdx = 0;
	SonarAltitude=struct('timestamp', 0,...
		 'Altitude', 0);
	SONARALTITUDE_OBJID=1817840828;
	SONARALTITUDE_NUMBYTES=4;
	SonarAltitudeFidIdx = [];

	stabilizationbankIdx = 0;
	StabilizationBank=struct('timestamp', 0,...
		 'RollRatePID', zeros(4,1),...
		 'PitchRatePID', zeros(4,1),...
		 'YawRatePID', zeros(4,1),...
		 'RollPI', zeros(3,1),...
		 'PitchPI', zeros(3,1),...
		 'YawPI', zeros(3,1),...
		 'ManualRate', zeros(3,1),...
		 'MaximumRate', zeros(3,1),...
		 'RollMax', 0,...
		 'PitchMax', 0,...
		 'YawMax', 0,...
		 'StickExpo', zeros(3,1),...
		 'AcroInsanityFactor', zeros(3,1),...
		 'EnablePiroComp', 0,...
		 'FpvCamTiltCompensation', 0,...
		 'EnableThrustPIDScaling', 0,...
		 'ThrustPIDScaleCurve', zeros(5,1),...
		 'ThrustPIDScaleSource', 0,...
		 'ThrustPIDScaleTarget', 0,...
		 'ThrustPIDScaleAxes', 0);
	STABILIZATIONBANK_OBJID=926446064;
	STABILIZATIONBANK_NUMBYTES=116;
	StabilizationBankFidIdx = [];

	stabilizationdesiredIdx = 0;
	StabilizationDesired=struct('timestamp', 0,...
		 'Roll', 0,...
		 'Pitch', 0,...
		 'Yaw', 0,...
		 'Thrust', 0,...
		 'StabilizationMode', zeros(4,1));
	STABILIZATIONDESIRED_OBJID=1363574908;
	STABILIZATIONDESIRED_NUMBYTES=20;
	StabilizationDesiredFidIdx = [];

	stabilizationsettingsIdx = 0;
	StabilizationSettings=struct('timestamp', 0,...
		 'VbarSensitivity', zeros(3,1),...
		 'VbarRollPI', zeros(2,1),...
		 'VbarPitchPI', zeros(2,1),...
		 'VbarYawPI', zeros(2,1),...
		 'VbarTau', 0,...
		 'GyroTau', 0,...
		 'DerivativeGamma', 0,...
		 'AxisLockKp', 0,...
		 'WeakLevelingKp', 0,...
		 'CruiseControlMaxPowerFactor', 0,...
		 'CruiseControlPowerTrim', 0,...
		 'CruiseControlPowerDelayComp', 0,...
		 'ScaleToAirspeed', 0,...
		 'ScaleToAirspeedLimits', zeros(2,1),...
		 'FlightModeMap', zeros(6,1),...
		 'VbarGyroSuppress', 0,...
		 'VbarPiroComp', 0,...
		 'VbarMaxAngle', 0,...
		 'DerivativeCutoff', 0,...
		 'MaxAxisLock', 0,...
		 'MaxAxisLockRate', 0,...
		 'MaxWeakLevelingRate', 0,...
		 'RattitudeModeTransition', 0,...
		 'CruiseControlMinThrust', 0,...
		 'CruiseControlMaxThrust', 0,...
		 'CruiseControlMaxAngle', 0,...
		 'CruiseControlFlightModeSwitchPosEnable', zeros(6,1),...
		 'CruiseControlInvertedThrustReversing', 0,...
		 'CruiseControlInvertedPowerOutput', 0,...
		 'LowThrottleZeroIntegral', 0,...
		 'FlightModeAssistMap', zeros(6,1),...
		 'MeasureBasedDTerm', 0);
	STABILIZATIONSETTINGS_OBJID=4107841228;
	STABILIZATIONSETTINGS_NUMBYTES=113;
	StabilizationSettingsFidIdx = [];

	stabilizationsettingsbank1Idx = 0;
	StabilizationSettingsBank1=struct('timestamp', 0,...
		 'RollRatePID', zeros(4,1),...
		 'PitchRatePID', zeros(4,1),...
		 'YawRatePID', zeros(4,1),...
		 'RollPI', zeros(3,1),...
		 'PitchPI', zeros(3,1),...
		 'YawPI', zeros(3,1),...
		 'ManualRate', zeros(3,1),...
		 'MaximumRate', zeros(3,1),...
		 'RollMax', 0,...
		 'PitchMax', 0,...
		 'YawMax', 0,...
		 'StickExpo', zeros(3,1),...
		 'AcroInsanityFactor', zeros(3,1),...
		 'EnablePiroComp', 0,...
		 'FpvCamTiltCompensation', 0,...
		 'EnableThrustPIDScaling', 0,...
		 'ThrustPIDScaleCurve', zeros(5,1),...
		 'ThrustPIDScaleSource', 0,...
		 'ThrustPIDScaleTarget', 0,...
		 'ThrustPIDScaleAxes', 0);
	STABILIZATIONSETTINGSBANK1_OBJID=3401740508;
	STABILIZATIONSETTINGSBANK1_NUMBYTES=116;
	StabilizationSettingsBank1FidIdx = [];

	stabilizationsettingsbank2Idx = 0;
	StabilizationSettingsBank2=struct('timestamp', 0,...
		 'RollRatePID', zeros(4,1),...
		 'PitchRatePID', zeros(4,1),...
		 'YawRatePID', zeros(4,1),...
		 'RollPI', zeros(3,1),...
		 'PitchPI', zeros(3,1),...
		 'YawPI', zeros(3,1),...
		 'ManualRate', zeros(3,1),...
		 'MaximumRate', zeros(3,1),...
		 'RollMax', 0,...
		 'PitchMax', 0,...
		 'YawMax', 0,...
		 'StickExpo', zeros(3,1),...
		 'AcroInsanityFactor', zeros(3,1),...
		 'EnablePiroComp', 0,...
		 'FpvCamTiltCompensation', 0,...
		 'EnableThrustPIDScaling', 0,...
		 'ThrustPIDScaleCurve', zeros(5,1),...
		 'ThrustPIDScaleSource', 0,...
		 'ThrustPIDScaleTarget', 0,...
		 'ThrustPIDScaleAxes', 0);
	STABILIZATIONSETTINGSBANK2_OBJID=235114804;
	STABILIZATIONSETTINGSBANK2_NUMBYTES=116;
	StabilizationSettingsBank2FidIdx = [];

	stabilizationsettingsbank3Idx = 0;
	StabilizationSettingsBank3=struct('timestamp', 0,...
		 'RollRatePID', zeros(4,1),...
		 'PitchRatePID', zeros(4,1),...
		 'YawRatePID', zeros(4,1),...
		 'RollPI', zeros(3,1),...
		 'PitchPI', zeros(3,1),...
		 'YawPI', zeros(3,1),...
		 'ManualRate', zeros(3,1),...
		 'MaximumRate', zeros(3,1),...
		 'RollMax', 0,...
		 'PitchMax', 0,...
		 'YawMax', 0,...
		 'StickExpo', zeros(3,1),...
		 'AcroInsanityFactor', zeros(3,1),...
		 'EnablePiroComp', 0,...
		 'FpvCamTiltCompensation', 0,...
		 'EnableThrustPIDScaling', 0,...
		 'ThrustPIDScaleCurve', zeros(5,1),...
		 'ThrustPIDScaleSource', 0,...
		 'ThrustPIDScaleTarget', 0,...
		 'ThrustPIDScaleAxes', 0);
	STABILIZATIONSETTINGSBANK3_OBJID=1551947844;
	STABILIZATIONSETTINGSBANK3_NUMBYTES=116;
	StabilizationSettingsBank3FidIdx = [];

	stabilizationstatusIdx = 0;
	StabilizationStatus=struct('timestamp', 0,...
		 'OuterLoop', zeros(4,1),...
		 'InnerLoop', zeros(4,1));
	STABILIZATIONSTATUS_OBJID=40053846;
	STABILIZATIONSTATUS_NUMBYTES=8;
	StabilizationStatusFidIdx = [];

	statusgrounddriveIdx = 0;
	StatusGroundDrive=struct('timestamp', 0,...
		 'NECommand', zeros(2,1),...
		 'State', zeros(3,1),...
		 'BodyCommand', zeros(2,1),...
		 'ControlCommand', zeros(2,1),...
		 'ControlState', 0);
	STATUSGROUNDDRIVE_OBJID=3366529704;
	STATUSGROUNDDRIVE_NUMBYTES=37;
	StatusGroundDriveFidIdx = [];

	statusvtolautotakeoffIdx = 0;
	StatusVtolAutoTakeoff=struct('timestamp', 0,...
		 'AltitudeAtState', zeros(10,1),...
		 'State', 0,...
		 'StateExitReason', zeros(10,1),...
		 'AltitudeState', 0,...
		 'ControlState', 0);
	STATUSVTOLAUTOTAKEOFF_OBJID=2681511916;
	STATUSVTOLAUTOTAKEOFF_NUMBYTES=53;
	StatusVtolAutoTakeoffFidIdx = [];

	statusvtollandIdx = 0;
	StatusVtolLand=struct('timestamp', 0,...
		 'AltitudeAtState', zeros(10,1),...
		 'targetDescentRate', 0,...
		 'averageDescentRate', 0,...
		 'averageDescentThrust', 0,...
		 'calculatedNeutralThrust', 0,...
		 'WtgForGroundEffect', zeros(2,1),...
		 'State', 0,...
		 'StateExitReason', zeros(10,1),...
		 'AltitudeState', 0);
	STATUSVTOLLAND_OBJID=558325038;
	STATUSVTOLLAND_NUMBYTES=76;
	StatusVtolLandFidIdx = [];

	systemalarmsIdx = 0;
	SystemAlarms=struct('timestamp', 0,...
		 'Alarm', zeros(21,1),...
		 'ExtendedAlarmStatus', zeros(2,1),...
		 'ExtendedAlarmSubStatus', zeros(2,1));
	SYSTEMALARMS_OBJID=551996076;
	SYSTEMALARMS_NUMBYTES=25;
	SystemAlarmsFidIdx = [];

	systemidentsettingsIdx = 0;
	SystemIdentSettings=struct('timestamp', 0,...
		 'Tau', 0,...
		 'Beta', zeros(3,1),...
		 'YawToRollPitchPIDRatioMin', 0,...
		 'YawToRollPitchPIDRatioMax', 0,...
		 'DerivativeFactor', 0,...
		 'SmoothQuickValue', 0,...
		 'GyroReadTimeAverage', 0,...
		 'DampMin', 0,...
		 'DampRate', 0,...
		 'DampMax', 0,...
		 'NoiseMin', 0,...
		 'NoiseRate', 0,...
		 'NoiseMax', 0,...
		 'CalculateYaw', 0,...
		 'DestinationPidBank', 0,...
		 'TuningDuration', 0,...
		 'SmoothQuickSource', 0,...
		 'DisableSanityChecks', 0,...
		 'Complete', 0);
	SYSTEMIDENTSETTINGS_OBJID=1369935716;
	SYSTEMIDENTSETTINGS_NUMBYTES=48;
	SystemIdentSettingsFidIdx = [];

	systemidentstateIdx = 0;
	SystemIdentState=struct('timestamp', 0,...
		 'Tau', 0,...
		 'Beta', zeros(3,1),...
		 'Bias', zeros(3,1),...
		 'Noise', zeros(3,1),...
		 'Period', 0,...
		 'NumAfPredicts', 0,...
		 'NumSpilledPts', 0,...
		 'HoverThrottle', 0,...
		 'GyroReadTimeAverage', 0,...
		 'Complete', 0);
	SYSTEMIDENTSTATE_OBJID=2104762916;
	SYSTEMIDENTSTATE_NUMBYTES=61;
	SystemIdentStateFidIdx = [];

	systemsettingsIdx = 0;
	SystemSettings=struct('timestamp', 0,...
		 'GUIConfigData', zeros(4,1),...
		 'AirSpeedMax', 0,...
		 'AirSpeedMin', 0,...
		 'AirframeType', 0,...
		 'VehicleName', zeros(20,1),...
		 'ThrustControl', 0);
	SYSTEMSETTINGS_OBJID=3654325176;
	SYSTEMSETTINGS_NUMBYTES=46;
	SystemSettingsFidIdx = [];

	systemstatsIdx = 0;
	SystemStats=struct('timestamp', 0,...
		 'FlightTime', 0,...
		 'HeapRemaining', 0,...
		 'CPUIdleTicks', 0,...
		 'CPUZeroLoadTicks', 0,...
		 'EventSystemWarningID', 0,...
		 'ObjectManagerCallbackID', 0,...
		 'ObjectManagerQueueID', 0,...
		 'IRQStackRemaining', 0,...
		 'SystemModStackRemaining', 0,...
		 'SysSlotsFree', 0,...
		 'SysSlotsActive', 0,...
		 'UsrSlotsFree', 0,...
		 'UsrSlotsActive', 0,...
		 'CPULoad', 0,...
		 'CPUTemp', 0);
	SYSTEMSTATS_OBJID=4058785550;
	SYSTEMSTATS_NUMBYTES=42;
	SystemStatsFidIdx = [];

	takeofflocationIdx = 0;
	TakeOffLocation=struct('timestamp', 0,...
		 'North', 0,...
		 'East', 0,...
		 'Down', 0,...
		 'Mode', 0,...
		 'Status', 0);
	TAKEOFFLOCATION_OBJID=3532848588;
	TAKEOFFLOCATION_NUMBYTES=14;
	TakeOffLocationFidIdx = [];

	taskinfoIdx = 0;
	TaskInfo=struct('timestamp', 0,...
		 'StackRemaining', zeros(25,1),...
		 'Running', zeros(25,1),...
		 'RunningTime', zeros(25,1));
	TASKINFO_OBJID=23642214;
	TASKINFO_NUMBYTES=100;
	TaskInfoFidIdx = [];

	txpidsettingsIdx = 0;
	TxPIDSettings=struct('timestamp', 0,...
		 'ThrottleRange', zeros(2,1),...
		 'MinPID', zeros(3,1),...
		 'MaxPID', zeros(3,1),...
		 'EasyTunePitchRollRateFactors', zeros(2,1),...
		 'EasyTuneYawRateFactors', zeros(3,1),...
		 'UpdateMode', 0,...
		 'BankNumber', 0,...
		 'Inputs', zeros(3,1),...
		 'PIDs', zeros(3,1),...
		 'EasyTuneRatePIDRecalculateYaw', 0);
	TXPIDSETTINGS_OBJID=4063893960;
	TXPIDSETTINGS_NUMBYTES=61;
	TxPIDSettingsFidIdx = [];

	txpidstatusIdx = 0;
	TxPIDStatus=struct('timestamp', 0,...
		 'CurPID', zeros(3,1));
	TXPIDSTATUS_OBJID=418242384;
	TXPIDSTATUS_NUMBYTES=12;
	TxPIDStatusFidIdx = [];

	velocitydesiredIdx = 0;
	VelocityDesired=struct('timestamp', 0,...
		 'North', 0,...
		 'East', 0,...
		 'Down', 0);
	VELOCITYDESIRED_OBJID=2660526482;
	VELOCITYDESIRED_NUMBYTES=12;
	VelocityDesiredFidIdx = [];

	velocitystateIdx = 0;
	VelocityState=struct('timestamp', 0,...
		 'North', 0,...
		 'East', 0,...
		 'Down', 0);
	VELOCITYSTATE_OBJID=3259197548;
	VELOCITYSTATE_NUMBYTES=12;
	VelocityStateFidIdx = [];

	vtolpathfollowersettingsIdx = 0;
	VtolPathFollowerSettings=struct('timestamp', 0,...
		 'HorizontalVelMax', 0,...
		 'VerticalVelMax', 0,...
		 'CourseFeedForward', 0,...
		 'HorizontalPosP', 0,...
		 'VerticalPosP', 0,...
		 'HorizontalVelPID', zeros(4,1),...
		 'VerticalVelPID', zeros(4,1),...
		 'ThrustLimits', zeros(3,1),...
		 'VelocityFeedforward', 0,...
		 'FlyawayEmergencyFallbackTriggerTime', 0,...
		 'EmergencyFallbackAttitude', zeros(2,1),...
		 'EmergencyFallbackYawRate', zeros(2,1),...
		 'MaxRollPitch', 0,...
		 'BrakeRate', 0,...
		 'BrakeMaxPitch', 0,...
		 'BrakeHorizontalVelPID', zeros(4,1),...
		 'BrakeVelocityFeedforward', 0,...
		 'LandVerticalVelPID', zeros(4,1),...
		 'AutoTakeoffVerticalVelPID', zeros(4,1),...
		 'VelocityRoamMaxRollPitch', 0,...
		 'VelocityRoamHorizontalVelPID', zeros(4,1),...
		 'UpdatePeriod', 0,...
		 'TreatCustomCraftAs', 0,...
		 'ThrustControl', 0,...
		 'YawControl', 0,...
		 'FlyawayEmergencyFallback', 0);
	VTOLPATHFOLLOWERSETTINGS_OBJID=1236315834;
	VTOLPATHFOLLOWERSETTINGS_NUMBYTES=178;
	VtolPathFollowerSettingsFidIdx = [];

	vtolselftuningstatsIdx = 0;
	VtolSelfTuningStats=struct('timestamp', 0,...
		 'NeutralThrustOffset', 0,...
		 'NeutralThrustCorrection', 0,...
		 'NeutralThrustAccumulator', 0,...
		 'NeutralThrustRange', 0);
	VTOLSELFTUNINGSTATS_OBJID=453712692;
	VTOLSELFTUNINGSTATS_NUMBYTES=16;
	VtolSelfTuningStatsFidIdx = [];

	watchdogstatusIdx = 0;
	WatchdogStatus=struct('timestamp', 0,...
		 'BootupFlags', 0,...
		 'ActiveFlags', 0);
	WATCHDOGSTATUS_OBJID=2718431868;
	WATCHDOGSTATUS_NUMBYTES=4;
	WatchdogStatusFidIdx = [];

	waypointIdx = 0;
	Waypoint=struct('timestamp', 0,...
		 'instanceID', 0,...
		 'Position', zeros(3,1),...
		 'Velocity', 0,...
		 'Action', 0);
	WAYPOINT_OBJID=3526906588;
	WAYPOINT_NUMBYTES=17;
	WaypointFidIdx = [];

	waypointactiveIdx = 0;
	WaypointActive=struct('timestamp', 0,...
		 'Index', 0);
	WAYPOINTACTIVE_OBJID=514175388;
	WAYPOINTACTIVE_NUMBYTES=2;
	WaypointActiveFidIdx = [];



fid = fopen(logfile);
buffer=fread(fid,Inf,'uchar=>uint8');
fseek(fid, 0, 'bof');
bufferlen = size(buffer);

correctMsgByte=hex2dec('20');
correctTimestampedByte=hex2dec('A0');
correctSyncByte=hex2dec('3C');
unknownObjIDList=zeros(1,2);
headerLen = 1 + 1 + 2 + 4 + 2; % sync type len id inst
timestampLen = 4;
crcLen = 1;
oplHeaderLen = 8 + 4;

last_print = -1e10;

bufferIdx=1;
headerIdx=oplHeaderLen + 1;

startTime=clock;

while (1)
	try
	%% Read message header
	% get sync field (0x3C, 1 byte)
	if (bufferlen < headerIdx + 12); break; end
	sync = buffer(headerIdx);
	% printf('%x ', sync);
	headerIdx = headerIdx + 1;
	if sync ~= correctSyncByte
		wrongSyncByte = wrongSyncByte + 1;
		continue
	end

	% printf('\n %u:',headerIdx - 1);
	% get the opl timestamp and datablock size
	oplTimestamp = typecast(uint8(buffer(headerIdx - 1 - 8 - 4:headerIdx - 1 - 8 - 1)), 'uint32'); 
	oplSize = typecast(uint8(buffer(headerIdx - 1 - 8:headerIdx - 1 - 1)), 'uint64'); 

	% get msg type (quint8 1 byte ) should be 0x20/0xA0, ignore the rest
	msgType = buffer(headerIdx);
	headerIdx = headerIdx + 1;
	if msgType ~= correctMsgByte && msgType ~= correctTimestampedByte
		% fixme: it should read the whole message payload instead of skipping and blindly searching for next sync byte.
		fprintf('\nSkipping message type: %x \n', msgType);
		continue
	end

	% get msg size (quint16 2 bytes) excludes crc, include msg header and data payload
	msgSize = uint32(typecast(buffer(headerIdx:headerIdx + 1), 'uint16'));
	headerIdx = headerIdx + 2;

	% get obj id (quint32 4 bytes)
	objID = typecast(uint8(buffer(headerIdx:headerIdx + 3)), 'uint32'); 
	headerIdx = headerIdx + 4;

	% get instance id (quint16 2 bytes)
	instID = typecast(uint8(buffer(headerIdx:headerIdx + 1)),  'uint16');
	% printf('Id %x type %x size %u Inst %x ', objID, msgType, msgSize, instID);
	headerIdx = headerIdx + 2;

	% get timestamp if needed (quint32 4 bytes)
	if msgType == correctMsgByte
		datasize = msgSize - headerLen;
	elseif msgType == correctTimestampedByte
		timestamp = typecast(uint8(buffer(headerIdx:headerIdx + 3)),  'uint32');
	%	printf('ts %u');
		headerIdx = headerIdx + 4;
		datasize = msgSize - headerLen - timestampLen;
	end
	% printf('\n');
	bufferIdx = headerIdx;
	headerIdx = headerIdx + datasize + crcLen + oplHeaderLen;

	%% Read object

	switch objID
		case ACCELGYROSETTINGS_OBJID
			accelgyrosettingsIdx = accelgyrosettingsIdx + 1;
			AccelGyroSettingsFidIdx(accelgyrosettingsIdx) = bufferIdx; %#ok<*AGROW>
			bufferIdx=bufferIdx + ACCELGYROSETTINGS_NUMBYTES+1; %+1 is for CRC
			if accelgyrosettingsIdx >= length(AccelGyroSettingsFidIdx) %Check to see if pre-allocated memory is exhausted
				AccelGyroSettingsFidIdx(accelgyrosettingsIdx*2) = 0;
			end
		case ACCELSENSOR_OBJID
			accelsensorIdx = accelsensorIdx + 1;
			AccelSensorFidIdx(accelsensorIdx) = bufferIdx; %#ok<*AGROW>
			bufferIdx=bufferIdx + ACCELSENSOR_NUMBYTES+1; %+1 is for CRC
			if accelsensorIdx >= length(AccelSensorFidIdx) %Check to see if pre-allocated memory is exhausted
				AccelSensorFidIdx(accelsensorIdx*2) = 0;
			end
		case ACCELSTATE_OBJID
			accelstateIdx = accelstateIdx + 1;
			AccelStateFidIdx(accelstateIdx) = bufferIdx; %#ok<*AGROW>
			bufferIdx=bufferIdx + ACCELSTATE_NUMBYTES+1; %+1 is for CRC
			if accelstateIdx >= length(AccelStateFidIdx) %Check to see if pre-allocated memory is exhausted
				AccelStateFidIdx(accelstateIdx*2) = 0;
			end
		case ACCESSORYDESIRED_OBJID
			accessorydesiredIdx = accessorydesiredIdx + 1;
			AccessoryDesiredFidIdx(accessorydesiredIdx) = bufferIdx; %#ok<*AGROW>
			bufferIdx=bufferIdx + ACCESSORYDESIRED_NUMBYTES+1; %+1 is for CRC
			if accessorydesiredIdx >= length(AccessoryDesiredFidIdx) %Check to see if pre-allocated memory is exhausted
				AccessoryDesiredFidIdx(accessorydesiredIdx*2) = 0;
			end
		case ACTUATORCOMMAND_OBJID
			actuatorcommandIdx = actuatorcommandIdx + 1;
			ActuatorCommandFidIdx(actuatorcommandIdx) = bufferIdx; %#ok<*AGROW>
			bufferIdx=bufferIdx + ACTUATORCOMMAND_NUMBYTES+1; %+1 is for CRC
			if actuatorcommandIdx >= length(ActuatorCommandFidIdx) %Check to see if pre-allocated memory is exhausted
				ActuatorCommandFidIdx(actuatorcommandIdx*2) = 0;
			end
		case ACTUATORDESIRED_OBJID
			actuatordesiredIdx = actuatordesiredIdx + 1;
			ActuatorDesiredFidIdx(actuatordesiredIdx) = bufferIdx; %#ok<*AGROW>
			bufferIdx=bufferIdx + ACTUATORDESIRED_NUMBYTES+1; %+1 is for CRC
			if actuatordesiredIdx >= length(ActuatorDesiredFidIdx) %Check to see if pre-allocated memory is exhausted
				ActuatorDesiredFidIdx(actuatordesiredIdx*2) = 0;
			end
		case ACTUATORSETTINGS_OBJID
			actuatorsettingsIdx = actuatorsettingsIdx + 1;
			ActuatorSettingsFidIdx(actuatorsettingsIdx) = bufferIdx; %#ok<*AGROW>
			bufferIdx=bufferIdx + ACTUATORSETTINGS_NUMBYTES+1; %+1 is for CRC
			if actuatorsettingsIdx >= length(ActuatorSettingsFidIdx) %Check to see if pre-allocated memory is exhausted
				ActuatorSettingsFidIdx(actuatorsettingsIdx*2) = 0;
			end
		case AIRSPEEDSENSOR_OBJID
			airspeedsensorIdx = airspeedsensorIdx + 1;
			AirspeedSensorFidIdx(airspeedsensorIdx) = bufferIdx; %#ok<*AGROW>
			bufferIdx=bufferIdx + AIRSPEEDSENSOR_NUMBYTES+1; %+1 is for CRC
			if airspeedsensorIdx >= length(AirspeedSensorFidIdx) %Check to see if pre-allocated memory is exhausted
				AirspeedSensorFidIdx(airspeedsensorIdx*2) = 0;
			end
		case AIRSPEEDSETTINGS_OBJID
			airspeedsettingsIdx = airspeedsettingsIdx + 1;
			AirspeedSettingsFidIdx(airspeedsettingsIdx) = bufferIdx; %#ok<*AGROW>
			bufferIdx=bufferIdx + AIRSPEEDSETTINGS_NUMBYTES+1; %+1 is for CRC
			if airspeedsettingsIdx >= length(AirspeedSettingsFidIdx) %Check to see if pre-allocated memory is exhausted
				AirspeedSettingsFidIdx(airspeedsettingsIdx*2) = 0;
			end
		case AIRSPEEDSTATE_OBJID
			airspeedstateIdx = airspeedstateIdx + 1;
			AirspeedStateFidIdx(airspeedstateIdx) = bufferIdx; %#ok<*AGROW>
			bufferIdx=bufferIdx + AIRSPEEDSTATE_NUMBYTES+1; %+1 is for CRC
			if airspeedstateIdx >= length(AirspeedStateFidIdx) %Check to see if pre-allocated memory is exhausted
				AirspeedStateFidIdx(airspeedstateIdx*2) = 0;
			end
		case ALTITUDEFILTERSETTINGS_OBJID
			altitudefiltersettingsIdx = altitudefiltersettingsIdx + 1;
			AltitudeFilterSettingsFidIdx(altitudefiltersettingsIdx) = bufferIdx; %#ok<*AGROW>
			bufferIdx=bufferIdx + ALTITUDEFILTERSETTINGS_NUMBYTES+1; %+1 is for CRC
			if altitudefiltersettingsIdx >= length(AltitudeFilterSettingsFidIdx) %Check to see if pre-allocated memory is exhausted
				AltitudeFilterSettingsFidIdx(altitudefiltersettingsIdx*2) = 0;
			end
		case ALTITUDEHOLDSETTINGS_OBJID
			altitudeholdsettingsIdx = altitudeholdsettingsIdx + 1;
			AltitudeHoldSettingsFidIdx(altitudeholdsettingsIdx) = bufferIdx; %#ok<*AGROW>
			bufferIdx=bufferIdx + ALTITUDEHOLDSETTINGS_NUMBYTES+1; %+1 is for CRC
			if altitudeholdsettingsIdx >= length(AltitudeHoldSettingsFidIdx) %Check to see if pre-allocated memory is exhausted
				AltitudeHoldSettingsFidIdx(altitudeholdsettingsIdx*2) = 0;
			end
		case ALTITUDEHOLDSTATUS_OBJID
			altitudeholdstatusIdx = altitudeholdstatusIdx + 1;
			AltitudeHoldStatusFidIdx(altitudeholdstatusIdx) = bufferIdx; %#ok<*AGROW>
			bufferIdx=bufferIdx + ALTITUDEHOLDSTATUS_NUMBYTES+1; %+1 is for CRC
			if altitudeholdstatusIdx >= length(AltitudeHoldStatusFidIdx) %Check to see if pre-allocated memory is exhausted
				AltitudeHoldStatusFidIdx(altitudeholdstatusIdx*2) = 0;
			end
		case ATTITUDESETTINGS_OBJID
			attitudesettingsIdx = attitudesettingsIdx + 1;
			AttitudeSettingsFidIdx(attitudesettingsIdx) = bufferIdx; %#ok<*AGROW>
			bufferIdx=bufferIdx + ATTITUDESETTINGS_NUMBYTES+1; %+1 is for CRC
			if attitudesettingsIdx >= length(AttitudeSettingsFidIdx) %Check to see if pre-allocated memory is exhausted
				AttitudeSettingsFidIdx(attitudesettingsIdx*2) = 0;
			end
		case ATTITUDESIMULATED_OBJID
			attitudesimulatedIdx = attitudesimulatedIdx + 1;
			AttitudeSimulatedFidIdx(attitudesimulatedIdx) = bufferIdx; %#ok<*AGROW>
			bufferIdx=bufferIdx + ATTITUDESIMULATED_NUMBYTES+1; %+1 is for CRC
			if attitudesimulatedIdx >= length(AttitudeSimulatedFidIdx) %Check to see if pre-allocated memory is exhausted
				AttitudeSimulatedFidIdx(attitudesimulatedIdx*2) = 0;
			end
		case ATTITUDESTATE_OBJID
			attitudestateIdx = attitudestateIdx + 1;
			AttitudeStateFidIdx(attitudestateIdx) = bufferIdx; %#ok<*AGROW>
			bufferIdx=bufferIdx + ATTITUDESTATE_NUMBYTES+1; %+1 is for CRC
			if attitudestateIdx >= length(AttitudeStateFidIdx) %Check to see if pre-allocated memory is exhausted
				AttitudeStateFidIdx(attitudestateIdx*2) = 0;
			end
		case AUXMAGSENSOR_OBJID
			auxmagsensorIdx = auxmagsensorIdx + 1;
			AuxMagSensorFidIdx(auxmagsensorIdx) = bufferIdx; %#ok<*AGROW>
			bufferIdx=bufferIdx + AUXMAGSENSOR_NUMBYTES+1; %+1 is for CRC
			if auxmagsensorIdx >= length(AuxMagSensorFidIdx) %Check to see if pre-allocated memory is exhausted
				AuxMagSensorFidIdx(auxmagsensorIdx*2) = 0;
			end
		case AUXMAGSETTINGS_OBJID
			auxmagsettingsIdx = auxmagsettingsIdx + 1;
			AuxMagSettingsFidIdx(auxmagsettingsIdx) = bufferIdx; %#ok<*AGROW>
			bufferIdx=bufferIdx + AUXMAGSETTINGS_NUMBYTES+1; %+1 is for CRC
			if auxmagsettingsIdx >= length(AuxMagSettingsFidIdx) %Check to see if pre-allocated memory is exhausted
				AuxMagSettingsFidIdx(auxmagsettingsIdx*2) = 0;
			end
		case BAROSENSOR_OBJID
			barosensorIdx = barosensorIdx + 1;
			BaroSensorFidIdx(barosensorIdx) = bufferIdx; %#ok<*AGROW>
			bufferIdx=bufferIdx + BAROSENSOR_NUMBYTES+1; %+1 is for CRC
			if barosensorIdx >= length(BaroSensorFidIdx) %Check to see if pre-allocated memory is exhausted
				BaroSensorFidIdx(barosensorIdx*2) = 0;
			end
		case CALLBACKINFO_OBJID
			callbackinfoIdx = callbackinfoIdx + 1;
			CallbackInfoFidIdx(callbackinfoIdx) = bufferIdx; %#ok<*AGROW>
			bufferIdx=bufferIdx + CALLBACKINFO_NUMBYTES+1; %+1 is for CRC
			if callbackinfoIdx >= length(CallbackInfoFidIdx) %Check to see if pre-allocated memory is exhausted
				CallbackInfoFidIdx(callbackinfoIdx*2) = 0;
			end
		case CAMERACONTROLACTIVITY_OBJID
			cameracontrolactivityIdx = cameracontrolactivityIdx + 1;
			CameraControlActivityFidIdx(cameracontrolactivityIdx) = bufferIdx; %#ok<*AGROW>
			bufferIdx=bufferIdx + CAMERACONTROLACTIVITY_NUMBYTES+1; %+1 is for CRC
			if cameracontrolactivityIdx >= length(CameraControlActivityFidIdx) %Check to see if pre-allocated memory is exhausted
				CameraControlActivityFidIdx(cameracontrolactivityIdx*2) = 0;
			end
		case CAMERACONTROLSETTINGS_OBJID
			cameracontrolsettingsIdx = cameracontrolsettingsIdx + 1;
			CameraControlSettingsFidIdx(cameracontrolsettingsIdx) = bufferIdx; %#ok<*AGROW>
			bufferIdx=bufferIdx + CAMERACONTROLSETTINGS_NUMBYTES+1; %+1 is for CRC
			if cameracontrolsettingsIdx >= length(CameraControlSettingsFidIdx) %Check to see if pre-allocated memory is exhausted
				CameraControlSettingsFidIdx(cameracontrolsettingsIdx*2) = 0;
			end
		case CAMERADESIRED_OBJID
			cameradesiredIdx = cameradesiredIdx + 1;
			CameraDesiredFidIdx(cameradesiredIdx) = bufferIdx; %#ok<*AGROW>
			bufferIdx=bufferIdx + CAMERADESIRED_NUMBYTES+1; %+1 is for CRC
			if cameradesiredIdx >= length(CameraDesiredFidIdx) %Check to see if pre-allocated memory is exhausted
				CameraDesiredFidIdx(cameradesiredIdx*2) = 0;
			end
		case CAMERASTABSETTINGS_OBJID
			camerastabsettingsIdx = camerastabsettingsIdx + 1;
			CameraStabSettingsFidIdx(camerastabsettingsIdx) = bufferIdx; %#ok<*AGROW>
			bufferIdx=bufferIdx + CAMERASTABSETTINGS_NUMBYTES+1; %+1 is for CRC
			if camerastabsettingsIdx >= length(CameraStabSettingsFidIdx) %Check to see if pre-allocated memory is exhausted
				CameraStabSettingsFidIdx(camerastabsettingsIdx*2) = 0;
			end
		case DEBUGLOGCONTROL_OBJID
			debuglogcontrolIdx = debuglogcontrolIdx + 1;
			DebugLogControlFidIdx(debuglogcontrolIdx) = bufferIdx; %#ok<*AGROW>
			bufferIdx=bufferIdx + DEBUGLOGCONTROL_NUMBYTES+1; %+1 is for CRC
			if debuglogcontrolIdx >= length(DebugLogControlFidIdx) %Check to see if pre-allocated memory is exhausted
				DebugLogControlFidIdx(debuglogcontrolIdx*2) = 0;
			end
		case DEBUGLOGENTRY_OBJID
			debuglogentryIdx = debuglogentryIdx + 1;
			DebugLogEntryFidIdx(debuglogentryIdx) = bufferIdx; %#ok<*AGROW>
			bufferIdx=bufferIdx + DEBUGLOGENTRY_NUMBYTES+1; %+1 is for CRC
			if debuglogentryIdx >= length(DebugLogEntryFidIdx) %Check to see if pre-allocated memory is exhausted
				DebugLogEntryFidIdx(debuglogentryIdx*2) = 0;
			end
		case DEBUGLOGSETTINGS_OBJID
			debuglogsettingsIdx = debuglogsettingsIdx + 1;
			DebugLogSettingsFidIdx(debuglogsettingsIdx) = bufferIdx; %#ok<*AGROW>
			bufferIdx=bufferIdx + DEBUGLOGSETTINGS_NUMBYTES+1; %+1 is for CRC
			if debuglogsettingsIdx >= length(DebugLogSettingsFidIdx) %Check to see if pre-allocated memory is exhausted
				DebugLogSettingsFidIdx(debuglogsettingsIdx*2) = 0;
			end
		case DEBUGLOGSTATUS_OBJID
			debuglogstatusIdx = debuglogstatusIdx + 1;
			DebugLogStatusFidIdx(debuglogstatusIdx) = bufferIdx; %#ok<*AGROW>
			bufferIdx=bufferIdx + DEBUGLOGSTATUS_NUMBYTES+1; %+1 is for CRC
			if debuglogstatusIdx >= length(DebugLogStatusFidIdx) %Check to see if pre-allocated memory is exhausted
				DebugLogStatusFidIdx(debuglogstatusIdx*2) = 0;
			end
		case EKFCONFIGURATION_OBJID
			ekfconfigurationIdx = ekfconfigurationIdx + 1;
			EKFConfigurationFidIdx(ekfconfigurationIdx) = bufferIdx; %#ok<*AGROW>
			bufferIdx=bufferIdx + EKFCONFIGURATION_NUMBYTES+1; %+1 is for CRC
			if ekfconfigurationIdx >= length(EKFConfigurationFidIdx) %Check to see if pre-allocated memory is exhausted
				EKFConfigurationFidIdx(ekfconfigurationIdx*2) = 0;
			end
		case EKFSTATEVARIANCE_OBJID
			ekfstatevarianceIdx = ekfstatevarianceIdx + 1;
			EKFStateVarianceFidIdx(ekfstatevarianceIdx) = bufferIdx; %#ok<*AGROW>
			bufferIdx=bufferIdx + EKFSTATEVARIANCE_NUMBYTES+1; %+1 is for CRC
			if ekfstatevarianceIdx >= length(EKFStateVarianceFidIdx) %Check to see if pre-allocated memory is exhausted
				EKFStateVarianceFidIdx(ekfstatevarianceIdx*2) = 0;
			end
		case FAULTSETTINGS_OBJID
			faultsettingsIdx = faultsettingsIdx + 1;
			FaultSettingsFidIdx(faultsettingsIdx) = bufferIdx; %#ok<*AGROW>
			bufferIdx=bufferIdx + FAULTSETTINGS_NUMBYTES+1; %+1 is for CRC
			if faultsettingsIdx >= length(FaultSettingsFidIdx) %Check to see if pre-allocated memory is exhausted
				FaultSettingsFidIdx(faultsettingsIdx*2) = 0;
			end
		case FIRMWAREIAPOBJ_OBJID
			firmwareiapobjIdx = firmwareiapobjIdx + 1;
			FirmwareIAPObjFidIdx(firmwareiapobjIdx) = bufferIdx; %#ok<*AGROW>
			bufferIdx=bufferIdx + FIRMWAREIAPOBJ_NUMBYTES+1; %+1 is for CRC
			if firmwareiapobjIdx >= length(FirmwareIAPObjFidIdx) %Check to see if pre-allocated memory is exhausted
				FirmwareIAPObjFidIdx(firmwareiapobjIdx*2) = 0;
			end
		case FIXEDWINGPATHFOLLOWERSETTINGS_OBJID
			fixedwingpathfollowersettingsIdx = fixedwingpathfollowersettingsIdx + 1;
			FixedWingPathFollowerSettingsFidIdx(fixedwingpathfollowersettingsIdx) = bufferIdx; %#ok<*AGROW>
			bufferIdx=bufferIdx + FIXEDWINGPATHFOLLOWERSETTINGS_NUMBYTES+1; %+1 is for CRC
			if fixedwingpathfollowersettingsIdx >= length(FixedWingPathFollowerSettingsFidIdx) %Check to see if pre-allocated memory is exhausted
				FixedWingPathFollowerSettingsFidIdx(fixedwingpathfollowersettingsIdx*2) = 0;
			end
		case FIXEDWINGPATHFOLLOWERSTATUS_OBJID
			fixedwingpathfollowerstatusIdx = fixedwingpathfollowerstatusIdx + 1;
			FixedWingPathFollowerStatusFidIdx(fixedwingpathfollowerstatusIdx) = bufferIdx; %#ok<*AGROW>
			bufferIdx=bufferIdx + FIXEDWINGPATHFOLLOWERSTATUS_NUMBYTES+1; %+1 is for CRC
			if fixedwingpathfollowerstatusIdx >= length(FixedWingPathFollowerStatusFidIdx) %Check to see if pre-allocated memory is exhausted
				FixedWingPathFollowerStatusFidIdx(fixedwingpathfollowerstatusIdx*2) = 0;
			end
		case FLIGHTBATTERYSETTINGS_OBJID
			flightbatterysettingsIdx = flightbatterysettingsIdx + 1;
			FlightBatterySettingsFidIdx(flightbatterysettingsIdx) = bufferIdx; %#ok<*AGROW>
			bufferIdx=bufferIdx + FLIGHTBATTERYSETTINGS_NUMBYTES+1; %+1 is for CRC
			if flightbatterysettingsIdx >= length(FlightBatterySettingsFidIdx) %Check to see if pre-allocated memory is exhausted
				FlightBatterySettingsFidIdx(flightbatterysettingsIdx*2) = 0;
			end
		case FLIGHTBATTERYSTATE_OBJID
			flightbatterystateIdx = flightbatterystateIdx + 1;
			FlightBatteryStateFidIdx(flightbatterystateIdx) = bufferIdx; %#ok<*AGROW>
			bufferIdx=bufferIdx + FLIGHTBATTERYSTATE_NUMBYTES+1; %+1 is for CRC
			if flightbatterystateIdx >= length(FlightBatteryStateFidIdx) %Check to see if pre-allocated memory is exhausted
				FlightBatteryStateFidIdx(flightbatterystateIdx*2) = 0;
			end
		case FLIGHTMODESETTINGS_OBJID
			flightmodesettingsIdx = flightmodesettingsIdx + 1;
			FlightModeSettingsFidIdx(flightmodesettingsIdx) = bufferIdx; %#ok<*AGROW>
			bufferIdx=bufferIdx + FLIGHTMODESETTINGS_NUMBYTES+1; %+1 is for CRC
			if flightmodesettingsIdx >= length(FlightModeSettingsFidIdx) %Check to see if pre-allocated memory is exhausted
				FlightModeSettingsFidIdx(flightmodesettingsIdx*2) = 0;
			end
		case FLIGHTPLANCONTROL_OBJID
			flightplancontrolIdx = flightplancontrolIdx + 1;
			FlightPlanControlFidIdx(flightplancontrolIdx) = bufferIdx; %#ok<*AGROW>
			bufferIdx=bufferIdx + FLIGHTPLANCONTROL_NUMBYTES+1; %+1 is for CRC
			if flightplancontrolIdx >= length(FlightPlanControlFidIdx) %Check to see if pre-allocated memory is exhausted
				FlightPlanControlFidIdx(flightplancontrolIdx*2) = 0;
			end
		case FLIGHTPLANSETTINGS_OBJID
			flightplansettingsIdx = flightplansettingsIdx + 1;
			FlightPlanSettingsFidIdx(flightplansettingsIdx) = bufferIdx; %#ok<*AGROW>
			bufferIdx=bufferIdx + FLIGHTPLANSETTINGS_NUMBYTES+1; %+1 is for CRC
			if flightplansettingsIdx >= length(FlightPlanSettingsFidIdx) %Check to see if pre-allocated memory is exhausted
				FlightPlanSettingsFidIdx(flightplansettingsIdx*2) = 0;
			end
		case FLIGHTPLANSTATUS_OBJID
			flightplanstatusIdx = flightplanstatusIdx + 1;
			FlightPlanStatusFidIdx(flightplanstatusIdx) = bufferIdx; %#ok<*AGROW>
			bufferIdx=bufferIdx + FLIGHTPLANSTATUS_NUMBYTES+1; %+1 is for CRC
			if flightplanstatusIdx >= length(FlightPlanStatusFidIdx) %Check to see if pre-allocated memory is exhausted
				FlightPlanStatusFidIdx(flightplanstatusIdx*2) = 0;
			end
		case FLIGHTSTATUS_OBJID
			flightstatusIdx = flightstatusIdx + 1;
			FlightStatusFidIdx(flightstatusIdx) = bufferIdx; %#ok<*AGROW>
			bufferIdx=bufferIdx + FLIGHTSTATUS_NUMBYTES+1; %+1 is for CRC
			if flightstatusIdx >= length(FlightStatusFidIdx) %Check to see if pre-allocated memory is exhausted
				FlightStatusFidIdx(flightstatusIdx*2) = 0;
			end
		case FLIGHTTELEMETRYSTATS_OBJID
			flighttelemetrystatsIdx = flighttelemetrystatsIdx + 1;
			FlightTelemetryStatsFidIdx(flighttelemetrystatsIdx) = bufferIdx; %#ok<*AGROW>
			bufferIdx=bufferIdx + FLIGHTTELEMETRYSTATS_NUMBYTES+1; %+1 is for CRC
			if flighttelemetrystatsIdx >= length(FlightTelemetryStatsFidIdx) %Check to see if pre-allocated memory is exhausted
				FlightTelemetryStatsFidIdx(flighttelemetrystatsIdx*2) = 0;
			end
		case GCSRECEIVER_OBJID
			gcsreceiverIdx = gcsreceiverIdx + 1;
			GCSReceiverFidIdx(gcsreceiverIdx) = bufferIdx; %#ok<*AGROW>
			bufferIdx=bufferIdx + GCSRECEIVER_NUMBYTES+1; %+1 is for CRC
			if gcsreceiverIdx >= length(GCSReceiverFidIdx) %Check to see if pre-allocated memory is exhausted
				GCSReceiverFidIdx(gcsreceiverIdx*2) = 0;
			end
		case GCSTELEMETRYSTATS_OBJID
			gcstelemetrystatsIdx = gcstelemetrystatsIdx + 1;
			GCSTelemetryStatsFidIdx(gcstelemetrystatsIdx) = bufferIdx; %#ok<*AGROW>
			bufferIdx=bufferIdx + GCSTELEMETRYSTATS_NUMBYTES+1; %+1 is for CRC
			if gcstelemetrystatsIdx >= length(GCSTelemetryStatsFidIdx) %Check to see if pre-allocated memory is exhausted
				GCSTelemetryStatsFidIdx(gcstelemetrystatsIdx*2) = 0;
			end
		case GPSEXTENDEDSTATUS_OBJID
			gpsextendedstatusIdx = gpsextendedstatusIdx + 1;
			GPSExtendedStatusFidIdx(gpsextendedstatusIdx) = bufferIdx; %#ok<*AGROW>
			bufferIdx=bufferIdx + GPSEXTENDEDSTATUS_NUMBYTES+1; %+1 is for CRC
			if gpsextendedstatusIdx >= length(GPSExtendedStatusFidIdx) %Check to see if pre-allocated memory is exhausted
				GPSExtendedStatusFidIdx(gpsextendedstatusIdx*2) = 0;
			end
		case GPSPOSITIONSENSOR_OBJID
			gpspositionsensorIdx = gpspositionsensorIdx + 1;
			GPSPositionSensorFidIdx(gpspositionsensorIdx) = bufferIdx; %#ok<*AGROW>
			bufferIdx=bufferIdx + GPSPOSITIONSENSOR_NUMBYTES+1; %+1 is for CRC
			if gpspositionsensorIdx >= length(GPSPositionSensorFidIdx) %Check to see if pre-allocated memory is exhausted
				GPSPositionSensorFidIdx(gpspositionsensorIdx*2) = 0;
			end
		case GPSSATELLITES_OBJID
			gpssatellitesIdx = gpssatellitesIdx + 1;
			GPSSatellitesFidIdx(gpssatellitesIdx) = bufferIdx; %#ok<*AGROW>
			bufferIdx=bufferIdx + GPSSATELLITES_NUMBYTES+1; %+1 is for CRC
			if gpssatellitesIdx >= length(GPSSatellitesFidIdx) %Check to see if pre-allocated memory is exhausted
				GPSSatellitesFidIdx(gpssatellitesIdx*2) = 0;
			end
		case GPSSETTINGS_OBJID
			gpssettingsIdx = gpssettingsIdx + 1;
			GPSSettingsFidIdx(gpssettingsIdx) = bufferIdx; %#ok<*AGROW>
			bufferIdx=bufferIdx + GPSSETTINGS_NUMBYTES+1; %+1 is for CRC
			if gpssettingsIdx >= length(GPSSettingsFidIdx) %Check to see if pre-allocated memory is exhausted
				GPSSettingsFidIdx(gpssettingsIdx*2) = 0;
			end
		case GPSTIME_OBJID
			gpstimeIdx = gpstimeIdx + 1;
			GPSTimeFidIdx(gpstimeIdx) = bufferIdx; %#ok<*AGROW>
			bufferIdx=bufferIdx + GPSTIME_NUMBYTES+1; %+1 is for CRC
			if gpstimeIdx >= length(GPSTimeFidIdx) %Check to see if pre-allocated memory is exhausted
				GPSTimeFidIdx(gpstimeIdx*2) = 0;
			end
		case GPSVELOCITYSENSOR_OBJID
			gpsvelocitysensorIdx = gpsvelocitysensorIdx + 1;
			GPSVelocitySensorFidIdx(gpsvelocitysensorIdx) = bufferIdx; %#ok<*AGROW>
			bufferIdx=bufferIdx + GPSVELOCITYSENSOR_NUMBYTES+1; %+1 is for CRC
			if gpsvelocitysensorIdx >= length(GPSVelocitySensorFidIdx) %Check to see if pre-allocated memory is exhausted
				GPSVelocitySensorFidIdx(gpsvelocitysensorIdx*2) = 0;
			end
		case GROUNDPATHFOLLOWERSETTINGS_OBJID
			groundpathfollowersettingsIdx = groundpathfollowersettingsIdx + 1;
			GroundPathFollowerSettingsFidIdx(groundpathfollowersettingsIdx) = bufferIdx; %#ok<*AGROW>
			bufferIdx=bufferIdx + GROUNDPATHFOLLOWERSETTINGS_NUMBYTES+1; %+1 is for CRC
			if groundpathfollowersettingsIdx >= length(GroundPathFollowerSettingsFidIdx) %Check to see if pre-allocated memory is exhausted
				GroundPathFollowerSettingsFidIdx(groundpathfollowersettingsIdx*2) = 0;
			end
		case GROUNDTRUTH_OBJID
			groundtruthIdx = groundtruthIdx + 1;
			GroundTruthFidIdx(groundtruthIdx) = bufferIdx; %#ok<*AGROW>
			bufferIdx=bufferIdx + GROUNDTRUTH_NUMBYTES+1; %+1 is for CRC
			if groundtruthIdx >= length(GroundTruthFidIdx) %Check to see if pre-allocated memory is exhausted
				GroundTruthFidIdx(groundtruthIdx*2) = 0;
			end
		case GYROSENSOR_OBJID
			gyrosensorIdx = gyrosensorIdx + 1;
			GyroSensorFidIdx(gyrosensorIdx) = bufferIdx; %#ok<*AGROW>
			bufferIdx=bufferIdx + GYROSENSOR_NUMBYTES+1; %+1 is for CRC
			if gyrosensorIdx >= length(GyroSensorFidIdx) %Check to see if pre-allocated memory is exhausted
				GyroSensorFidIdx(gyrosensorIdx*2) = 0;
			end
		case GYROSTATE_OBJID
			gyrostateIdx = gyrostateIdx + 1;
			GyroStateFidIdx(gyrostateIdx) = bufferIdx; %#ok<*AGROW>
			bufferIdx=bufferIdx + GYROSTATE_NUMBYTES+1; %+1 is for CRC
			if gyrostateIdx >= length(GyroStateFidIdx) %Check to see if pre-allocated memory is exhausted
				GyroStateFidIdx(gyrostateIdx*2) = 0;
			end
		case HOMELOCATION_OBJID
			homelocationIdx = homelocationIdx + 1;
			HomeLocationFidIdx(homelocationIdx) = bufferIdx; %#ok<*AGROW>
			bufferIdx=bufferIdx + HOMELOCATION_NUMBYTES+1; %+1 is for CRC
			if homelocationIdx >= length(HomeLocationFidIdx) %Check to see if pre-allocated memory is exhausted
				HomeLocationFidIdx(homelocationIdx*2) = 0;
			end
		case HWSETTINGS_OBJID
			hwsettingsIdx = hwsettingsIdx + 1;
			HwSettingsFidIdx(hwsettingsIdx) = bufferIdx; %#ok<*AGROW>
			bufferIdx=bufferIdx + HWSETTINGS_NUMBYTES+1; %+1 is for CRC
			if hwsettingsIdx >= length(HwSettingsFidIdx) %Check to see if pre-allocated memory is exhausted
				HwSettingsFidIdx(hwsettingsIdx*2) = 0;
			end
		case I2CSTATS_OBJID
			i2cstatsIdx = i2cstatsIdx + 1;
			I2CStatsFidIdx(i2cstatsIdx) = bufferIdx; %#ok<*AGROW>
			bufferIdx=bufferIdx + I2CSTATS_NUMBYTES+1; %+1 is for CRC
			if i2cstatsIdx >= length(I2CStatsFidIdx) %Check to see if pre-allocated memory is exhausted
				I2CStatsFidIdx(i2cstatsIdx*2) = 0;
			end
		case MAGSENSOR_OBJID
			magsensorIdx = magsensorIdx + 1;
			MagSensorFidIdx(magsensorIdx) = bufferIdx; %#ok<*AGROW>
			bufferIdx=bufferIdx + MAGSENSOR_NUMBYTES+1; %+1 is for CRC
			if magsensorIdx >= length(MagSensorFidIdx) %Check to see if pre-allocated memory is exhausted
				MagSensorFidIdx(magsensorIdx*2) = 0;
			end
		case MAGSTATE_OBJID
			magstateIdx = magstateIdx + 1;
			MagStateFidIdx(magstateIdx) = bufferIdx; %#ok<*AGROW>
			bufferIdx=bufferIdx + MAGSTATE_NUMBYTES+1; %+1 is for CRC
			if magstateIdx >= length(MagStateFidIdx) %Check to see if pre-allocated memory is exhausted
				MagStateFidIdx(magstateIdx*2) = 0;
			end
		case MANUALCONTROLCOMMAND_OBJID
			manualcontrolcommandIdx = manualcontrolcommandIdx + 1;
			ManualControlCommandFidIdx(manualcontrolcommandIdx) = bufferIdx; %#ok<*AGROW>
			bufferIdx=bufferIdx + MANUALCONTROLCOMMAND_NUMBYTES+1; %+1 is for CRC
			if manualcontrolcommandIdx >= length(ManualControlCommandFidIdx) %Check to see if pre-allocated memory is exhausted
				ManualControlCommandFidIdx(manualcontrolcommandIdx*2) = 0;
			end
		case MANUALCONTROLSETTINGS_OBJID
			manualcontrolsettingsIdx = manualcontrolsettingsIdx + 1;
			ManualControlSettingsFidIdx(manualcontrolsettingsIdx) = bufferIdx; %#ok<*AGROW>
			bufferIdx=bufferIdx + MANUALCONTROLSETTINGS_NUMBYTES+1; %+1 is for CRC
			if manualcontrolsettingsIdx >= length(ManualControlSettingsFidIdx) %Check to see if pre-allocated memory is exhausted
				ManualControlSettingsFidIdx(manualcontrolsettingsIdx*2) = 0;
			end
		case MIXERSETTINGS_OBJID
			mixersettingsIdx = mixersettingsIdx + 1;
			MixerSettingsFidIdx(mixersettingsIdx) = bufferIdx; %#ok<*AGROW>
			bufferIdx=bufferIdx + MIXERSETTINGS_NUMBYTES+1; %+1 is for CRC
			if mixersettingsIdx >= length(MixerSettingsFidIdx) %Check to see if pre-allocated memory is exhausted
				MixerSettingsFidIdx(mixersettingsIdx*2) = 0;
			end
		case MIXERSTATUS_OBJID
			mixerstatusIdx = mixerstatusIdx + 1;
			MixerStatusFidIdx(mixerstatusIdx) = bufferIdx; %#ok<*AGROW>
			bufferIdx=bufferIdx + MIXERSTATUS_NUMBYTES+1; %+1 is for CRC
			if mixerstatusIdx >= length(MixerStatusFidIdx) %Check to see if pre-allocated memory is exhausted
				MixerStatusFidIdx(mixerstatusIdx*2) = 0;
			end
		case MPUGYROACCELSETTINGS_OBJID
			mpugyroaccelsettingsIdx = mpugyroaccelsettingsIdx + 1;
			MPUGyroAccelSettingsFidIdx(mpugyroaccelsettingsIdx) = bufferIdx; %#ok<*AGROW>
			bufferIdx=bufferIdx + MPUGYROACCELSETTINGS_NUMBYTES+1; %+1 is for CRC
			if mpugyroaccelsettingsIdx >= length(MPUGyroAccelSettingsFidIdx) %Check to see if pre-allocated memory is exhausted
				MPUGyroAccelSettingsFidIdx(mpugyroaccelsettingsIdx*2) = 0;
			end
		case NEDACCEL_OBJID
			nedaccelIdx = nedaccelIdx + 1;
			NedAccelFidIdx(nedaccelIdx) = bufferIdx; %#ok<*AGROW>
			bufferIdx=bufferIdx + NEDACCEL_NUMBYTES+1; %+1 is for CRC
			if nedaccelIdx >= length(NedAccelFidIdx) %Check to see if pre-allocated memory is exhausted
				NedAccelFidIdx(nedaccelIdx*2) = 0;
			end
		case OBJECTPERSISTENCE_OBJID
			objectpersistenceIdx = objectpersistenceIdx + 1;
			ObjectPersistenceFidIdx(objectpersistenceIdx) = bufferIdx; %#ok<*AGROW>
			bufferIdx=bufferIdx + OBJECTPERSISTENCE_NUMBYTES+1; %+1 is for CRC
			if objectpersistenceIdx >= length(ObjectPersistenceFidIdx) %Check to see if pre-allocated memory is exhausted
				ObjectPersistenceFidIdx(objectpersistenceIdx*2) = 0;
			end
		case OPLINKRECEIVER_OBJID
			oplinkreceiverIdx = oplinkreceiverIdx + 1;
			OPLinkReceiverFidIdx(oplinkreceiverIdx) = bufferIdx; %#ok<*AGROW>
			bufferIdx=bufferIdx + OPLINKRECEIVER_NUMBYTES+1; %+1 is for CRC
			if oplinkreceiverIdx >= length(OPLinkReceiverFidIdx) %Check to see if pre-allocated memory is exhausted
				OPLinkReceiverFidIdx(oplinkreceiverIdx*2) = 0;
			end
		case OPLINKSETTINGS_OBJID
			oplinksettingsIdx = oplinksettingsIdx + 1;
			OPLinkSettingsFidIdx(oplinksettingsIdx) = bufferIdx; %#ok<*AGROW>
			bufferIdx=bufferIdx + OPLINKSETTINGS_NUMBYTES+1; %+1 is for CRC
			if oplinksettingsIdx >= length(OPLinkSettingsFidIdx) %Check to see if pre-allocated memory is exhausted
				OPLinkSettingsFidIdx(oplinksettingsIdx*2) = 0;
			end
		case OPLINKSTATUS_OBJID
			oplinkstatusIdx = oplinkstatusIdx + 1;
			OPLinkStatusFidIdx(oplinkstatusIdx) = bufferIdx; %#ok<*AGROW>
			bufferIdx=bufferIdx + OPLINKSTATUS_NUMBYTES+1; %+1 is for CRC
			if oplinkstatusIdx >= length(OPLinkStatusFidIdx) %Check to see if pre-allocated memory is exhausted
				OPLinkStatusFidIdx(oplinkstatusIdx*2) = 0;
			end
		case OSDSETTINGS_OBJID
			osdsettingsIdx = osdsettingsIdx + 1;
			OsdSettingsFidIdx(osdsettingsIdx) = bufferIdx; %#ok<*AGROW>
			bufferIdx=bufferIdx + OSDSETTINGS_NUMBYTES+1; %+1 is for CRC
			if osdsettingsIdx >= length(OsdSettingsFidIdx) %Check to see if pre-allocated memory is exhausted
				OsdSettingsFidIdx(osdsettingsIdx*2) = 0;
			end
		case OVEROSYNCSETTINGS_OBJID
			overosyncsettingsIdx = overosyncsettingsIdx + 1;
			OveroSyncSettingsFidIdx(overosyncsettingsIdx) = bufferIdx; %#ok<*AGROW>
			bufferIdx=bufferIdx + OVEROSYNCSETTINGS_NUMBYTES+1; %+1 is for CRC
			if overosyncsettingsIdx >= length(OveroSyncSettingsFidIdx) %Check to see if pre-allocated memory is exhausted
				OveroSyncSettingsFidIdx(overosyncsettingsIdx*2) = 0;
			end
		case OVEROSYNCSTATS_OBJID
			overosyncstatsIdx = overosyncstatsIdx + 1;
			OveroSyncStatsFidIdx(overosyncstatsIdx) = bufferIdx; %#ok<*AGROW>
			bufferIdx=bufferIdx + OVEROSYNCSTATS_NUMBYTES+1; %+1 is for CRC
			if overosyncstatsIdx >= length(OveroSyncStatsFidIdx) %Check to see if pre-allocated memory is exhausted
				OveroSyncStatsFidIdx(overosyncstatsIdx*2) = 0;
			end
		case PATHACTION_OBJID
			pathactionIdx = pathactionIdx + 1;
			PathActionFidIdx(pathactionIdx) = bufferIdx; %#ok<*AGROW>
			bufferIdx=bufferIdx + PATHACTION_NUMBYTES+1; %+1 is for CRC
			if pathactionIdx >= length(PathActionFidIdx) %Check to see if pre-allocated memory is exhausted
				PathActionFidIdx(pathactionIdx*2) = 0;
			end
		case PATHDESIRED_OBJID
			pathdesiredIdx = pathdesiredIdx + 1;
			PathDesiredFidIdx(pathdesiredIdx) = bufferIdx; %#ok<*AGROW>
			bufferIdx=bufferIdx + PATHDESIRED_NUMBYTES+1; %+1 is for CRC
			if pathdesiredIdx >= length(PathDesiredFidIdx) %Check to see if pre-allocated memory is exhausted
				PathDesiredFidIdx(pathdesiredIdx*2) = 0;
			end
		case PATHPLAN_OBJID
			pathplanIdx = pathplanIdx + 1;
			PathPlanFidIdx(pathplanIdx) = bufferIdx; %#ok<*AGROW>
			bufferIdx=bufferIdx + PATHPLAN_NUMBYTES+1; %+1 is for CRC
			if pathplanIdx >= length(PathPlanFidIdx) %Check to see if pre-allocated memory is exhausted
				PathPlanFidIdx(pathplanIdx*2) = 0;
			end
		case PATHSTATUS_OBJID
			pathstatusIdx = pathstatusIdx + 1;
			PathStatusFidIdx(pathstatusIdx) = bufferIdx; %#ok<*AGROW>
			bufferIdx=bufferIdx + PATHSTATUS_NUMBYTES+1; %+1 is for CRC
			if pathstatusIdx >= length(PathStatusFidIdx) %Check to see if pre-allocated memory is exhausted
				PathStatusFidIdx(pathstatusIdx*2) = 0;
			end
		case PATHSUMMARY_OBJID
			pathsummaryIdx = pathsummaryIdx + 1;
			PathSummaryFidIdx(pathsummaryIdx) = bufferIdx; %#ok<*AGROW>
			bufferIdx=bufferIdx + PATHSUMMARY_NUMBYTES+1; %+1 is for CRC
			if pathsummaryIdx >= length(PathSummaryFidIdx) %Check to see if pre-allocated memory is exhausted
				PathSummaryFidIdx(pathsummaryIdx*2) = 0;
			end
		case PERFCOUNTER_OBJID
			perfcounterIdx = perfcounterIdx + 1;
			PerfCounterFidIdx(perfcounterIdx) = bufferIdx; %#ok<*AGROW>
			bufferIdx=bufferIdx + PERFCOUNTER_NUMBYTES+1; %+1 is for CRC
			if perfcounterIdx >= length(PerfCounterFidIdx) %Check to see if pre-allocated memory is exhausted
				PerfCounterFidIdx(perfcounterIdx*2) = 0;
			end
		case PIDSTATUS_OBJID
			pidstatusIdx = pidstatusIdx + 1;
			PIDStatusFidIdx(pidstatusIdx) = bufferIdx; %#ok<*AGROW>
			bufferIdx=bufferIdx + PIDSTATUS_NUMBYTES+1; %+1 is for CRC
			if pidstatusIdx >= length(PIDStatusFidIdx) %Check to see if pre-allocated memory is exhausted
				PIDStatusFidIdx(pidstatusIdx*2) = 0;
			end
		case POILEARNSETTINGS_OBJID
			poilearnsettingsIdx = poilearnsettingsIdx + 1;
			PoiLearnSettingsFidIdx(poilearnsettingsIdx) = bufferIdx; %#ok<*AGROW>
			bufferIdx=bufferIdx + POILEARNSETTINGS_NUMBYTES+1; %+1 is for CRC
			if poilearnsettingsIdx >= length(PoiLearnSettingsFidIdx) %Check to see if pre-allocated memory is exhausted
				PoiLearnSettingsFidIdx(poilearnsettingsIdx*2) = 0;
			end
		case POILOCATION_OBJID
			poilocationIdx = poilocationIdx + 1;
			PoiLocationFidIdx(poilocationIdx) = bufferIdx; %#ok<*AGROW>
			bufferIdx=bufferIdx + POILOCATION_NUMBYTES+1; %+1 is for CRC
			if poilocationIdx >= length(PoiLocationFidIdx) %Check to see if pre-allocated memory is exhausted
				PoiLocationFidIdx(poilocationIdx*2) = 0;
			end
		case POSITIONSTATE_OBJID
			positionstateIdx = positionstateIdx + 1;
			PositionStateFidIdx(positionstateIdx) = bufferIdx; %#ok<*AGROW>
			bufferIdx=bufferIdx + POSITIONSTATE_NUMBYTES+1; %+1 is for CRC
			if positionstateIdx >= length(PositionStateFidIdx) %Check to see if pre-allocated memory is exhausted
				PositionStateFidIdx(positionstateIdx*2) = 0;
			end
		case RADIOCOMBRIDGESTATS_OBJID
			radiocombridgestatsIdx = radiocombridgestatsIdx + 1;
			RadioComBridgeStatsFidIdx(radiocombridgestatsIdx) = bufferIdx; %#ok<*AGROW>
			bufferIdx=bufferIdx + RADIOCOMBRIDGESTATS_NUMBYTES+1; %+1 is for CRC
			if radiocombridgestatsIdx >= length(RadioComBridgeStatsFidIdx) %Check to see if pre-allocated memory is exhausted
				RadioComBridgeStatsFidIdx(radiocombridgestatsIdx*2) = 0;
			end
		case RATEDESIRED_OBJID
			ratedesiredIdx = ratedesiredIdx + 1;
			RateDesiredFidIdx(ratedesiredIdx) = bufferIdx; %#ok<*AGROW>
			bufferIdx=bufferIdx + RATEDESIRED_NUMBYTES+1; %+1 is for CRC
			if ratedesiredIdx >= length(RateDesiredFidIdx) %Check to see if pre-allocated memory is exhausted
				RateDesiredFidIdx(ratedesiredIdx*2) = 0;
			end
		case RECEIVERACTIVITY_OBJID
			receiveractivityIdx = receiveractivityIdx + 1;
			ReceiverActivityFidIdx(receiveractivityIdx) = bufferIdx; %#ok<*AGROW>
			bufferIdx=bufferIdx + RECEIVERACTIVITY_NUMBYTES+1; %+1 is for CRC
			if receiveractivityIdx >= length(ReceiverActivityFidIdx) %Check to see if pre-allocated memory is exhausted
				ReceiverActivityFidIdx(receiveractivityIdx*2) = 0;
			end
		case RECEIVERSTATUS_OBJID
			receiverstatusIdx = receiverstatusIdx + 1;
			ReceiverStatusFidIdx(receiverstatusIdx) = bufferIdx; %#ok<*AGROW>
			bufferIdx=bufferIdx + RECEIVERSTATUS_NUMBYTES+1; %+1 is for CRC
			if receiverstatusIdx >= length(ReceiverStatusFidIdx) %Check to see if pre-allocated memory is exhausted
				ReceiverStatusFidIdx(receiverstatusIdx*2) = 0;
			end
		case REVOCALIBRATION_OBJID
			revocalibrationIdx = revocalibrationIdx + 1;
			RevoCalibrationFidIdx(revocalibrationIdx) = bufferIdx; %#ok<*AGROW>
			bufferIdx=bufferIdx + REVOCALIBRATION_NUMBYTES+1; %+1 is for CRC
			if revocalibrationIdx >= length(RevoCalibrationFidIdx) %Check to see if pre-allocated memory is exhausted
				RevoCalibrationFidIdx(revocalibrationIdx*2) = 0;
			end
		case REVOSETTINGS_OBJID
			revosettingsIdx = revosettingsIdx + 1;
			RevoSettingsFidIdx(revosettingsIdx) = bufferIdx; %#ok<*AGROW>
			bufferIdx=bufferIdx + REVOSETTINGS_NUMBYTES+1; %+1 is for CRC
			if revosettingsIdx >= length(RevoSettingsFidIdx) %Check to see if pre-allocated memory is exhausted
				RevoSettingsFidIdx(revosettingsIdx*2) = 0;
			end
		case SONARALTITUDE_OBJID
			sonaraltitudeIdx = sonaraltitudeIdx + 1;
			SonarAltitudeFidIdx(sonaraltitudeIdx) = bufferIdx; %#ok<*AGROW>
			bufferIdx=bufferIdx + SONARALTITUDE_NUMBYTES+1; %+1 is for CRC
			if sonaraltitudeIdx >= length(SonarAltitudeFidIdx) %Check to see if pre-allocated memory is exhausted
				SonarAltitudeFidIdx(sonaraltitudeIdx*2) = 0;
			end
		case STABILIZATIONBANK_OBJID
			stabilizationbankIdx = stabilizationbankIdx + 1;
			StabilizationBankFidIdx(stabilizationbankIdx) = bufferIdx; %#ok<*AGROW>
			bufferIdx=bufferIdx + STABILIZATIONBANK_NUMBYTES+1; %+1 is for CRC
			if stabilizationbankIdx >= length(StabilizationBankFidIdx) %Check to see if pre-allocated memory is exhausted
				StabilizationBankFidIdx(stabilizationbankIdx*2) = 0;
			end
		case STABILIZATIONDESIRED_OBJID
			stabilizationdesiredIdx = stabilizationdesiredIdx + 1;
			StabilizationDesiredFidIdx(stabilizationdesiredIdx) = bufferIdx; %#ok<*AGROW>
			bufferIdx=bufferIdx + STABILIZATIONDESIRED_NUMBYTES+1; %+1 is for CRC
			if stabilizationdesiredIdx >= length(StabilizationDesiredFidIdx) %Check to see if pre-allocated memory is exhausted
				StabilizationDesiredFidIdx(stabilizationdesiredIdx*2) = 0;
			end
		case STABILIZATIONSETTINGS_OBJID
			stabilizationsettingsIdx = stabilizationsettingsIdx + 1;
			StabilizationSettingsFidIdx(stabilizationsettingsIdx) = bufferIdx; %#ok<*AGROW>
			bufferIdx=bufferIdx + STABILIZATIONSETTINGS_NUMBYTES+1; %+1 is for CRC
			if stabilizationsettingsIdx >= length(StabilizationSettingsFidIdx) %Check to see if pre-allocated memory is exhausted
				StabilizationSettingsFidIdx(stabilizationsettingsIdx*2) = 0;
			end
		case STABILIZATIONSETTINGSBANK1_OBJID
			stabilizationsettingsbank1Idx = stabilizationsettingsbank1Idx + 1;
			StabilizationSettingsBank1FidIdx(stabilizationsettingsbank1Idx) = bufferIdx; %#ok<*AGROW>
			bufferIdx=bufferIdx + STABILIZATIONSETTINGSBANK1_NUMBYTES+1; %+1 is for CRC
			if stabilizationsettingsbank1Idx >= length(StabilizationSettingsBank1FidIdx) %Check to see if pre-allocated memory is exhausted
				StabilizationSettingsBank1FidIdx(stabilizationsettingsbank1Idx*2) = 0;
			end
		case STABILIZATIONSETTINGSBANK2_OBJID
			stabilizationsettingsbank2Idx = stabilizationsettingsbank2Idx + 1;
			StabilizationSettingsBank2FidIdx(stabilizationsettingsbank2Idx) = bufferIdx; %#ok<*AGROW>
			bufferIdx=bufferIdx + STABILIZATIONSETTINGSBANK2_NUMBYTES+1; %+1 is for CRC
			if stabilizationsettingsbank2Idx >= length(StabilizationSettingsBank2FidIdx) %Check to see if pre-allocated memory is exhausted
				StabilizationSettingsBank2FidIdx(stabilizationsettingsbank2Idx*2) = 0;
			end
		case STABILIZATIONSETTINGSBANK3_OBJID
			stabilizationsettingsbank3Idx = stabilizationsettingsbank3Idx + 1;
			StabilizationSettingsBank3FidIdx(stabilizationsettingsbank3Idx) = bufferIdx; %#ok<*AGROW>
			bufferIdx=bufferIdx + STABILIZATIONSETTINGSBANK3_NUMBYTES+1; %+1 is for CRC
			if stabilizationsettingsbank3Idx >= length(StabilizationSettingsBank3FidIdx) %Check to see if pre-allocated memory is exhausted
				StabilizationSettingsBank3FidIdx(stabilizationsettingsbank3Idx*2) = 0;
			end
		case STABILIZATIONSTATUS_OBJID
			stabilizationstatusIdx = stabilizationstatusIdx + 1;
			StabilizationStatusFidIdx(stabilizationstatusIdx) = bufferIdx; %#ok<*AGROW>
			bufferIdx=bufferIdx + STABILIZATIONSTATUS_NUMBYTES+1; %+1 is for CRC
			if stabilizationstatusIdx >= length(StabilizationStatusFidIdx) %Check to see if pre-allocated memory is exhausted
				StabilizationStatusFidIdx(stabilizationstatusIdx*2) = 0;
			end
		case STATUSGROUNDDRIVE_OBJID
			statusgrounddriveIdx = statusgrounddriveIdx + 1;
			StatusGroundDriveFidIdx(statusgrounddriveIdx) = bufferIdx; %#ok<*AGROW>
			bufferIdx=bufferIdx + STATUSGROUNDDRIVE_NUMBYTES+1; %+1 is for CRC
			if statusgrounddriveIdx >= length(StatusGroundDriveFidIdx) %Check to see if pre-allocated memory is exhausted
				StatusGroundDriveFidIdx(statusgrounddriveIdx*2) = 0;
			end
		case STATUSVTOLAUTOTAKEOFF_OBJID
			statusvtolautotakeoffIdx = statusvtolautotakeoffIdx + 1;
			StatusVtolAutoTakeoffFidIdx(statusvtolautotakeoffIdx) = bufferIdx; %#ok<*AGROW>
			bufferIdx=bufferIdx + STATUSVTOLAUTOTAKEOFF_NUMBYTES+1; %+1 is for CRC
			if statusvtolautotakeoffIdx >= length(StatusVtolAutoTakeoffFidIdx) %Check to see if pre-allocated memory is exhausted
				StatusVtolAutoTakeoffFidIdx(statusvtolautotakeoffIdx*2) = 0;
			end
		case STATUSVTOLLAND_OBJID
			statusvtollandIdx = statusvtollandIdx + 1;
			StatusVtolLandFidIdx(statusvtollandIdx) = bufferIdx; %#ok<*AGROW>
			bufferIdx=bufferIdx + STATUSVTOLLAND_NUMBYTES+1; %+1 is for CRC
			if statusvtollandIdx >= length(StatusVtolLandFidIdx) %Check to see if pre-allocated memory is exhausted
				StatusVtolLandFidIdx(statusvtollandIdx*2) = 0;
			end
		case SYSTEMALARMS_OBJID
			systemalarmsIdx = systemalarmsIdx + 1;
			SystemAlarmsFidIdx(systemalarmsIdx) = bufferIdx; %#ok<*AGROW>
			bufferIdx=bufferIdx + SYSTEMALARMS_NUMBYTES+1; %+1 is for CRC
			if systemalarmsIdx >= length(SystemAlarmsFidIdx) %Check to see if pre-allocated memory is exhausted
				SystemAlarmsFidIdx(systemalarmsIdx*2) = 0;
			end
		case SYSTEMIDENTSETTINGS_OBJID
			systemidentsettingsIdx = systemidentsettingsIdx + 1;
			SystemIdentSettingsFidIdx(systemidentsettingsIdx) = bufferIdx; %#ok<*AGROW>
			bufferIdx=bufferIdx + SYSTEMIDENTSETTINGS_NUMBYTES+1; %+1 is for CRC
			if systemidentsettingsIdx >= length(SystemIdentSettingsFidIdx) %Check to see if pre-allocated memory is exhausted
				SystemIdentSettingsFidIdx(systemidentsettingsIdx*2) = 0;
			end
		case SYSTEMIDENTSTATE_OBJID
			systemidentstateIdx = systemidentstateIdx + 1;
			SystemIdentStateFidIdx(systemidentstateIdx) = bufferIdx; %#ok<*AGROW>
			bufferIdx=bufferIdx + SYSTEMIDENTSTATE_NUMBYTES+1; %+1 is for CRC
			if systemidentstateIdx >= length(SystemIdentStateFidIdx) %Check to see if pre-allocated memory is exhausted
				SystemIdentStateFidIdx(systemidentstateIdx*2) = 0;
			end
		case SYSTEMSETTINGS_OBJID
			systemsettingsIdx = systemsettingsIdx + 1;
			SystemSettingsFidIdx(systemsettingsIdx) = bufferIdx; %#ok<*AGROW>
			bufferIdx=bufferIdx + SYSTEMSETTINGS_NUMBYTES+1; %+1 is for CRC
			if systemsettingsIdx >= length(SystemSettingsFidIdx) %Check to see if pre-allocated memory is exhausted
				SystemSettingsFidIdx(systemsettingsIdx*2) = 0;
			end
		case SYSTEMSTATS_OBJID
			systemstatsIdx = systemstatsIdx + 1;
			SystemStatsFidIdx(systemstatsIdx) = bufferIdx; %#ok<*AGROW>
			bufferIdx=bufferIdx + SYSTEMSTATS_NUMBYTES+1; %+1 is for CRC
			if systemstatsIdx >= length(SystemStatsFidIdx) %Check to see if pre-allocated memory is exhausted
				SystemStatsFidIdx(systemstatsIdx*2) = 0;
			end
		case TAKEOFFLOCATION_OBJID
			takeofflocationIdx = takeofflocationIdx + 1;
			TakeOffLocationFidIdx(takeofflocationIdx) = bufferIdx; %#ok<*AGROW>
			bufferIdx=bufferIdx + TAKEOFFLOCATION_NUMBYTES+1; %+1 is for CRC
			if takeofflocationIdx >= length(TakeOffLocationFidIdx) %Check to see if pre-allocated memory is exhausted
				TakeOffLocationFidIdx(takeofflocationIdx*2) = 0;
			end
		case TASKINFO_OBJID
			taskinfoIdx = taskinfoIdx + 1;
			TaskInfoFidIdx(taskinfoIdx) = bufferIdx; %#ok<*AGROW>
			bufferIdx=bufferIdx + TASKINFO_NUMBYTES+1; %+1 is for CRC
			if taskinfoIdx >= length(TaskInfoFidIdx) %Check to see if pre-allocated memory is exhausted
				TaskInfoFidIdx(taskinfoIdx*2) = 0;
			end
		case TXPIDSETTINGS_OBJID
			txpidsettingsIdx = txpidsettingsIdx + 1;
			TxPIDSettingsFidIdx(txpidsettingsIdx) = bufferIdx; %#ok<*AGROW>
			bufferIdx=bufferIdx + TXPIDSETTINGS_NUMBYTES+1; %+1 is for CRC
			if txpidsettingsIdx >= length(TxPIDSettingsFidIdx) %Check to see if pre-allocated memory is exhausted
				TxPIDSettingsFidIdx(txpidsettingsIdx*2) = 0;
			end
		case TXPIDSTATUS_OBJID
			txpidstatusIdx = txpidstatusIdx + 1;
			TxPIDStatusFidIdx(txpidstatusIdx) = bufferIdx; %#ok<*AGROW>
			bufferIdx=bufferIdx + TXPIDSTATUS_NUMBYTES+1; %+1 is for CRC
			if txpidstatusIdx >= length(TxPIDStatusFidIdx) %Check to see if pre-allocated memory is exhausted
				TxPIDStatusFidIdx(txpidstatusIdx*2) = 0;
			end
		case VELOCITYDESIRED_OBJID
			velocitydesiredIdx = velocitydesiredIdx + 1;
			VelocityDesiredFidIdx(velocitydesiredIdx) = bufferIdx; %#ok<*AGROW>
			bufferIdx=bufferIdx + VELOCITYDESIRED_NUMBYTES+1; %+1 is for CRC
			if velocitydesiredIdx >= length(VelocityDesiredFidIdx) %Check to see if pre-allocated memory is exhausted
				VelocityDesiredFidIdx(velocitydesiredIdx*2) = 0;
			end
		case VELOCITYSTATE_OBJID
			velocitystateIdx = velocitystateIdx + 1;
			VelocityStateFidIdx(velocitystateIdx) = bufferIdx; %#ok<*AGROW>
			bufferIdx=bufferIdx + VELOCITYSTATE_NUMBYTES+1; %+1 is for CRC
			if velocitystateIdx >= length(VelocityStateFidIdx) %Check to see if pre-allocated memory is exhausted
				VelocityStateFidIdx(velocitystateIdx*2) = 0;
			end
		case VTOLPATHFOLLOWERSETTINGS_OBJID
			vtolpathfollowersettingsIdx = vtolpathfollowersettingsIdx + 1;
			VtolPathFollowerSettingsFidIdx(vtolpathfollowersettingsIdx) = bufferIdx; %#ok<*AGROW>
			bufferIdx=bufferIdx + VTOLPATHFOLLOWERSETTINGS_NUMBYTES+1; %+1 is for CRC
			if vtolpathfollowersettingsIdx >= length(VtolPathFollowerSettingsFidIdx) %Check to see if pre-allocated memory is exhausted
				VtolPathFollowerSettingsFidIdx(vtolpathfollowersettingsIdx*2) = 0;
			end
		case VTOLSELFTUNINGSTATS_OBJID
			vtolselftuningstatsIdx = vtolselftuningstatsIdx + 1;
			VtolSelfTuningStatsFidIdx(vtolselftuningstatsIdx) = bufferIdx; %#ok<*AGROW>
			bufferIdx=bufferIdx + VTOLSELFTUNINGSTATS_NUMBYTES+1; %+1 is for CRC
			if vtolselftuningstatsIdx >= length(VtolSelfTuningStatsFidIdx) %Check to see if pre-allocated memory is exhausted
				VtolSelfTuningStatsFidIdx(vtolselftuningstatsIdx*2) = 0;
			end
		case WATCHDOGSTATUS_OBJID
			watchdogstatusIdx = watchdogstatusIdx + 1;
			WatchdogStatusFidIdx(watchdogstatusIdx) = bufferIdx; %#ok<*AGROW>
			bufferIdx=bufferIdx + WATCHDOGSTATUS_NUMBYTES+1; %+1 is for CRC
			if watchdogstatusIdx >= length(WatchdogStatusFidIdx) %Check to see if pre-allocated memory is exhausted
				WatchdogStatusFidIdx(watchdogstatusIdx*2) = 0;
			end
		case WAYPOINT_OBJID
			waypointIdx = waypointIdx + 1;
			WaypointFidIdx(waypointIdx) = bufferIdx; %#ok<*AGROW>
			bufferIdx=bufferIdx + WAYPOINT_NUMBYTES+1; %+1 is for CRC
			if waypointIdx >= length(WaypointFidIdx) %Check to see if pre-allocated memory is exhausted
				WaypointFidIdx(waypointIdx*2) = 0;
			end
		case WAYPOINTACTIVE_OBJID
			waypointactiveIdx = waypointactiveIdx + 1;
			WaypointActiveFidIdx(waypointactiveIdx) = bufferIdx; %#ok<*AGROW>
			bufferIdx=bufferIdx + WAYPOINTACTIVE_NUMBYTES+1; %+1 is for CRC
			if waypointactiveIdx >= length(WaypointActiveFidIdx) %Check to see if pre-allocated memory is exhausted
				WaypointActiveFidIdx(waypointactiveIdx*2) = 0;
			end

		otherwise
			unknownObjIDListIdx=find(unknownObjIDList(:,1)==objID, 1, 'first');
			if isempty(unknownObjIDListIdx)
				unknownObjIDList=[unknownObjIDList; uint32(objID) 1]; %#ok<AGROW>
			else
				unknownObjIDList(unknownObjIDListIdx,2)=unknownObjIDList(unknownObjIDListIdx,2)+1; 
			end

			msgBytesLeft = msgSize - 1 - 1 - 2 - 4;
			if msgBytesLeft > 255
				msgBytesLeft = 0;
			end
			bufferIdx=bufferIdx+double(msgBytesLeft);
	end
	catch
		% One of the reads failed - indicates EOF
		break;
	end

	if (wrongSyncByte ~= lastWrongSyncByte || wrongMessageByte~=lastWrongMessageByte ) ||...
			bufferIdx - last_print > 5e4 %Every 50,000 bytes show the status update

		lastWrongSyncByte=wrongSyncByte;
		lastWrongMessageByte=wrongMessageByte;

		str1=[];
		for i=1:length([str2 str3 str4 str5]);
			str1=[str1 sprintf('\b')]; %#ok<AGROW>
		end
		str2=sprintf('wrongSyncByte instances:    % 10d\n', wrongSyncByte );
		str3=sprintf('wrongMessageByte instances: % 10d\n\n', wrongMessageByte );
		
		str4=sprintf('Completed bytes: % 9d of % 9d\n', bufferIdx, length(buffer));
		
	        % Arbitrary times two so that it is at least as long	
		estTimeRemaining=(length(buffer)-bufferIdx)/(bufferIdx/etime(clock,startTime)) * 2;
		h=floor(estTimeRemaining/3600);
		m=floor((estTimeRemaining-h*3600)/60);
		s=ceil(estTimeRemaining-h*3600-m*60);
		
		str5=sprintf('Est. time remaining, %02dh:%02dm:%02ds \n', h,m,s);

		last_print = bufferIdx;
		
		fprintf([str1 str2 str3 str4 str5]);
	end

	%Check if at end of file. If not, load next prebuffer
	if bufferIdx+12-1 > length(buffer)
		break;
	end
% 	bufferIdx=bufferIdx+12;

end


for i=2:size(unknownObjIDList,1) %Don't show the first one, as it was simply a dummy placeholder
   disp(['Unknown object ID: 0x' dec2hex(unknownObjIDList(i,1),8) ' appeared ' int2str(unknownObjIDList(i,2)) ' times.']);
end

%% Clean Up and Save mat file
fclose(fid);

%% Prune vectors
AccelGyroSettingsFidIdx =AccelGyroSettingsFidIdx(1:accelgyrosettingsIdx);
AccelSensorFidIdx =AccelSensorFidIdx(1:accelsensorIdx);
AccelStateFidIdx =AccelStateFidIdx(1:accelstateIdx);
AccessoryDesiredFidIdx =AccessoryDesiredFidIdx(1:accessorydesiredIdx);
ActuatorCommandFidIdx =ActuatorCommandFidIdx(1:actuatorcommandIdx);
ActuatorDesiredFidIdx =ActuatorDesiredFidIdx(1:actuatordesiredIdx);
ActuatorSettingsFidIdx =ActuatorSettingsFidIdx(1:actuatorsettingsIdx);
AirspeedSensorFidIdx =AirspeedSensorFidIdx(1:airspeedsensorIdx);
AirspeedSettingsFidIdx =AirspeedSettingsFidIdx(1:airspeedsettingsIdx);
AirspeedStateFidIdx =AirspeedStateFidIdx(1:airspeedstateIdx);
AltitudeFilterSettingsFidIdx =AltitudeFilterSettingsFidIdx(1:altitudefiltersettingsIdx);
AltitudeHoldSettingsFidIdx =AltitudeHoldSettingsFidIdx(1:altitudeholdsettingsIdx);
AltitudeHoldStatusFidIdx =AltitudeHoldStatusFidIdx(1:altitudeholdstatusIdx);
AttitudeSettingsFidIdx =AttitudeSettingsFidIdx(1:attitudesettingsIdx);
AttitudeSimulatedFidIdx =AttitudeSimulatedFidIdx(1:attitudesimulatedIdx);
AttitudeStateFidIdx =AttitudeStateFidIdx(1:attitudestateIdx);
AuxMagSensorFidIdx =AuxMagSensorFidIdx(1:auxmagsensorIdx);
AuxMagSettingsFidIdx =AuxMagSettingsFidIdx(1:auxmagsettingsIdx);
BaroSensorFidIdx =BaroSensorFidIdx(1:barosensorIdx);
CallbackInfoFidIdx =CallbackInfoFidIdx(1:callbackinfoIdx);
CameraControlActivityFidIdx =CameraControlActivityFidIdx(1:cameracontrolactivityIdx);
CameraControlSettingsFidIdx =CameraControlSettingsFidIdx(1:cameracontrolsettingsIdx);
CameraDesiredFidIdx =CameraDesiredFidIdx(1:cameradesiredIdx);
CameraStabSettingsFidIdx =CameraStabSettingsFidIdx(1:camerastabsettingsIdx);
DebugLogControlFidIdx =DebugLogControlFidIdx(1:debuglogcontrolIdx);
DebugLogEntryFidIdx =DebugLogEntryFidIdx(1:debuglogentryIdx);
DebugLogSettingsFidIdx =DebugLogSettingsFidIdx(1:debuglogsettingsIdx);
DebugLogStatusFidIdx =DebugLogStatusFidIdx(1:debuglogstatusIdx);
EKFConfigurationFidIdx =EKFConfigurationFidIdx(1:ekfconfigurationIdx);
EKFStateVarianceFidIdx =EKFStateVarianceFidIdx(1:ekfstatevarianceIdx);
FaultSettingsFidIdx =FaultSettingsFidIdx(1:faultsettingsIdx);
FirmwareIAPObjFidIdx =FirmwareIAPObjFidIdx(1:firmwareiapobjIdx);
FixedWingPathFollowerSettingsFidIdx =FixedWingPathFollowerSettingsFidIdx(1:fixedwingpathfollowersettingsIdx);
FixedWingPathFollowerStatusFidIdx =FixedWingPathFollowerStatusFidIdx(1:fixedwingpathfollowerstatusIdx);
FlightBatterySettingsFidIdx =FlightBatterySettingsFidIdx(1:flightbatterysettingsIdx);
FlightBatteryStateFidIdx =FlightBatteryStateFidIdx(1:flightbatterystateIdx);
FlightModeSettingsFidIdx =FlightModeSettingsFidIdx(1:flightmodesettingsIdx);
FlightPlanControlFidIdx =FlightPlanControlFidIdx(1:flightplancontrolIdx);
FlightPlanSettingsFidIdx =FlightPlanSettingsFidIdx(1:flightplansettingsIdx);
FlightPlanStatusFidIdx =FlightPlanStatusFidIdx(1:flightplanstatusIdx);
FlightStatusFidIdx =FlightStatusFidIdx(1:flightstatusIdx);
FlightTelemetryStatsFidIdx =FlightTelemetryStatsFidIdx(1:flighttelemetrystatsIdx);
GCSReceiverFidIdx =GCSReceiverFidIdx(1:gcsreceiverIdx);
GCSTelemetryStatsFidIdx =GCSTelemetryStatsFidIdx(1:gcstelemetrystatsIdx);
GPSExtendedStatusFidIdx =GPSExtendedStatusFidIdx(1:gpsextendedstatusIdx);
GPSPositionSensorFidIdx =GPSPositionSensorFidIdx(1:gpspositionsensorIdx);
GPSSatellitesFidIdx =GPSSatellitesFidIdx(1:gpssatellitesIdx);
GPSSettingsFidIdx =GPSSettingsFidIdx(1:gpssettingsIdx);
GPSTimeFidIdx =GPSTimeFidIdx(1:gpstimeIdx);
GPSVelocitySensorFidIdx =GPSVelocitySensorFidIdx(1:gpsvelocitysensorIdx);
GroundPathFollowerSettingsFidIdx =GroundPathFollowerSettingsFidIdx(1:groundpathfollowersettingsIdx);
GroundTruthFidIdx =GroundTruthFidIdx(1:groundtruthIdx);
GyroSensorFidIdx =GyroSensorFidIdx(1:gyrosensorIdx);
GyroStateFidIdx =GyroStateFidIdx(1:gyrostateIdx);
HomeLocationFidIdx =HomeLocationFidIdx(1:homelocationIdx);
HwSettingsFidIdx =HwSettingsFidIdx(1:hwsettingsIdx);
I2CStatsFidIdx =I2CStatsFidIdx(1:i2cstatsIdx);
MagSensorFidIdx =MagSensorFidIdx(1:magsensorIdx);
MagStateFidIdx =MagStateFidIdx(1:magstateIdx);
ManualControlCommandFidIdx =ManualControlCommandFidIdx(1:manualcontrolcommandIdx);
ManualControlSettingsFidIdx =ManualControlSettingsFidIdx(1:manualcontrolsettingsIdx);
MixerSettingsFidIdx =MixerSettingsFidIdx(1:mixersettingsIdx);
MixerStatusFidIdx =MixerStatusFidIdx(1:mixerstatusIdx);
MPUGyroAccelSettingsFidIdx =MPUGyroAccelSettingsFidIdx(1:mpugyroaccelsettingsIdx);
NedAccelFidIdx =NedAccelFidIdx(1:nedaccelIdx);
ObjectPersistenceFidIdx =ObjectPersistenceFidIdx(1:objectpersistenceIdx);
OPLinkReceiverFidIdx =OPLinkReceiverFidIdx(1:oplinkreceiverIdx);
OPLinkSettingsFidIdx =OPLinkSettingsFidIdx(1:oplinksettingsIdx);
OPLinkStatusFidIdx =OPLinkStatusFidIdx(1:oplinkstatusIdx);
OsdSettingsFidIdx =OsdSettingsFidIdx(1:osdsettingsIdx);
OveroSyncSettingsFidIdx =OveroSyncSettingsFidIdx(1:overosyncsettingsIdx);
OveroSyncStatsFidIdx =OveroSyncStatsFidIdx(1:overosyncstatsIdx);
PathActionFidIdx =PathActionFidIdx(1:pathactionIdx);
PathDesiredFidIdx =PathDesiredFidIdx(1:pathdesiredIdx);
PathPlanFidIdx =PathPlanFidIdx(1:pathplanIdx);
PathStatusFidIdx =PathStatusFidIdx(1:pathstatusIdx);
PathSummaryFidIdx =PathSummaryFidIdx(1:pathsummaryIdx);
PerfCounterFidIdx =PerfCounterFidIdx(1:perfcounterIdx);
PIDStatusFidIdx =PIDStatusFidIdx(1:pidstatusIdx);
PoiLearnSettingsFidIdx =PoiLearnSettingsFidIdx(1:poilearnsettingsIdx);
PoiLocationFidIdx =PoiLocationFidIdx(1:poilocationIdx);
PositionStateFidIdx =PositionStateFidIdx(1:positionstateIdx);
RadioComBridgeStatsFidIdx =RadioComBridgeStatsFidIdx(1:radiocombridgestatsIdx);
RateDesiredFidIdx =RateDesiredFidIdx(1:ratedesiredIdx);
ReceiverActivityFidIdx =ReceiverActivityFidIdx(1:receiveractivityIdx);
ReceiverStatusFidIdx =ReceiverStatusFidIdx(1:receiverstatusIdx);
RevoCalibrationFidIdx =RevoCalibrationFidIdx(1:revocalibrationIdx);
RevoSettingsFidIdx =RevoSettingsFidIdx(1:revosettingsIdx);
SonarAltitudeFidIdx =SonarAltitudeFidIdx(1:sonaraltitudeIdx);
StabilizationBankFidIdx =StabilizationBankFidIdx(1:stabilizationbankIdx);
StabilizationDesiredFidIdx =StabilizationDesiredFidIdx(1:stabilizationdesiredIdx);
StabilizationSettingsFidIdx =StabilizationSettingsFidIdx(1:stabilizationsettingsIdx);
StabilizationSettingsBank1FidIdx =StabilizationSettingsBank1FidIdx(1:stabilizationsettingsbank1Idx);
StabilizationSettingsBank2FidIdx =StabilizationSettingsBank2FidIdx(1:stabilizationsettingsbank2Idx);
StabilizationSettingsBank3FidIdx =StabilizationSettingsBank3FidIdx(1:stabilizationsettingsbank3Idx);
StabilizationStatusFidIdx =StabilizationStatusFidIdx(1:stabilizationstatusIdx);
StatusGroundDriveFidIdx =StatusGroundDriveFidIdx(1:statusgrounddriveIdx);
StatusVtolAutoTakeoffFidIdx =StatusVtolAutoTakeoffFidIdx(1:statusvtolautotakeoffIdx);
StatusVtolLandFidIdx =StatusVtolLandFidIdx(1:statusvtollandIdx);
SystemAlarmsFidIdx =SystemAlarmsFidIdx(1:systemalarmsIdx);
SystemIdentSettingsFidIdx =SystemIdentSettingsFidIdx(1:systemidentsettingsIdx);
SystemIdentStateFidIdx =SystemIdentStateFidIdx(1:systemidentstateIdx);
SystemSettingsFidIdx =SystemSettingsFidIdx(1:systemsettingsIdx);
SystemStatsFidIdx =SystemStatsFidIdx(1:systemstatsIdx);
TakeOffLocationFidIdx =TakeOffLocationFidIdx(1:takeofflocationIdx);
TaskInfoFidIdx =TaskInfoFidIdx(1:taskinfoIdx);
TxPIDSettingsFidIdx =TxPIDSettingsFidIdx(1:txpidsettingsIdx);
TxPIDStatusFidIdx =TxPIDStatusFidIdx(1:txpidstatusIdx);
VelocityDesiredFidIdx =VelocityDesiredFidIdx(1:velocitydesiredIdx);
VelocityStateFidIdx =VelocityStateFidIdx(1:velocitystateIdx);
VtolPathFollowerSettingsFidIdx =VtolPathFollowerSettingsFidIdx(1:vtolpathfollowersettingsIdx);
VtolSelfTuningStatsFidIdx =VtolSelfTuningStatsFidIdx(1:vtolselftuningstatsIdx);
WatchdogStatusFidIdx =WatchdogStatusFidIdx(1:watchdogstatusIdx);
WaypointFidIdx =WaypointFidIdx(1:waypointIdx);
WaypointActiveFidIdx =WaypointActiveFidIdx(1:waypointactiveIdx);



%% Perform typecasting on vectors
% AccelGyroSettings typecasting
	AccelGyroSettings.timestamp = double(typecast(buffer(mcolon(AccelGyroSettingsFidIdx - headerLen - oplHeaderLen, AccelGyroSettingsFidIdx + 3 - headerLen - oplHeaderLen)), 'uint32'))';
	AccelGyroSettings.accel_bias = reshape(double(typecast(buffer(mcolon(AccelGyroSettingsFidIdx + 0, AccelGyroSettingsFidIdx + 11)), 'single')), 3, [] );
	AccelGyroSettings.accel_scale = reshape(double(typecast(buffer(mcolon(AccelGyroSettingsFidIdx + 12, AccelGyroSettingsFidIdx + 23)), 'single')), 3, [] );
	AccelGyroSettings.accel_temp_coeff = reshape(double(typecast(buffer(mcolon(AccelGyroSettingsFidIdx + 24, AccelGyroSettingsFidIdx + 35)), 'single')), 3, [] );
	AccelGyroSettings.gyro_bias = reshape(double(typecast(buffer(mcolon(AccelGyroSettingsFidIdx + 36, AccelGyroSettingsFidIdx + 47)), 'single')), 3, [] );
	AccelGyroSettings.gyro_scale = reshape(double(typecast(buffer(mcolon(AccelGyroSettingsFidIdx + 48, AccelGyroSettingsFidIdx + 59)), 'single')), 3, [] );
	AccelGyroSettings.gyro_temp_coeff = reshape(double(typecast(buffer(mcolon(AccelGyroSettingsFidIdx + 60, AccelGyroSettingsFidIdx + 83)), 'single')), 6, [] );
	AccelGyroSettings.temp_calibrated_extent = reshape(double(typecast(buffer(mcolon(AccelGyroSettingsFidIdx + 84, AccelGyroSettingsFidIdx + 91)), 'single')), 2, [] );

% AccelSensor typecasting
	AccelSensor.timestamp = double(typecast(buffer(mcolon(AccelSensorFidIdx - headerLen - oplHeaderLen, AccelSensorFidIdx + 3 - headerLen - oplHeaderLen)), 'uint32'))';
	AccelSensor.x = double(typecast(buffer(mcolon(AccelSensorFidIdx + 0, AccelSensorFidIdx + 3)), 'single'))';
	AccelSensor.y = double(typecast(buffer(mcolon(AccelSensorFidIdx + 4, AccelSensorFidIdx + 7)), 'single'))';
	AccelSensor.z = double(typecast(buffer(mcolon(AccelSensorFidIdx + 8, AccelSensorFidIdx + 11)), 'single'))';
	AccelSensor.temperature = double(typecast(buffer(mcolon(AccelSensorFidIdx + 12, AccelSensorFidIdx + 15)), 'single'))';

% AccelState typecasting
	AccelState.timestamp = double(typecast(buffer(mcolon(AccelStateFidIdx - headerLen - oplHeaderLen, AccelStateFidIdx + 3 - headerLen - oplHeaderLen)), 'uint32'))';
	AccelState.x = double(typecast(buffer(mcolon(AccelStateFidIdx + 0, AccelStateFidIdx + 3)), 'single'))';
	AccelState.y = double(typecast(buffer(mcolon(AccelStateFidIdx + 4, AccelStateFidIdx + 7)), 'single'))';
	AccelState.z = double(typecast(buffer(mcolon(AccelStateFidIdx + 8, AccelStateFidIdx + 11)), 'single'))';

% AccessoryDesired typecasting
	AccessoryDesired.timestamp = double(typecast(buffer(mcolon(AccessoryDesiredFidIdx - headerLen - oplHeaderLen, AccessoryDesiredFidIdx + 3 - headerLen - oplHeaderLen)), 'uint32'))';
	AccessoryDesired.instanceID = double(typecast(buffer(mcolon(AccessoryDesiredFidIdx - 2, AccessoryDesiredFidIdx - 2 + 1)), 'uint16'))';
	AccessoryDesired.AccessoryVal = double(typecast(buffer(mcolon(AccessoryDesiredFidIdx + 0, AccessoryDesiredFidIdx + 3)), 'single'))';

% ActuatorCommand typecasting
	ActuatorCommand.timestamp = double(typecast(buffer(mcolon(ActuatorCommandFidIdx - headerLen - oplHeaderLen, ActuatorCommandFidIdx + 3 - headerLen - oplHeaderLen)), 'uint32'))';
	ActuatorCommand.Channel = reshape(double(typecast(buffer(mcolon(ActuatorCommandFidIdx + 0, ActuatorCommandFidIdx + 23)), 'int16')), 12, [] );
	ActuatorCommand.UpdateTime = double(typecast(buffer(mcolon(ActuatorCommandFidIdx + 24, ActuatorCommandFidIdx + 25)), 'uint16'))';
	ActuatorCommand.MaxUpdateTime = double(typecast(buffer(mcolon(ActuatorCommandFidIdx + 26, ActuatorCommandFidIdx + 27)), 'uint16'))';
	ActuatorCommand.NumFailedUpdates = double(typecast(buffer(mcolon(ActuatorCommandFidIdx + 28, ActuatorCommandFidIdx + 28)), 'uint8'))';

% ActuatorDesired typecasting
	ActuatorDesired.timestamp = double(typecast(buffer(mcolon(ActuatorDesiredFidIdx - headerLen - oplHeaderLen, ActuatorDesiredFidIdx + 3 - headerLen - oplHeaderLen)), 'uint32'))';
	ActuatorDesired.Roll = double(typecast(buffer(mcolon(ActuatorDesiredFidIdx + 0, ActuatorDesiredFidIdx + 3)), 'single'))';
	ActuatorDesired.Pitch = double(typecast(buffer(mcolon(ActuatorDesiredFidIdx + 4, ActuatorDesiredFidIdx + 7)), 'single'))';
	ActuatorDesired.Yaw = double(typecast(buffer(mcolon(ActuatorDesiredFidIdx + 8, ActuatorDesiredFidIdx + 11)), 'single'))';
	ActuatorDesired.Thrust = double(typecast(buffer(mcolon(ActuatorDesiredFidIdx + 12, ActuatorDesiredFidIdx + 15)), 'single'))';
	ActuatorDesired.UpdateTime = double(typecast(buffer(mcolon(ActuatorDesiredFidIdx + 16, ActuatorDesiredFidIdx + 19)), 'single'))';
	ActuatorDesired.NumLongUpdates = double(typecast(buffer(mcolon(ActuatorDesiredFidIdx + 20, ActuatorDesiredFidIdx + 23)), 'single'))';

% ActuatorSettings typecasting
	ActuatorSettings.timestamp = double(typecast(buffer(mcolon(ActuatorSettingsFidIdx - headerLen - oplHeaderLen, ActuatorSettingsFidIdx + 3 - headerLen - oplHeaderLen)), 'uint32'))';
	ActuatorSettings.BankUpdateFreq = reshape(double(typecast(buffer(mcolon(ActuatorSettingsFidIdx + 0, ActuatorSettingsFidIdx + 11)), 'uint16')), 6, [] );
	ActuatorSettings.ChannelMax = reshape(double(typecast(buffer(mcolon(ActuatorSettingsFidIdx + 12, ActuatorSettingsFidIdx + 35)), 'int16')), 12, [] );
	ActuatorSettings.ChannelNeutral = reshape(double(typecast(buffer(mcolon(ActuatorSettingsFidIdx + 36, ActuatorSettingsFidIdx + 59)), 'int16')), 12, [] );
	ActuatorSettings.ChannelMin = reshape(double(typecast(buffer(mcolon(ActuatorSettingsFidIdx + 60, ActuatorSettingsFidIdx + 83)), 'int16')), 12, [] );
	ActuatorSettings.BankMode = reshape(double(typecast(buffer(mcolon(ActuatorSettingsFidIdx + 84, ActuatorSettingsFidIdx + 89)), 'uint8')), 6, [] );
	ActuatorSettings.ChannelType = reshape(double(typecast(buffer(mcolon(ActuatorSettingsFidIdx + 90, ActuatorSettingsFidIdx + 101)), 'uint8')), 12, [] );
	ActuatorSettings.ChannelAddr = reshape(double(typecast(buffer(mcolon(ActuatorSettingsFidIdx + 102, ActuatorSettingsFidIdx + 113)), 'uint8')), 12, [] );
	ActuatorSettings.MotorsSpinWhileArmed = double(typecast(buffer(mcolon(ActuatorSettingsFidIdx + 114, ActuatorSettingsFidIdx + 114)), 'uint8'))';
	ActuatorSettings.LowThrottleZeroAxis = reshape(double(typecast(buffer(mcolon(ActuatorSettingsFidIdx + 115, ActuatorSettingsFidIdx + 117)), 'uint8')), 3, [] );

% AirspeedSensor typecasting
	AirspeedSensor.timestamp = double(typecast(buffer(mcolon(AirspeedSensorFidIdx - headerLen - oplHeaderLen, AirspeedSensorFidIdx + 3 - headerLen - oplHeaderLen)), 'uint32'))';
	AirspeedSensor.DifferentialPressure = double(typecast(buffer(mcolon(AirspeedSensorFidIdx + 0, AirspeedSensorFidIdx + 3)), 'single'))';
	AirspeedSensor.Temperature = double(typecast(buffer(mcolon(AirspeedSensorFidIdx + 4, AirspeedSensorFidIdx + 7)), 'single'))';
	AirspeedSensor.CalibratedAirspeed = double(typecast(buffer(mcolon(AirspeedSensorFidIdx + 8, AirspeedSensorFidIdx + 11)), 'single'))';
	AirspeedSensor.TrueAirspeed = double(typecast(buffer(mcolon(AirspeedSensorFidIdx + 12, AirspeedSensorFidIdx + 15)), 'single'))';
	AirspeedSensor.SensorValue = double(typecast(buffer(mcolon(AirspeedSensorFidIdx + 16, AirspeedSensorFidIdx + 17)), 'uint16'))';
	AirspeedSensor.SensorValueTemperature = double(typecast(buffer(mcolon(AirspeedSensorFidIdx + 18, AirspeedSensorFidIdx + 19)), 'uint16'))';
	AirspeedSensor.SensorConnected = double(typecast(buffer(mcolon(AirspeedSensorFidIdx + 20, AirspeedSensorFidIdx + 20)), 'uint8'))';

% AirspeedSettings typecasting
	AirspeedSettings.timestamp = double(typecast(buffer(mcolon(AirspeedSettingsFidIdx - headerLen - oplHeaderLen, AirspeedSettingsFidIdx + 3 - headerLen - oplHeaderLen)), 'uint32'))';
	AirspeedSettings.Scale = double(typecast(buffer(mcolon(AirspeedSettingsFidIdx + 0, AirspeedSettingsFidIdx + 3)), 'single'))';
	AirspeedSettings.IMUBasedEstimationLowPassPeriod1 = double(typecast(buffer(mcolon(AirspeedSettingsFidIdx + 4, AirspeedSettingsFidIdx + 7)), 'single'))';
	AirspeedSettings.IMUBasedEstimationLowPassPeriod2 = double(typecast(buffer(mcolon(AirspeedSettingsFidIdx + 8, AirspeedSettingsFidIdx + 11)), 'single'))';
	AirspeedSettings.ZeroPoint = double(typecast(buffer(mcolon(AirspeedSettingsFidIdx + 12, AirspeedSettingsFidIdx + 13)), 'uint16'))';
	AirspeedSettings.SamplePeriod = double(typecast(buffer(mcolon(AirspeedSettingsFidIdx + 14, AirspeedSettingsFidIdx + 14)), 'uint8'))';
	AirspeedSettings.AirspeedSensorType = double(typecast(buffer(mcolon(AirspeedSettingsFidIdx + 15, AirspeedSettingsFidIdx + 15)), 'uint8'))';

% AirspeedState typecasting
	AirspeedState.timestamp = double(typecast(buffer(mcolon(AirspeedStateFidIdx - headerLen - oplHeaderLen, AirspeedStateFidIdx + 3 - headerLen - oplHeaderLen)), 'uint32'))';
	AirspeedState.CalibratedAirspeed = double(typecast(buffer(mcolon(AirspeedStateFidIdx + 0, AirspeedStateFidIdx + 3)), 'single'))';
	AirspeedState.TrueAirspeed = double(typecast(buffer(mcolon(AirspeedStateFidIdx + 4, AirspeedStateFidIdx + 7)), 'single'))';

% AltitudeFilterSettings typecasting
	AltitudeFilterSettings.timestamp = double(typecast(buffer(mcolon(AltitudeFilterSettingsFidIdx - headerLen - oplHeaderLen, AltitudeFilterSettingsFidIdx + 3 - headerLen - oplHeaderLen)), 'uint32'))';
	AltitudeFilterSettings.AccelLowPassKp = double(typecast(buffer(mcolon(AltitudeFilterSettingsFidIdx + 0, AltitudeFilterSettingsFidIdx + 3)), 'single'))';
	AltitudeFilterSettings.AccelDriftKi = double(typecast(buffer(mcolon(AltitudeFilterSettingsFidIdx + 4, AltitudeFilterSettingsFidIdx + 7)), 'single'))';
	AltitudeFilterSettings.InitializationAccelDriftKi = double(typecast(buffer(mcolon(AltitudeFilterSettingsFidIdx + 8, AltitudeFilterSettingsFidIdx + 11)), 'single'))';
	AltitudeFilterSettings.BaroKp = double(typecast(buffer(mcolon(AltitudeFilterSettingsFidIdx + 12, AltitudeFilterSettingsFidIdx + 15)), 'single'))';

% AltitudeHoldSettings typecasting
	AltitudeHoldSettings.timestamp = double(typecast(buffer(mcolon(AltitudeHoldSettingsFidIdx - headerLen - oplHeaderLen, AltitudeHoldSettingsFidIdx + 3 - headerLen - oplHeaderLen)), 'uint32'))';
	AltitudeHoldSettings.ThrustRate = double(typecast(buffer(mcolon(AltitudeHoldSettingsFidIdx + 0, AltitudeHoldSettingsFidIdx + 3)), 'single'))';
	AltitudeHoldSettings.ThrustLimits = reshape(double(typecast(buffer(mcolon(AltitudeHoldSettingsFidIdx + 4, AltitudeHoldSettingsFidIdx + 15)), 'single')), 3, [] );
	AltitudeHoldSettings.VerticalPosP = double(typecast(buffer(mcolon(AltitudeHoldSettingsFidIdx + 16, AltitudeHoldSettingsFidIdx + 19)), 'single'))';
	AltitudeHoldSettings.VerticalVelPID = reshape(double(typecast(buffer(mcolon(AltitudeHoldSettingsFidIdx + 20, AltitudeHoldSettingsFidIdx + 35)), 'single')), 4, [] );
	AltitudeHoldSettings.CutThrustWhenZero = double(typecast(buffer(mcolon(AltitudeHoldSettingsFidIdx + 36, AltitudeHoldSettingsFidIdx + 36)), 'uint8'))';
	AltitudeHoldSettings.ThrustExp = double(typecast(buffer(mcolon(AltitudeHoldSettingsFidIdx + 37, AltitudeHoldSettingsFidIdx + 37)), 'uint8'))';

% AltitudeHoldStatus typecasting
	AltitudeHoldStatus.timestamp = double(typecast(buffer(mcolon(AltitudeHoldStatusFidIdx - headerLen - oplHeaderLen, AltitudeHoldStatusFidIdx + 3 - headerLen - oplHeaderLen)), 'uint32'))';
	AltitudeHoldStatus.VelocityDesired = double(typecast(buffer(mcolon(AltitudeHoldStatusFidIdx + 0, AltitudeHoldStatusFidIdx + 3)), 'single'))';
	AltitudeHoldStatus.ThrustDemand = double(typecast(buffer(mcolon(AltitudeHoldStatusFidIdx + 4, AltitudeHoldStatusFidIdx + 7)), 'single'))';
	AltitudeHoldStatus.State = double(typecast(buffer(mcolon(AltitudeHoldStatusFidIdx + 8, AltitudeHoldStatusFidIdx + 8)), 'uint8'))';

% AttitudeSettings typecasting
	AttitudeSettings.timestamp = double(typecast(buffer(mcolon(AttitudeSettingsFidIdx - headerLen - oplHeaderLen, AttitudeSettingsFidIdx + 3 - headerLen - oplHeaderLen)), 'uint32'))';
	AttitudeSettings.BoardRotation = reshape(double(typecast(buffer(mcolon(AttitudeSettingsFidIdx + 0, AttitudeSettingsFidIdx + 11)), 'single')), 3, [] );
	AttitudeSettings.BoardLevelTrim = reshape(double(typecast(buffer(mcolon(AttitudeSettingsFidIdx + 12, AttitudeSettingsFidIdx + 19)), 'single')), 2, [] );
	AttitudeSettings.AccelKp = double(typecast(buffer(mcolon(AttitudeSettingsFidIdx + 20, AttitudeSettingsFidIdx + 23)), 'single'))';
	AttitudeSettings.AccelKi = double(typecast(buffer(mcolon(AttitudeSettingsFidIdx + 24, AttitudeSettingsFidIdx + 27)), 'single'))';
	AttitudeSettings.MagKi = double(typecast(buffer(mcolon(AttitudeSettingsFidIdx + 28, AttitudeSettingsFidIdx + 31)), 'single'))';
	AttitudeSettings.MagKp = double(typecast(buffer(mcolon(AttitudeSettingsFidIdx + 32, AttitudeSettingsFidIdx + 35)), 'single'))';
	AttitudeSettings.AccelTau = double(typecast(buffer(mcolon(AttitudeSettingsFidIdx + 36, AttitudeSettingsFidIdx + 39)), 'single'))';
	AttitudeSettings.YawBiasRate = double(typecast(buffer(mcolon(AttitudeSettingsFidIdx + 40, AttitudeSettingsFidIdx + 43)), 'single'))';
	AttitudeSettings.BoardSteadyMaxVariance = double(typecast(buffer(mcolon(AttitudeSettingsFidIdx + 44, AttitudeSettingsFidIdx + 47)), 'single'))';
	AttitudeSettings.ZeroDuringArming = double(typecast(buffer(mcolon(AttitudeSettingsFidIdx + 48, AttitudeSettingsFidIdx + 48)), 'uint8'))';
	AttitudeSettings.BiasCorrectGyro = double(typecast(buffer(mcolon(AttitudeSettingsFidIdx + 49, AttitudeSettingsFidIdx + 49)), 'uint8'))';
	AttitudeSettings.InitialZeroWhenBoardSteady = double(typecast(buffer(mcolon(AttitudeSettingsFidIdx + 50, AttitudeSettingsFidIdx + 50)), 'uint8'))';
	AttitudeSettings.TrimFlight = double(typecast(buffer(mcolon(AttitudeSettingsFidIdx + 51, AttitudeSettingsFidIdx + 51)), 'uint8'))';

% AttitudeSimulated typecasting
	AttitudeSimulated.timestamp = double(typecast(buffer(mcolon(AttitudeSimulatedFidIdx - headerLen - oplHeaderLen, AttitudeSimulatedFidIdx + 3 - headerLen - oplHeaderLen)), 'uint32'))';
	AttitudeSimulated.q1 = double(typecast(buffer(mcolon(AttitudeSimulatedFidIdx + 0, AttitudeSimulatedFidIdx + 3)), 'single'))';
	AttitudeSimulated.q2 = double(typecast(buffer(mcolon(AttitudeSimulatedFidIdx + 4, AttitudeSimulatedFidIdx + 7)), 'single'))';
	AttitudeSimulated.q3 = double(typecast(buffer(mcolon(AttitudeSimulatedFidIdx + 8, AttitudeSimulatedFidIdx + 11)), 'single'))';
	AttitudeSimulated.q4 = double(typecast(buffer(mcolon(AttitudeSimulatedFidIdx + 12, AttitudeSimulatedFidIdx + 15)), 'single'))';
	AttitudeSimulated.Roll = double(typecast(buffer(mcolon(AttitudeSimulatedFidIdx + 16, AttitudeSimulatedFidIdx + 19)), 'single'))';
	AttitudeSimulated.Pitch = double(typecast(buffer(mcolon(AttitudeSimulatedFidIdx + 20, AttitudeSimulatedFidIdx + 23)), 'single'))';
	AttitudeSimulated.Yaw = double(typecast(buffer(mcolon(AttitudeSimulatedFidIdx + 24, AttitudeSimulatedFidIdx + 27)), 'single'))';
	AttitudeSimulated.Velocity = reshape(double(typecast(buffer(mcolon(AttitudeSimulatedFidIdx + 28, AttitudeSimulatedFidIdx + 39)), 'single')), 3, [] );
	AttitudeSimulated.Position = reshape(double(typecast(buffer(mcolon(AttitudeSimulatedFidIdx + 40, AttitudeSimulatedFidIdx + 51)), 'single')), 3, [] );

% AttitudeState typecasting
	AttitudeState.timestamp = double(typecast(buffer(mcolon(AttitudeStateFidIdx - headerLen - oplHeaderLen, AttitudeStateFidIdx + 3 - headerLen - oplHeaderLen)), 'uint32'))';
	AttitudeState.q1 = double(typecast(buffer(mcolon(AttitudeStateFidIdx + 0, AttitudeStateFidIdx + 3)), 'single'))';
	AttitudeState.q2 = double(typecast(buffer(mcolon(AttitudeStateFidIdx + 4, AttitudeStateFidIdx + 7)), 'single'))';
	AttitudeState.q3 = double(typecast(buffer(mcolon(AttitudeStateFidIdx + 8, AttitudeStateFidIdx + 11)), 'single'))';
	AttitudeState.q4 = double(typecast(buffer(mcolon(AttitudeStateFidIdx + 12, AttitudeStateFidIdx + 15)), 'single'))';
	AttitudeState.Roll = double(typecast(buffer(mcolon(AttitudeStateFidIdx + 16, AttitudeStateFidIdx + 19)), 'single'))';
	AttitudeState.Pitch = double(typecast(buffer(mcolon(AttitudeStateFidIdx + 20, AttitudeStateFidIdx + 23)), 'single'))';
	AttitudeState.Yaw = double(typecast(buffer(mcolon(AttitudeStateFidIdx + 24, AttitudeStateFidIdx + 27)), 'single'))';

% AuxMagSensor typecasting
	AuxMagSensor.timestamp = double(typecast(buffer(mcolon(AuxMagSensorFidIdx - headerLen - oplHeaderLen, AuxMagSensorFidIdx + 3 - headerLen - oplHeaderLen)), 'uint32'))';
	AuxMagSensor.x = double(typecast(buffer(mcolon(AuxMagSensorFidIdx + 0, AuxMagSensorFidIdx + 3)), 'single'))';
	AuxMagSensor.y = double(typecast(buffer(mcolon(AuxMagSensorFidIdx + 4, AuxMagSensorFidIdx + 7)), 'single'))';
	AuxMagSensor.z = double(typecast(buffer(mcolon(AuxMagSensorFidIdx + 8, AuxMagSensorFidIdx + 11)), 'single'))';
	AuxMagSensor.Status = double(typecast(buffer(mcolon(AuxMagSensorFidIdx + 12, AuxMagSensorFidIdx + 12)), 'uint8'))';

% AuxMagSettings typecasting
	AuxMagSettings.timestamp = double(typecast(buffer(mcolon(AuxMagSettingsFidIdx - headerLen - oplHeaderLen, AuxMagSettingsFidIdx + 3 - headerLen - oplHeaderLen)), 'uint32'))';
	AuxMagSettings.mag_bias = reshape(double(typecast(buffer(mcolon(AuxMagSettingsFidIdx + 0, AuxMagSettingsFidIdx + 11)), 'single')), 3, [] );
	AuxMagSettings.mag_transform = reshape(double(typecast(buffer(mcolon(AuxMagSettingsFidIdx + 12, AuxMagSettingsFidIdx + 47)), 'single')), 9, [] );
	AuxMagSettings.MagBiasNullingRate = double(typecast(buffer(mcolon(AuxMagSettingsFidIdx + 48, AuxMagSettingsFidIdx + 51)), 'single'))';
	AuxMagSettings.BoardRotation = reshape(double(typecast(buffer(mcolon(AuxMagSettingsFidIdx + 52, AuxMagSettingsFidIdx + 57)), 'int16')), 3, [] );
	AuxMagSettings.Type = double(typecast(buffer(mcolon(AuxMagSettingsFidIdx + 58, AuxMagSettingsFidIdx + 58)), 'uint8'))';
	AuxMagSettings.Usage = double(typecast(buffer(mcolon(AuxMagSettingsFidIdx + 59, AuxMagSettingsFidIdx + 59)), 'uint8'))';

% BaroSensor typecasting
	BaroSensor.timestamp = double(typecast(buffer(mcolon(BaroSensorFidIdx - headerLen - oplHeaderLen, BaroSensorFidIdx + 3 - headerLen - oplHeaderLen)), 'uint32'))';
	BaroSensor.Altitude = double(typecast(buffer(mcolon(BaroSensorFidIdx + 0, BaroSensorFidIdx + 3)), 'single'))';
	BaroSensor.Temperature = double(typecast(buffer(mcolon(BaroSensorFidIdx + 4, BaroSensorFidIdx + 7)), 'single'))';
	BaroSensor.Pressure = double(typecast(buffer(mcolon(BaroSensorFidIdx + 8, BaroSensorFidIdx + 11)), 'single'))';

% CallbackInfo typecasting
	CallbackInfo.timestamp = double(typecast(buffer(mcolon(CallbackInfoFidIdx - headerLen - oplHeaderLen, CallbackInfoFidIdx + 3 - headerLen - oplHeaderLen)), 'uint32'))';
	CallbackInfo.RunningTime = reshape(double(typecast(buffer(mcolon(CallbackInfoFidIdx + 0, CallbackInfoFidIdx + 43)), 'uint32')), 11, [] );
	CallbackInfo.StackRemaining = reshape(double(typecast(buffer(mcolon(CallbackInfoFidIdx + 44, CallbackInfoFidIdx + 65)), 'int16')), 11, [] );
	CallbackInfo.Running = reshape(double(typecast(buffer(mcolon(CallbackInfoFidIdx + 66, CallbackInfoFidIdx + 76)), 'uint8')), 11, [] );

% CameraControlActivity typecasting
	CameraControlActivity.timestamp = double(typecast(buffer(mcolon(CameraControlActivityFidIdx - headerLen - oplHeaderLen, CameraControlActivityFidIdx + 3 - headerLen - oplHeaderLen)), 'uint32'))';
	CameraControlActivity.Latitude = double(typecast(buffer(mcolon(CameraControlActivityFidIdx + 0, CameraControlActivityFidIdx + 3)), 'int32'))';
	CameraControlActivity.Longitude = double(typecast(buffer(mcolon(CameraControlActivityFidIdx + 4, CameraControlActivityFidIdx + 7)), 'int32'))';
	CameraControlActivity.Altitude = double(typecast(buffer(mcolon(CameraControlActivityFidIdx + 8, CameraControlActivityFidIdx + 11)), 'single'))';
	CameraControlActivity.Roll = double(typecast(buffer(mcolon(CameraControlActivityFidIdx + 12, CameraControlActivityFidIdx + 15)), 'single'))';
	CameraControlActivity.Pitch = double(typecast(buffer(mcolon(CameraControlActivityFidIdx + 16, CameraControlActivityFidIdx + 19)), 'single'))';
	CameraControlActivity.Yaw = double(typecast(buffer(mcolon(CameraControlActivityFidIdx + 20, CameraControlActivityFidIdx + 23)), 'single'))';
	CameraControlActivity.SystemTS = double(typecast(buffer(mcolon(CameraControlActivityFidIdx + 24, CameraControlActivityFidIdx + 27)), 'uint32'))';
	CameraControlActivity.ImageId = double(typecast(buffer(mcolon(CameraControlActivityFidIdx + 28, CameraControlActivityFidIdx + 29)), 'uint16'))';
	CameraControlActivity.TriggerYear = double(typecast(buffer(mcolon(CameraControlActivityFidIdx + 30, CameraControlActivityFidIdx + 31)), 'int16'))';
	CameraControlActivity.TriggerMillisecond = double(typecast(buffer(mcolon(CameraControlActivityFidIdx + 32, CameraControlActivityFidIdx + 33)), 'int16'))';
	CameraControlActivity.TriggerMonth = double(typecast(buffer(mcolon(CameraControlActivityFidIdx + 34, CameraControlActivityFidIdx + 34)), 'int8'))';
	CameraControlActivity.TriggerDay = double(typecast(buffer(mcolon(CameraControlActivityFidIdx + 35, CameraControlActivityFidIdx + 35)), 'int8'))';
	CameraControlActivity.TriggerHour = double(typecast(buffer(mcolon(CameraControlActivityFidIdx + 36, CameraControlActivityFidIdx + 36)), 'int8'))';
	CameraControlActivity.TriggerMinute = double(typecast(buffer(mcolon(CameraControlActivityFidIdx + 37, CameraControlActivityFidIdx + 37)), 'int8'))';
	CameraControlActivity.TriggerSecond = double(typecast(buffer(mcolon(CameraControlActivityFidIdx + 38, CameraControlActivityFidIdx + 38)), 'int8'))';
	CameraControlActivity.Activity = double(typecast(buffer(mcolon(CameraControlActivityFidIdx + 39, CameraControlActivityFidIdx + 39)), 'uint8'))';
	CameraControlActivity.Reason = double(typecast(buffer(mcolon(CameraControlActivityFidIdx + 40, CameraControlActivityFidIdx + 40)), 'uint8'))';

% CameraControlSettings typecasting
	CameraControlSettings.timestamp = double(typecast(buffer(mcolon(CameraControlSettingsFidIdx - headerLen - oplHeaderLen, CameraControlSettingsFidIdx + 3 - headerLen - oplHeaderLen)), 'uint32'))';
	CameraControlSettings.OutputValues = reshape(double(typecast(buffer(mcolon(CameraControlSettingsFidIdx + 0, CameraControlSettingsFidIdx + 11)), 'single')), 3, [] );
	CameraControlSettings.InputValues = reshape(double(typecast(buffer(mcolon(CameraControlSettingsFidIdx + 12, CameraControlSettingsFidIdx + 23)), 'single')), 3, [] );
	CameraControlSettings.TimeInterval = double(typecast(buffer(mcolon(CameraControlSettingsFidIdx + 24, CameraControlSettingsFidIdx + 27)), 'single'))';
	CameraControlSettings.SpaceInterval = double(typecast(buffer(mcolon(CameraControlSettingsFidIdx + 28, CameraControlSettingsFidIdx + 31)), 'single'))';
	CameraControlSettings.MinimumTimeInterval = double(typecast(buffer(mcolon(CameraControlSettingsFidIdx + 32, CameraControlSettingsFidIdx + 35)), 'single'))';
	CameraControlSettings.TriggerPulseWidth = double(typecast(buffer(mcolon(CameraControlSettingsFidIdx + 36, CameraControlSettingsFidIdx + 37)), 'uint16'))';
	CameraControlSettings.AutoTriggerInput = double(typecast(buffer(mcolon(CameraControlSettingsFidIdx + 38, CameraControlSettingsFidIdx + 38)), 'uint8'))';
	CameraControlSettings.ManualTriggerInput = double(typecast(buffer(mcolon(CameraControlSettingsFidIdx + 39, CameraControlSettingsFidIdx + 39)), 'uint8'))';
	CameraControlSettings.AutoTriggerMode = double(typecast(buffer(mcolon(CameraControlSettingsFidIdx + 40, CameraControlSettingsFidIdx + 40)), 'uint8'))';

% CameraDesired typecasting
	CameraDesired.timestamp = double(typecast(buffer(mcolon(CameraDesiredFidIdx - headerLen - oplHeaderLen, CameraDesiredFidIdx + 3 - headerLen - oplHeaderLen)), 'uint32'))';
	CameraDesired.RollOrServo1 = double(typecast(buffer(mcolon(CameraDesiredFidIdx + 0, CameraDesiredFidIdx + 3)), 'single'))';
	CameraDesired.PitchOrServo2 = double(typecast(buffer(mcolon(CameraDesiredFidIdx + 4, CameraDesiredFidIdx + 7)), 'single'))';
	CameraDesired.Yaw = double(typecast(buffer(mcolon(CameraDesiredFidIdx + 8, CameraDesiredFidIdx + 11)), 'single'))';
	CameraDesired.Trigger = double(typecast(buffer(mcolon(CameraDesiredFidIdx + 12, CameraDesiredFidIdx + 15)), 'single'))';

% CameraStabSettings typecasting
	CameraStabSettings.timestamp = double(typecast(buffer(mcolon(CameraStabSettingsFidIdx - headerLen - oplHeaderLen, CameraStabSettingsFidIdx + 3 - headerLen - oplHeaderLen)), 'uint32'))';
	CameraStabSettings.MaxAxisLockRate = double(typecast(buffer(mcolon(CameraStabSettingsFidIdx + 0, CameraStabSettingsFidIdx + 3)), 'single'))';
	CameraStabSettings.MaxAccel = double(typecast(buffer(mcolon(CameraStabSettingsFidIdx + 4, CameraStabSettingsFidIdx + 5)), 'uint16'))';
	CameraStabSettings.Input = reshape(double(typecast(buffer(mcolon(CameraStabSettingsFidIdx + 6, CameraStabSettingsFidIdx + 8)), 'uint8')), 3, [] );
	CameraStabSettings.InputRange = reshape(double(typecast(buffer(mcolon(CameraStabSettingsFidIdx + 9, CameraStabSettingsFidIdx + 11)), 'uint8')), 3, [] );
	CameraStabSettings.InputRate = reshape(double(typecast(buffer(mcolon(CameraStabSettingsFidIdx + 12, CameraStabSettingsFidIdx + 14)), 'uint8')), 3, [] );
	CameraStabSettings.StabilizationMode = reshape(double(typecast(buffer(mcolon(CameraStabSettingsFidIdx + 15, CameraStabSettingsFidIdx + 17)), 'uint8')), 3, [] );
	CameraStabSettings.OutputRange = reshape(double(typecast(buffer(mcolon(CameraStabSettingsFidIdx + 18, CameraStabSettingsFidIdx + 20)), 'uint8')), 3, [] );
	CameraStabSettings.ResponseTime = reshape(double(typecast(buffer(mcolon(CameraStabSettingsFidIdx + 21, CameraStabSettingsFidIdx + 23)), 'uint8')), 3, [] );
	CameraStabSettings.GimbalType = double(typecast(buffer(mcolon(CameraStabSettingsFidIdx + 24, CameraStabSettingsFidIdx + 24)), 'uint8'))';
	CameraStabSettings.FeedForward = reshape(double(typecast(buffer(mcolon(CameraStabSettingsFidIdx + 25, CameraStabSettingsFidIdx + 27)), 'uint8')), 3, [] );
	CameraStabSettings.AccelTime = reshape(double(typecast(buffer(mcolon(CameraStabSettingsFidIdx + 28, CameraStabSettingsFidIdx + 30)), 'uint8')), 3, [] );
	CameraStabSettings.DecelTime = reshape(double(typecast(buffer(mcolon(CameraStabSettingsFidIdx + 31, CameraStabSettingsFidIdx + 33)), 'uint8')), 3, [] );
	CameraStabSettings.Servo1PitchReverse = double(typecast(buffer(mcolon(CameraStabSettingsFidIdx + 34, CameraStabSettingsFidIdx + 34)), 'uint8'))';
	CameraStabSettings.Servo2PitchReverse = double(typecast(buffer(mcolon(CameraStabSettingsFidIdx + 35, CameraStabSettingsFidIdx + 35)), 'uint8'))';

% DebugLogControl typecasting
	DebugLogControl.timestamp = double(typecast(buffer(mcolon(DebugLogControlFidIdx - headerLen - oplHeaderLen, DebugLogControlFidIdx + 3 - headerLen - oplHeaderLen)), 'uint32'))';
	DebugLogControl.Flight = double(typecast(buffer(mcolon(DebugLogControlFidIdx + 0, DebugLogControlFidIdx + 1)), 'uint16'))';
	DebugLogControl.Entry = double(typecast(buffer(mcolon(DebugLogControlFidIdx + 2, DebugLogControlFidIdx + 3)), 'uint16'))';
	DebugLogControl.Operation = double(typecast(buffer(mcolon(DebugLogControlFidIdx + 4, DebugLogControlFidIdx + 4)), 'uint8'))';

% DebugLogEntry typecasting
	DebugLogEntry.timestamp = double(typecast(buffer(mcolon(DebugLogEntryFidIdx - headerLen - oplHeaderLen, DebugLogEntryFidIdx + 3 - headerLen - oplHeaderLen)), 'uint32'))';
	DebugLogEntry.FlightTime = double(typecast(buffer(mcolon(DebugLogEntryFidIdx + 0, DebugLogEntryFidIdx + 3)), 'uint32'))';
	DebugLogEntry.ObjectID = double(typecast(buffer(mcolon(DebugLogEntryFidIdx + 4, DebugLogEntryFidIdx + 7)), 'uint32'))';
	DebugLogEntry.Flight = double(typecast(buffer(mcolon(DebugLogEntryFidIdx + 8, DebugLogEntryFidIdx + 9)), 'uint16'))';
	DebugLogEntry.Entry = double(typecast(buffer(mcolon(DebugLogEntryFidIdx + 10, DebugLogEntryFidIdx + 11)), 'uint16'))';
	DebugLogEntry.InstanceID = double(typecast(buffer(mcolon(DebugLogEntryFidIdx + 12, DebugLogEntryFidIdx + 13)), 'uint16'))';
	DebugLogEntry.Size = double(typecast(buffer(mcolon(DebugLogEntryFidIdx + 14, DebugLogEntryFidIdx + 15)), 'uint16'))';
	DebugLogEntry.Type = double(typecast(buffer(mcolon(DebugLogEntryFidIdx + 16, DebugLogEntryFidIdx + 16)), 'uint8'))';
	DebugLogEntry.Data = reshape(double(typecast(buffer(mcolon(DebugLogEntryFidIdx + 17, DebugLogEntryFidIdx + 216)), 'uint8')), 200, [] );

% DebugLogSettings typecasting
	DebugLogSettings.timestamp = double(typecast(buffer(mcolon(DebugLogSettingsFidIdx - headerLen - oplHeaderLen, DebugLogSettingsFidIdx + 3 - headerLen - oplHeaderLen)), 'uint32'))';
	DebugLogSettings.LoggingEnabled = double(typecast(buffer(mcolon(DebugLogSettingsFidIdx + 0, DebugLogSettingsFidIdx + 0)), 'uint8'))';

% DebugLogStatus typecasting
	DebugLogStatus.timestamp = double(typecast(buffer(mcolon(DebugLogStatusFidIdx - headerLen - oplHeaderLen, DebugLogStatusFidIdx + 3 - headerLen - oplHeaderLen)), 'uint32'))';
	DebugLogStatus.Flight = double(typecast(buffer(mcolon(DebugLogStatusFidIdx + 0, DebugLogStatusFidIdx + 1)), 'uint16'))';
	DebugLogStatus.Entry = double(typecast(buffer(mcolon(DebugLogStatusFidIdx + 2, DebugLogStatusFidIdx + 3)), 'uint16'))';
	DebugLogStatus.UsedSlots = double(typecast(buffer(mcolon(DebugLogStatusFidIdx + 4, DebugLogStatusFidIdx + 5)), 'uint16'))';
	DebugLogStatus.FreeSlots = double(typecast(buffer(mcolon(DebugLogStatusFidIdx + 6, DebugLogStatusFidIdx + 7)), 'uint16'))';

% EKFConfiguration typecasting
	EKFConfiguration.timestamp = double(typecast(buffer(mcolon(EKFConfigurationFidIdx - headerLen - oplHeaderLen, EKFConfigurationFidIdx + 3 - headerLen - oplHeaderLen)), 'uint32'))';
	EKFConfiguration.P = reshape(double(typecast(buffer(mcolon(EKFConfigurationFidIdx + 0, EKFConfigurationFidIdx + 51)), 'single')), 13, [] );
	EKFConfiguration.Q = reshape(double(typecast(buffer(mcolon(EKFConfigurationFidIdx + 52, EKFConfigurationFidIdx + 87)), 'single')), 9, [] );
	EKFConfiguration.R = reshape(double(typecast(buffer(mcolon(EKFConfigurationFidIdx + 88, EKFConfigurationFidIdx + 127)), 'single')), 10, [] );
	EKFConfiguration.FakeR = reshape(double(typecast(buffer(mcolon(EKFConfigurationFidIdx + 128, EKFConfigurationFidIdx + 139)), 'single')), 3, [] );

% EKFStateVariance typecasting
	EKFStateVariance.timestamp = double(typecast(buffer(mcolon(EKFStateVarianceFidIdx - headerLen - oplHeaderLen, EKFStateVarianceFidIdx + 3 - headerLen - oplHeaderLen)), 'uint32'))';
	EKFStateVariance.P = reshape(double(typecast(buffer(mcolon(EKFStateVarianceFidIdx + 0, EKFStateVarianceFidIdx + 51)), 'single')), 13, [] );

% FaultSettings typecasting
	FaultSettings.timestamp = double(typecast(buffer(mcolon(FaultSettingsFidIdx - headerLen - oplHeaderLen, FaultSettingsFidIdx + 3 - headerLen - oplHeaderLen)), 'uint32'))';
	FaultSettings.ActivateFault = double(typecast(buffer(mcolon(FaultSettingsFidIdx + 0, FaultSettingsFidIdx + 0)), 'uint8'))';

% FirmwareIAPObj typecasting
	FirmwareIAPObj.timestamp = double(typecast(buffer(mcolon(FirmwareIAPObjFidIdx - headerLen - oplHeaderLen, FirmwareIAPObjFidIdx + 3 - headerLen - oplHeaderLen)), 'uint32'))';
	FirmwareIAPObj.crc = double(typecast(buffer(mcolon(FirmwareIAPObjFidIdx + 0, FirmwareIAPObjFidIdx + 3)), 'uint32'))';
	FirmwareIAPObj.Command = double(typecast(buffer(mcolon(FirmwareIAPObjFidIdx + 4, FirmwareIAPObjFidIdx + 5)), 'uint16'))';
	FirmwareIAPObj.BoardRevision = double(typecast(buffer(mcolon(FirmwareIAPObjFidIdx + 6, FirmwareIAPObjFidIdx + 7)), 'uint16'))';
	FirmwareIAPObj.Description = reshape(double(typecast(buffer(mcolon(FirmwareIAPObjFidIdx + 8, FirmwareIAPObjFidIdx + 107)), 'uint8')), 100, [] );
	FirmwareIAPObj.CPUSerial = reshape(double(typecast(buffer(mcolon(FirmwareIAPObjFidIdx + 108, FirmwareIAPObjFidIdx + 119)), 'uint8')), 12, [] );
	FirmwareIAPObj.BoardType = double(typecast(buffer(mcolon(FirmwareIAPObjFidIdx + 120, FirmwareIAPObjFidIdx + 120)), 'uint8'))';
	FirmwareIAPObj.BootloaderRevision = double(typecast(buffer(mcolon(FirmwareIAPObjFidIdx + 121, FirmwareIAPObjFidIdx + 121)), 'uint8'))';
	FirmwareIAPObj.ArmReset = double(typecast(buffer(mcolon(FirmwareIAPObjFidIdx + 122, FirmwareIAPObjFidIdx + 122)), 'uint8'))';

% FixedWingPathFollowerSettings typecasting
	FixedWingPathFollowerSettings.timestamp = double(typecast(buffer(mcolon(FixedWingPathFollowerSettingsFidIdx - headerLen - oplHeaderLen, FixedWingPathFollowerSettingsFidIdx + 3 - headerLen - oplHeaderLen)), 'uint32'))';
	FixedWingPathFollowerSettings.HorizontalVelMax = double(typecast(buffer(mcolon(FixedWingPathFollowerSettingsFidIdx + 0, FixedWingPathFollowerSettingsFidIdx + 3)), 'single'))';
	FixedWingPathFollowerSettings.HorizontalVelMin = double(typecast(buffer(mcolon(FixedWingPathFollowerSettingsFidIdx + 4, FixedWingPathFollowerSettingsFidIdx + 7)), 'single'))';
	FixedWingPathFollowerSettings.VerticalVelMax = double(typecast(buffer(mcolon(FixedWingPathFollowerSettingsFidIdx + 8, FixedWingPathFollowerSettingsFidIdx + 11)), 'single'))';
	FixedWingPathFollowerSettings.CourseFeedForward = double(typecast(buffer(mcolon(FixedWingPathFollowerSettingsFidIdx + 12, FixedWingPathFollowerSettingsFidIdx + 15)), 'single'))';
	FixedWingPathFollowerSettings.ReverseCourseOverlap = double(typecast(buffer(mcolon(FixedWingPathFollowerSettingsFidIdx + 16, FixedWingPathFollowerSettingsFidIdx + 19)), 'single'))';
	FixedWingPathFollowerSettings.HorizontalPosP = double(typecast(buffer(mcolon(FixedWingPathFollowerSettingsFidIdx + 20, FixedWingPathFollowerSettingsFidIdx + 23)), 'single'))';
	FixedWingPathFollowerSettings.VerticalPosP = double(typecast(buffer(mcolon(FixedWingPathFollowerSettingsFidIdx + 24, FixedWingPathFollowerSettingsFidIdx + 27)), 'single'))';
	FixedWingPathFollowerSettings.CoursePI = reshape(double(typecast(buffer(mcolon(FixedWingPathFollowerSettingsFidIdx + 28, FixedWingPathFollowerSettingsFidIdx + 39)), 'single')), 3, [] );
	FixedWingPathFollowerSettings.SpeedPI = reshape(double(typecast(buffer(mcolon(FixedWingPathFollowerSettingsFidIdx + 40, FixedWingPathFollowerSettingsFidIdx + 51)), 'single')), 3, [] );
	FixedWingPathFollowerSettings.VerticalToPitchCrossFeed = reshape(double(typecast(buffer(mcolon(FixedWingPathFollowerSettingsFidIdx + 52, FixedWingPathFollowerSettingsFidIdx + 59)), 'single')), 2, [] );
	FixedWingPathFollowerSettings.AirspeedToPowerCrossFeed = reshape(double(typecast(buffer(mcolon(FixedWingPathFollowerSettingsFidIdx + 60, FixedWingPathFollowerSettingsFidIdx + 67)), 'single')), 2, [] );
	FixedWingPathFollowerSettings.PowerPI = reshape(double(typecast(buffer(mcolon(FixedWingPathFollowerSettingsFidIdx + 68, FixedWingPathFollowerSettingsFidIdx + 79)), 'single')), 3, [] );
	FixedWingPathFollowerSettings.RollLimit = reshape(double(typecast(buffer(mcolon(FixedWingPathFollowerSettingsFidIdx + 80, FixedWingPathFollowerSettingsFidIdx + 91)), 'single')), 3, [] );
	FixedWingPathFollowerSettings.PitchLimit = reshape(double(typecast(buffer(mcolon(FixedWingPathFollowerSettingsFidIdx + 92, FixedWingPathFollowerSettingsFidIdx + 103)), 'single')), 3, [] );
	FixedWingPathFollowerSettings.ThrustLimit = reshape(double(typecast(buffer(mcolon(FixedWingPathFollowerSettingsFidIdx + 104, FixedWingPathFollowerSettingsFidIdx + 115)), 'single')), 3, [] );
	FixedWingPathFollowerSettings.Safetymargins = reshape(double(typecast(buffer(mcolon(FixedWingPathFollowerSettingsFidIdx + 116, FixedWingPathFollowerSettingsFidIdx + 151)), 'single')), 9, [] );
	FixedWingPathFollowerSettings.SafetyCutoffLimits = reshape(double(typecast(buffer(mcolon(FixedWingPathFollowerSettingsFidIdx + 152, FixedWingPathFollowerSettingsFidIdx + 167)), 'single')), 4, [] );
	FixedWingPathFollowerSettings.TakeOffPitch = double(typecast(buffer(mcolon(FixedWingPathFollowerSettingsFidIdx + 168, FixedWingPathFollowerSettingsFidIdx + 171)), 'single'))';
	FixedWingPathFollowerSettings.LandingPitch = double(typecast(buffer(mcolon(FixedWingPathFollowerSettingsFidIdx + 172, FixedWingPathFollowerSettingsFidIdx + 175)), 'single'))';
	FixedWingPathFollowerSettings.UpdatePeriod = double(typecast(buffer(mcolon(FixedWingPathFollowerSettingsFidIdx + 176, FixedWingPathFollowerSettingsFidIdx + 179)), 'int32'))';
	FixedWingPathFollowerSettings.UseAirspeedSensor = double(typecast(buffer(mcolon(FixedWingPathFollowerSettingsFidIdx + 180, FixedWingPathFollowerSettingsFidIdx + 180)), 'uint8'))';

% FixedWingPathFollowerStatus typecasting
	FixedWingPathFollowerStatus.timestamp = double(typecast(buffer(mcolon(FixedWingPathFollowerStatusFidIdx - headerLen - oplHeaderLen, FixedWingPathFollowerStatusFidIdx + 3 - headerLen - oplHeaderLen)), 'uint32'))';
	FixedWingPathFollowerStatus.Error = reshape(double(typecast(buffer(mcolon(FixedWingPathFollowerStatusFidIdx + 0, FixedWingPathFollowerStatusFidIdx + 11)), 'single')), 3, [] );
	FixedWingPathFollowerStatus.ErrorInt = reshape(double(typecast(buffer(mcolon(FixedWingPathFollowerStatusFidIdx + 12, FixedWingPathFollowerStatusFidIdx + 23)), 'single')), 3, [] );
	FixedWingPathFollowerStatus.Command = reshape(double(typecast(buffer(mcolon(FixedWingPathFollowerStatusFidIdx + 24, FixedWingPathFollowerStatusFidIdx + 35)), 'single')), 3, [] );
	FixedWingPathFollowerStatus.Errors = reshape(double(typecast(buffer(mcolon(FixedWingPathFollowerStatusFidIdx + 36, FixedWingPathFollowerStatusFidIdx + 45)), 'uint8')), 10, [] );

% FlightBatterySettings typecasting
	FlightBatterySettings.timestamp = double(typecast(buffer(mcolon(FlightBatterySettingsFidIdx - headerLen - oplHeaderLen, FlightBatterySettingsFidIdx + 3 - headerLen - oplHeaderLen)), 'uint32'))';
	FlightBatterySettings.Capacity = double(typecast(buffer(mcolon(FlightBatterySettingsFidIdx + 0, FlightBatterySettingsFidIdx + 3)), 'uint32'))';
	FlightBatterySettings.CellVoltageThresholds = reshape(double(typecast(buffer(mcolon(FlightBatterySettingsFidIdx + 4, FlightBatterySettingsFidIdx + 11)), 'single')), 2, [] );
	FlightBatterySettings.SensorCalibrations = reshape(double(typecast(buffer(mcolon(FlightBatterySettingsFidIdx + 12, FlightBatterySettingsFidIdx + 27)), 'single')), 4, [] );
	FlightBatterySettings.Type = double(typecast(buffer(mcolon(FlightBatterySettingsFidIdx + 28, FlightBatterySettingsFidIdx + 28)), 'uint8'))';
	FlightBatterySettings.NbCells = double(typecast(buffer(mcolon(FlightBatterySettingsFidIdx + 29, FlightBatterySettingsFidIdx + 29)), 'uint8'))';
	FlightBatterySettings.ResetConsumedEnergy = double(typecast(buffer(mcolon(FlightBatterySettingsFidIdx + 30, FlightBatterySettingsFidIdx + 30)), 'uint8'))';

% FlightBatteryState typecasting
	FlightBatteryState.timestamp = double(typecast(buffer(mcolon(FlightBatteryStateFidIdx - headerLen - oplHeaderLen, FlightBatteryStateFidIdx + 3 - headerLen - oplHeaderLen)), 'uint32'))';
	FlightBatteryState.Voltage = double(typecast(buffer(mcolon(FlightBatteryStateFidIdx + 0, FlightBatteryStateFidIdx + 3)), 'single'))';
	FlightBatteryState.Current = double(typecast(buffer(mcolon(FlightBatteryStateFidIdx + 4, FlightBatteryStateFidIdx + 7)), 'single'))';
	FlightBatteryState.BoardSupplyVoltage = double(typecast(buffer(mcolon(FlightBatteryStateFidIdx + 8, FlightBatteryStateFidIdx + 11)), 'single'))';
	FlightBatteryState.PeakCurrent = double(typecast(buffer(mcolon(FlightBatteryStateFidIdx + 12, FlightBatteryStateFidIdx + 15)), 'single'))';
	FlightBatteryState.AvgCurrent = double(typecast(buffer(mcolon(FlightBatteryStateFidIdx + 16, FlightBatteryStateFidIdx + 19)), 'single'))';
	FlightBatteryState.ConsumedEnergy = double(typecast(buffer(mcolon(FlightBatteryStateFidIdx + 20, FlightBatteryStateFidIdx + 23)), 'single'))';
	FlightBatteryState.EstimatedFlightTime = double(typecast(buffer(mcolon(FlightBatteryStateFidIdx + 24, FlightBatteryStateFidIdx + 27)), 'single'))';
	FlightBatteryState.NbCells = double(typecast(buffer(mcolon(FlightBatteryStateFidIdx + 28, FlightBatteryStateFidIdx + 28)), 'uint8'))';
	FlightBatteryState.NbCellsAutodetected = double(typecast(buffer(mcolon(FlightBatteryStateFidIdx + 29, FlightBatteryStateFidIdx + 29)), 'uint8'))';

% FlightModeSettings typecasting
	FlightModeSettings.timestamp = double(typecast(buffer(mcolon(FlightModeSettingsFidIdx - headerLen - oplHeaderLen, FlightModeSettingsFidIdx + 3 - headerLen - oplHeaderLen)), 'uint32'))';
	FlightModeSettings.ReturnToBaseAltitudeOffset = double(typecast(buffer(mcolon(FlightModeSettingsFidIdx + 0, FlightModeSettingsFidIdx + 3)), 'single'))';
	FlightModeSettings.ReturnToBaseVelocity = double(typecast(buffer(mcolon(FlightModeSettingsFidIdx + 4, FlightModeSettingsFidIdx + 7)), 'single'))';
	FlightModeSettings.LandingVelocity = double(typecast(buffer(mcolon(FlightModeSettingsFidIdx + 8, FlightModeSettingsFidIdx + 11)), 'single'))';
	FlightModeSettings.AutoTakeOffVelocity = double(typecast(buffer(mcolon(FlightModeSettingsFidIdx + 12, FlightModeSettingsFidIdx + 15)), 'single'))';
	FlightModeSettings.AutoTakeOffHeight = double(typecast(buffer(mcolon(FlightModeSettingsFidIdx + 16, FlightModeSettingsFidIdx + 19)), 'single'))';
	FlightModeSettings.PositionHoldOffset = reshape(double(typecast(buffer(mcolon(FlightModeSettingsFidIdx + 20, FlightModeSettingsFidIdx + 27)), 'single')), 2, [] );
	FlightModeSettings.VarioControlLowPassAlpha = double(typecast(buffer(mcolon(FlightModeSettingsFidIdx + 28, FlightModeSettingsFidIdx + 31)), 'single'))';
	FlightModeSettings.ArmedTimeout = double(typecast(buffer(mcolon(FlightModeSettingsFidIdx + 32, FlightModeSettingsFidIdx + 33)), 'uint16'))';
	FlightModeSettings.ArmingSequenceTime = double(typecast(buffer(mcolon(FlightModeSettingsFidIdx + 34, FlightModeSettingsFidIdx + 35)), 'uint16'))';
	FlightModeSettings.DisarmingSequenceTime = double(typecast(buffer(mcolon(FlightModeSettingsFidIdx + 36, FlightModeSettingsFidIdx + 37)), 'uint16'))';
	FlightModeSettings.Arming = double(typecast(buffer(mcolon(FlightModeSettingsFidIdx + 38, FlightModeSettingsFidIdx + 38)), 'uint8'))';
	FlightModeSettings.Stabilization1Settings = reshape(double(typecast(buffer(mcolon(FlightModeSettingsFidIdx + 39, FlightModeSettingsFidIdx + 42)), 'uint8')), 4, [] );
	FlightModeSettings.Stabilization2Settings = reshape(double(typecast(buffer(mcolon(FlightModeSettingsFidIdx + 43, FlightModeSettingsFidIdx + 46)), 'uint8')), 4, [] );
	FlightModeSettings.Stabilization3Settings = reshape(double(typecast(buffer(mcolon(FlightModeSettingsFidIdx + 47, FlightModeSettingsFidIdx + 50)), 'uint8')), 4, [] );
	FlightModeSettings.Stabilization4Settings = reshape(double(typecast(buffer(mcolon(FlightModeSettingsFidIdx + 51, FlightModeSettingsFidIdx + 54)), 'uint8')), 4, [] );
	FlightModeSettings.Stabilization5Settings = reshape(double(typecast(buffer(mcolon(FlightModeSettingsFidIdx + 55, FlightModeSettingsFidIdx + 58)), 'uint8')), 4, [] );
	FlightModeSettings.Stabilization6Settings = reshape(double(typecast(buffer(mcolon(FlightModeSettingsFidIdx + 59, FlightModeSettingsFidIdx + 62)), 'uint8')), 4, [] );
	FlightModeSettings.FlightModePosition = reshape(double(typecast(buffer(mcolon(FlightModeSettingsFidIdx + 63, FlightModeSettingsFidIdx + 68)), 'uint8')), 6, [] );
	FlightModeSettings.AlwaysStabilizeWhenArmedSwitch = double(typecast(buffer(mcolon(FlightModeSettingsFidIdx + 69, FlightModeSettingsFidIdx + 69)), 'uint8'))';
	FlightModeSettings.DisableSanityChecks = double(typecast(buffer(mcolon(FlightModeSettingsFidIdx + 70, FlightModeSettingsFidIdx + 70)), 'uint8'))';
	FlightModeSettings.ReturnToBaseNextCommand = double(typecast(buffer(mcolon(FlightModeSettingsFidIdx + 71, FlightModeSettingsFidIdx + 71)), 'uint8'))';
	FlightModeSettings.FlightModeChangeRestartsPathPlan = double(typecast(buffer(mcolon(FlightModeSettingsFidIdx + 72, FlightModeSettingsFidIdx + 72)), 'uint8'))';

% FlightPlanControl typecasting
	FlightPlanControl.timestamp = double(typecast(buffer(mcolon(FlightPlanControlFidIdx - headerLen - oplHeaderLen, FlightPlanControlFidIdx + 3 - headerLen - oplHeaderLen)), 'uint32'))';
	FlightPlanControl.Command = double(typecast(buffer(mcolon(FlightPlanControlFidIdx + 0, FlightPlanControlFidIdx + 0)), 'uint8'))';

% FlightPlanSettings typecasting
	FlightPlanSettings.timestamp = double(typecast(buffer(mcolon(FlightPlanSettingsFidIdx - headerLen - oplHeaderLen, FlightPlanSettingsFidIdx + 3 - headerLen - oplHeaderLen)), 'uint32'))';
	FlightPlanSettings.Test = double(typecast(buffer(mcolon(FlightPlanSettingsFidIdx + 0, FlightPlanSettingsFidIdx + 3)), 'single'))';

% FlightPlanStatus typecasting
	FlightPlanStatus.timestamp = double(typecast(buffer(mcolon(FlightPlanStatusFidIdx - headerLen - oplHeaderLen, FlightPlanStatusFidIdx + 3 - headerLen - oplHeaderLen)), 'uint32'))';
	FlightPlanStatus.ErrorFileID = double(typecast(buffer(mcolon(FlightPlanStatusFidIdx + 0, FlightPlanStatusFidIdx + 3)), 'uint32'))';
	FlightPlanStatus.ErrorLineNum = double(typecast(buffer(mcolon(FlightPlanStatusFidIdx + 4, FlightPlanStatusFidIdx + 7)), 'uint32'))';
	FlightPlanStatus.Debug = reshape(double(typecast(buffer(mcolon(FlightPlanStatusFidIdx + 8, FlightPlanStatusFidIdx + 15)), 'single')), 2, [] );
	FlightPlanStatus.Status = double(typecast(buffer(mcolon(FlightPlanStatusFidIdx + 16, FlightPlanStatusFidIdx + 16)), 'uint8'))';
	FlightPlanStatus.ErrorType = double(typecast(buffer(mcolon(FlightPlanStatusFidIdx + 17, FlightPlanStatusFidIdx + 17)), 'uint8'))';

% FlightStatus typecasting
	FlightStatus.timestamp = double(typecast(buffer(mcolon(FlightStatusFidIdx - headerLen - oplHeaderLen, FlightStatusFidIdx + 3 - headerLen - oplHeaderLen)), 'uint32'))';
	FlightStatus.Armed = double(typecast(buffer(mcolon(FlightStatusFidIdx + 0, FlightStatusFidIdx + 0)), 'uint8'))';
	FlightStatus.FlightMode = double(typecast(buffer(mcolon(FlightStatusFidIdx + 1, FlightStatusFidIdx + 1)), 'uint8'))';
	FlightStatus.AlwaysStabilizeWhenArmed = double(typecast(buffer(mcolon(FlightStatusFidIdx + 2, FlightStatusFidIdx + 2)), 'uint8'))';
	FlightStatus.FlightModeAssist = double(typecast(buffer(mcolon(FlightStatusFidIdx + 3, FlightStatusFidIdx + 3)), 'uint8'))';
	FlightStatus.AssistedControlState = double(typecast(buffer(mcolon(FlightStatusFidIdx + 4, FlightStatusFidIdx + 4)), 'uint8'))';
	FlightStatus.AssistedThrottleState = double(typecast(buffer(mcolon(FlightStatusFidIdx + 5, FlightStatusFidIdx + 5)), 'uint8'))';
	FlightStatus.ControlChain = reshape(double(typecast(buffer(mcolon(FlightStatusFidIdx + 6, FlightStatusFidIdx + 8)), 'uint8')), 3, [] );

% FlightTelemetryStats typecasting
	FlightTelemetryStats.timestamp = double(typecast(buffer(mcolon(FlightTelemetryStatsFidIdx - headerLen - oplHeaderLen, FlightTelemetryStatsFidIdx + 3 - headerLen - oplHeaderLen)), 'uint32'))';
	FlightTelemetryStats.TxDataRate = double(typecast(buffer(mcolon(FlightTelemetryStatsFidIdx + 0, FlightTelemetryStatsFidIdx + 3)), 'single'))';
	FlightTelemetryStats.TxBytes = double(typecast(buffer(mcolon(FlightTelemetryStatsFidIdx + 4, FlightTelemetryStatsFidIdx + 7)), 'uint32'))';
	FlightTelemetryStats.TxFailures = double(typecast(buffer(mcolon(FlightTelemetryStatsFidIdx + 8, FlightTelemetryStatsFidIdx + 11)), 'uint32'))';
	FlightTelemetryStats.TxRetries = double(typecast(buffer(mcolon(FlightTelemetryStatsFidIdx + 12, FlightTelemetryStatsFidIdx + 15)), 'uint32'))';
	FlightTelemetryStats.RxDataRate = double(typecast(buffer(mcolon(FlightTelemetryStatsFidIdx + 16, FlightTelemetryStatsFidIdx + 19)), 'single'))';
	FlightTelemetryStats.RxBytes = double(typecast(buffer(mcolon(FlightTelemetryStatsFidIdx + 20, FlightTelemetryStatsFidIdx + 23)), 'uint32'))';
	FlightTelemetryStats.RxFailures = double(typecast(buffer(mcolon(FlightTelemetryStatsFidIdx + 24, FlightTelemetryStatsFidIdx + 27)), 'uint32'))';
	FlightTelemetryStats.RxSyncErrors = double(typecast(buffer(mcolon(FlightTelemetryStatsFidIdx + 28, FlightTelemetryStatsFidIdx + 31)), 'uint32'))';
	FlightTelemetryStats.RxCrcErrors = double(typecast(buffer(mcolon(FlightTelemetryStatsFidIdx + 32, FlightTelemetryStatsFidIdx + 35)), 'uint32'))';
	FlightTelemetryStats.Status = double(typecast(buffer(mcolon(FlightTelemetryStatsFidIdx + 36, FlightTelemetryStatsFidIdx + 36)), 'uint8'))';

% GCSReceiver typecasting
	GCSReceiver.timestamp = double(typecast(buffer(mcolon(GCSReceiverFidIdx - headerLen - oplHeaderLen, GCSReceiverFidIdx + 3 - headerLen - oplHeaderLen)), 'uint32'))';
	GCSReceiver.Channel = reshape(double(typecast(buffer(mcolon(GCSReceiverFidIdx + 0, GCSReceiverFidIdx + 15)), 'uint16')), 8, [] );

% GCSTelemetryStats typecasting
	GCSTelemetryStats.timestamp = double(typecast(buffer(mcolon(GCSTelemetryStatsFidIdx - headerLen - oplHeaderLen, GCSTelemetryStatsFidIdx + 3 - headerLen - oplHeaderLen)), 'uint32'))';
	GCSTelemetryStats.TxDataRate = double(typecast(buffer(mcolon(GCSTelemetryStatsFidIdx + 0, GCSTelemetryStatsFidIdx + 3)), 'single'))';
	GCSTelemetryStats.TxBytes = double(typecast(buffer(mcolon(GCSTelemetryStatsFidIdx + 4, GCSTelemetryStatsFidIdx + 7)), 'uint32'))';
	GCSTelemetryStats.TxFailures = double(typecast(buffer(mcolon(GCSTelemetryStatsFidIdx + 8, GCSTelemetryStatsFidIdx + 11)), 'uint32'))';
	GCSTelemetryStats.TxRetries = double(typecast(buffer(mcolon(GCSTelemetryStatsFidIdx + 12, GCSTelemetryStatsFidIdx + 15)), 'uint32'))';
	GCSTelemetryStats.RxDataRate = double(typecast(buffer(mcolon(GCSTelemetryStatsFidIdx + 16, GCSTelemetryStatsFidIdx + 19)), 'single'))';
	GCSTelemetryStats.RxBytes = double(typecast(buffer(mcolon(GCSTelemetryStatsFidIdx + 20, GCSTelemetryStatsFidIdx + 23)), 'uint32'))';
	GCSTelemetryStats.RxFailures = double(typecast(buffer(mcolon(GCSTelemetryStatsFidIdx + 24, GCSTelemetryStatsFidIdx + 27)), 'uint32'))';
	GCSTelemetryStats.RxSyncErrors = double(typecast(buffer(mcolon(GCSTelemetryStatsFidIdx + 28, GCSTelemetryStatsFidIdx + 31)), 'uint32'))';
	GCSTelemetryStats.RxCrcErrors = double(typecast(buffer(mcolon(GCSTelemetryStatsFidIdx + 32, GCSTelemetryStatsFidIdx + 35)), 'uint32'))';
	GCSTelemetryStats.Status = double(typecast(buffer(mcolon(GCSTelemetryStatsFidIdx + 36, GCSTelemetryStatsFidIdx + 36)), 'uint8'))';

% GPSExtendedStatus typecasting
	GPSExtendedStatus.timestamp = double(typecast(buffer(mcolon(GPSExtendedStatusFidIdx - headerLen - oplHeaderLen, GPSExtendedStatusFidIdx + 3 - headerLen - oplHeaderLen)), 'uint32'))';
	GPSExtendedStatus.FlightTime = double(typecast(buffer(mcolon(GPSExtendedStatusFidIdx + 0, GPSExtendedStatusFidIdx + 3)), 'uint32'))';
	GPSExtendedStatus.Options = double(typecast(buffer(mcolon(GPSExtendedStatusFidIdx + 4, GPSExtendedStatusFidIdx + 5)), 'uint16'))';
	GPSExtendedStatus.Status = double(typecast(buffer(mcolon(GPSExtendedStatusFidIdx + 6, GPSExtendedStatusFidIdx + 6)), 'uint8'))';
	GPSExtendedStatus.BoardType = reshape(double(typecast(buffer(mcolon(GPSExtendedStatusFidIdx + 7, GPSExtendedStatusFidIdx + 8)), 'uint8')), 2, [] );
	GPSExtendedStatus.FirmwareHash = reshape(double(typecast(buffer(mcolon(GPSExtendedStatusFidIdx + 9, GPSExtendedStatusFidIdx + 16)), 'uint8')), 8, [] );
	GPSExtendedStatus.FirmwareTag = reshape(double(typecast(buffer(mcolon(GPSExtendedStatusFidIdx + 17, GPSExtendedStatusFidIdx + 42)), 'uint8')), 26, [] );

% GPSPositionSensor typecasting
	GPSPositionSensor.timestamp = double(typecast(buffer(mcolon(GPSPositionSensorFidIdx - headerLen - oplHeaderLen, GPSPositionSensorFidIdx + 3 - headerLen - oplHeaderLen)), 'uint32'))';
	GPSPositionSensor.Latitude = double(typecast(buffer(mcolon(GPSPositionSensorFidIdx + 0, GPSPositionSensorFidIdx + 3)), 'int32'))';
	GPSPositionSensor.Longitude = double(typecast(buffer(mcolon(GPSPositionSensorFidIdx + 4, GPSPositionSensorFidIdx + 7)), 'int32'))';
	GPSPositionSensor.Altitude = double(typecast(buffer(mcolon(GPSPositionSensorFidIdx + 8, GPSPositionSensorFidIdx + 11)), 'single'))';
	GPSPositionSensor.GeoidSeparation = double(typecast(buffer(mcolon(GPSPositionSensorFidIdx + 12, GPSPositionSensorFidIdx + 15)), 'single'))';
	GPSPositionSensor.Heading = double(typecast(buffer(mcolon(GPSPositionSensorFidIdx + 16, GPSPositionSensorFidIdx + 19)), 'single'))';
	GPSPositionSensor.Groundspeed = double(typecast(buffer(mcolon(GPSPositionSensorFidIdx + 20, GPSPositionSensorFidIdx + 23)), 'single'))';
	GPSPositionSensor.PDOP = double(typecast(buffer(mcolon(GPSPositionSensorFidIdx + 24, GPSPositionSensorFidIdx + 27)), 'single'))';
	GPSPositionSensor.HDOP = double(typecast(buffer(mcolon(GPSPositionSensorFidIdx + 28, GPSPositionSensorFidIdx + 31)), 'single'))';
	GPSPositionSensor.VDOP = double(typecast(buffer(mcolon(GPSPositionSensorFidIdx + 32, GPSPositionSensorFidIdx + 35)), 'single'))';
	GPSPositionSensor.Status = double(typecast(buffer(mcolon(GPSPositionSensorFidIdx + 36, GPSPositionSensorFidIdx + 36)), 'uint8'))';
	GPSPositionSensor.Satellites = double(typecast(buffer(mcolon(GPSPositionSensorFidIdx + 37, GPSPositionSensorFidIdx + 37)), 'int8'))';
	GPSPositionSensor.SensorType = double(typecast(buffer(mcolon(GPSPositionSensorFidIdx + 38, GPSPositionSensorFidIdx + 38)), 'uint8'))';
	GPSPositionSensor.AutoConfigStatus = double(typecast(buffer(mcolon(GPSPositionSensorFidIdx + 39, GPSPositionSensorFidIdx + 39)), 'uint8'))';
	GPSPositionSensor.BaudRate = double(typecast(buffer(mcolon(GPSPositionSensorFidIdx + 40, GPSPositionSensorFidIdx + 40)), 'uint8'))';

% GPSSatellites typecasting
	GPSSatellites.timestamp = double(typecast(buffer(mcolon(GPSSatellitesFidIdx - headerLen - oplHeaderLen, GPSSatellitesFidIdx + 3 - headerLen - oplHeaderLen)), 'uint32'))';
	GPSSatellites.Azimuth = reshape(double(typecast(buffer(mcolon(GPSSatellitesFidIdx + 0, GPSSatellitesFidIdx + 31)), 'int16')), 16, [] );
	GPSSatellites.SatsInView = double(typecast(buffer(mcolon(GPSSatellitesFidIdx + 32, GPSSatellitesFidIdx + 32)), 'int8'))';
	GPSSatellites.PRN = reshape(double(typecast(buffer(mcolon(GPSSatellitesFidIdx + 33, GPSSatellitesFidIdx + 48)), 'uint8')), 16, [] );
	GPSSatellites.Elevation = reshape(double(typecast(buffer(mcolon(GPSSatellitesFidIdx + 49, GPSSatellitesFidIdx + 64)), 'int8')), 16, [] );
	GPSSatellites.SNR = reshape(double(typecast(buffer(mcolon(GPSSatellitesFidIdx + 65, GPSSatellitesFidIdx + 80)), 'int8')), 16, [] );

% GPSSettings typecasting
	GPSSettings.timestamp = double(typecast(buffer(mcolon(GPSSettingsFidIdx - headerLen - oplHeaderLen, GPSSettingsFidIdx + 3 - headerLen - oplHeaderLen)), 'uint32'))';
	GPSSettings.MaxPDOP = double(typecast(buffer(mcolon(GPSSettingsFidIdx + 0, GPSSettingsFidIdx + 3)), 'single'))';
	GPSSettings.DataProtocol = double(typecast(buffer(mcolon(GPSSettingsFidIdx + 4, GPSSettingsFidIdx + 4)), 'uint8'))';
	GPSSettings.MinSatellites = double(typecast(buffer(mcolon(GPSSettingsFidIdx + 5, GPSSettingsFidIdx + 5)), 'uint8'))';
	GPSSettings.UbxAutoConfig = double(typecast(buffer(mcolon(GPSSettingsFidIdx + 6, GPSSettingsFidIdx + 6)), 'uint8'))';
	GPSSettings.UbxRate = double(typecast(buffer(mcolon(GPSSettingsFidIdx + 7, GPSSettingsFidIdx + 7)), 'int8'))';
	GPSSettings.UbxDynamicModel = double(typecast(buffer(mcolon(GPSSettingsFidIdx + 8, GPSSettingsFidIdx + 8)), 'uint8'))';
	GPSSettings.UbxSBASMode = double(typecast(buffer(mcolon(GPSSettingsFidIdx + 9, GPSSettingsFidIdx + 9)), 'uint8'))';
	GPSSettings.UbxSBASChannelsUsed = double(typecast(buffer(mcolon(GPSSettingsFidIdx + 10, GPSSettingsFidIdx + 10)), 'uint8'))';
	GPSSettings.UbxSBASSats = double(typecast(buffer(mcolon(GPSSettingsFidIdx + 11, GPSSettingsFidIdx + 11)), 'uint8'))';
	GPSSettings.UbxGNSSMode = double(typecast(buffer(mcolon(GPSSettingsFidIdx + 12, GPSSettingsFidIdx + 12)), 'uint8'))';
	GPSSettings.UbxAssistNowAutonomous = double(typecast(buffer(mcolon(GPSSettingsFidIdx + 13, GPSSettingsFidIdx + 13)), 'uint8'))';

% GPSTime typecasting
	GPSTime.timestamp = double(typecast(buffer(mcolon(GPSTimeFidIdx - headerLen - oplHeaderLen, GPSTimeFidIdx + 3 - headerLen - oplHeaderLen)), 'uint32'))';
	GPSTime.Year = double(typecast(buffer(mcolon(GPSTimeFidIdx + 0, GPSTimeFidIdx + 1)), 'int16'))';
	GPSTime.Millisecond = double(typecast(buffer(mcolon(GPSTimeFidIdx + 2, GPSTimeFidIdx + 3)), 'int16'))';
	GPSTime.Month = double(typecast(buffer(mcolon(GPSTimeFidIdx + 4, GPSTimeFidIdx + 4)), 'int8'))';
	GPSTime.Day = double(typecast(buffer(mcolon(GPSTimeFidIdx + 5, GPSTimeFidIdx + 5)), 'int8'))';
	GPSTime.Hour = double(typecast(buffer(mcolon(GPSTimeFidIdx + 6, GPSTimeFidIdx + 6)), 'int8'))';
	GPSTime.Minute = double(typecast(buffer(mcolon(GPSTimeFidIdx + 7, GPSTimeFidIdx + 7)), 'int8'))';
	GPSTime.Second = double(typecast(buffer(mcolon(GPSTimeFidIdx + 8, GPSTimeFidIdx + 8)), 'int8'))';

% GPSVelocitySensor typecasting
	GPSVelocitySensor.timestamp = double(typecast(buffer(mcolon(GPSVelocitySensorFidIdx - headerLen - oplHeaderLen, GPSVelocitySensorFidIdx + 3 - headerLen - oplHeaderLen)), 'uint32'))';
	GPSVelocitySensor.North = double(typecast(buffer(mcolon(GPSVelocitySensorFidIdx + 0, GPSVelocitySensorFidIdx + 3)), 'single'))';
	GPSVelocitySensor.East = double(typecast(buffer(mcolon(GPSVelocitySensorFidIdx + 4, GPSVelocitySensorFidIdx + 7)), 'single'))';
	GPSVelocitySensor.Down = double(typecast(buffer(mcolon(GPSVelocitySensorFidIdx + 8, GPSVelocitySensorFidIdx + 11)), 'single'))';

% GroundPathFollowerSettings typecasting
	GroundPathFollowerSettings.timestamp = double(typecast(buffer(mcolon(GroundPathFollowerSettingsFidIdx - headerLen - oplHeaderLen, GroundPathFollowerSettingsFidIdx + 3 - headerLen - oplHeaderLen)), 'uint32'))';
	GroundPathFollowerSettings.HorizontalVelMax = double(typecast(buffer(mcolon(GroundPathFollowerSettingsFidIdx + 0, GroundPathFollowerSettingsFidIdx + 3)), 'single'))';
	GroundPathFollowerSettings.HorizontalVelMin = double(typecast(buffer(mcolon(GroundPathFollowerSettingsFidIdx + 4, GroundPathFollowerSettingsFidIdx + 7)), 'single'))';
	GroundPathFollowerSettings.CourseFeedForward = double(typecast(buffer(mcolon(GroundPathFollowerSettingsFidIdx + 8, GroundPathFollowerSettingsFidIdx + 11)), 'single'))';
	GroundPathFollowerSettings.VelocityFeedForward = double(typecast(buffer(mcolon(GroundPathFollowerSettingsFidIdx + 12, GroundPathFollowerSettingsFidIdx + 15)), 'single'))';
	GroundPathFollowerSettings.HorizontalPosP = double(typecast(buffer(mcolon(GroundPathFollowerSettingsFidIdx + 16, GroundPathFollowerSettingsFidIdx + 19)), 'single'))';
	GroundPathFollowerSettings.SpeedPI = reshape(double(typecast(buffer(mcolon(GroundPathFollowerSettingsFidIdx + 20, GroundPathFollowerSettingsFidIdx + 35)), 'single')), 4, [] );
	GroundPathFollowerSettings.ThrustLimit = reshape(double(typecast(buffer(mcolon(GroundPathFollowerSettingsFidIdx + 36, GroundPathFollowerSettingsFidIdx + 47)), 'single')), 3, [] );
	GroundPathFollowerSettings.UpdatePeriod = double(typecast(buffer(mcolon(GroundPathFollowerSettingsFidIdx + 48, GroundPathFollowerSettingsFidIdx + 51)), 'int32'))';

% GroundTruth typecasting
	GroundTruth.timestamp = double(typecast(buffer(mcolon(GroundTruthFidIdx - headerLen - oplHeaderLen, GroundTruthFidIdx + 3 - headerLen - oplHeaderLen)), 'uint32'))';
	GroundTruth.AccelerationXYZ = reshape(double(typecast(buffer(mcolon(GroundTruthFidIdx + 0, GroundTruthFidIdx + 11)), 'single')), 3, [] );
	GroundTruth.PositionNED = reshape(double(typecast(buffer(mcolon(GroundTruthFidIdx + 12, GroundTruthFidIdx + 23)), 'single')), 3, [] );
	GroundTruth.VelocityNED = reshape(double(typecast(buffer(mcolon(GroundTruthFidIdx + 24, GroundTruthFidIdx + 35)), 'single')), 3, [] );
	GroundTruth.RPY = reshape(double(typecast(buffer(mcolon(GroundTruthFidIdx + 36, GroundTruthFidIdx + 47)), 'single')), 3, [] );
	GroundTruth.AngularRates = reshape(double(typecast(buffer(mcolon(GroundTruthFidIdx + 48, GroundTruthFidIdx + 59)), 'single')), 3, [] );
	GroundTruth.TrueAirspeed = double(typecast(buffer(mcolon(GroundTruthFidIdx + 60, GroundTruthFidIdx + 63)), 'single'))';
	GroundTruth.CalibratedAirspeed = double(typecast(buffer(mcolon(GroundTruthFidIdx + 64, GroundTruthFidIdx + 67)), 'single'))';
	GroundTruth.AngleOfAttack = double(typecast(buffer(mcolon(GroundTruthFidIdx + 68, GroundTruthFidIdx + 71)), 'single'))';
	GroundTruth.AngleOfSlip = double(typecast(buffer(mcolon(GroundTruthFidIdx + 72, GroundTruthFidIdx + 75)), 'single'))';

% GyroSensor typecasting
	GyroSensor.timestamp = double(typecast(buffer(mcolon(GyroSensorFidIdx - headerLen - oplHeaderLen, GyroSensorFidIdx + 3 - headerLen - oplHeaderLen)), 'uint32'))';
	GyroSensor.x = double(typecast(buffer(mcolon(GyroSensorFidIdx + 0, GyroSensorFidIdx + 3)), 'single'))';
	GyroSensor.y = double(typecast(buffer(mcolon(GyroSensorFidIdx + 4, GyroSensorFidIdx + 7)), 'single'))';
	GyroSensor.z = double(typecast(buffer(mcolon(GyroSensorFidIdx + 8, GyroSensorFidIdx + 11)), 'single'))';
	GyroSensor.temperature = double(typecast(buffer(mcolon(GyroSensorFidIdx + 12, GyroSensorFidIdx + 15)), 'single'))';
	GyroSensor.SensorReadTimestamp = double(typecast(buffer(mcolon(GyroSensorFidIdx + 16, GyroSensorFidIdx + 19)), 'uint32'))';

% GyroState typecasting
	GyroState.timestamp = double(typecast(buffer(mcolon(GyroStateFidIdx - headerLen - oplHeaderLen, GyroStateFidIdx + 3 - headerLen - oplHeaderLen)), 'uint32'))';
	GyroState.x = double(typecast(buffer(mcolon(GyroStateFidIdx + 0, GyroStateFidIdx + 3)), 'single'))';
	GyroState.y = double(typecast(buffer(mcolon(GyroStateFidIdx + 4, GyroStateFidIdx + 7)), 'single'))';
	GyroState.z = double(typecast(buffer(mcolon(GyroStateFidIdx + 8, GyroStateFidIdx + 11)), 'single'))';
	GyroState.SensorReadTimestamp = double(typecast(buffer(mcolon(GyroStateFidIdx + 12, GyroStateFidIdx + 15)), 'uint32'))';

% HomeLocation typecasting
	HomeLocation.timestamp = double(typecast(buffer(mcolon(HomeLocationFidIdx - headerLen - oplHeaderLen, HomeLocationFidIdx + 3 - headerLen - oplHeaderLen)), 'uint32'))';
	HomeLocation.Latitude = double(typecast(buffer(mcolon(HomeLocationFidIdx + 0, HomeLocationFidIdx + 3)), 'int32'))';
	HomeLocation.Longitude = double(typecast(buffer(mcolon(HomeLocationFidIdx + 4, HomeLocationFidIdx + 7)), 'int32'))';
	HomeLocation.Altitude = double(typecast(buffer(mcolon(HomeLocationFidIdx + 8, HomeLocationFidIdx + 11)), 'single'))';
	HomeLocation.Be = reshape(double(typecast(buffer(mcolon(HomeLocationFidIdx + 12, HomeLocationFidIdx + 23)), 'single')), 3, [] );
	HomeLocation.g_e = double(typecast(buffer(mcolon(HomeLocationFidIdx + 24, HomeLocationFidIdx + 27)), 'single'))';
	HomeLocation.Set = double(typecast(buffer(mcolon(HomeLocationFidIdx + 28, HomeLocationFidIdx + 28)), 'uint8'))';

% HwSettings typecasting
	HwSettings.timestamp = double(typecast(buffer(mcolon(HwSettingsFidIdx - headerLen - oplHeaderLen, HwSettingsFidIdx + 3 - headerLen - oplHeaderLen)), 'uint32'))';
	HwSettings.CC_RcvrPort = double(typecast(buffer(mcolon(HwSettingsFidIdx + 0, HwSettingsFidIdx + 0)), 'uint8'))';
	HwSettings.CC_MainPort = double(typecast(buffer(mcolon(HwSettingsFidIdx + 1, HwSettingsFidIdx + 1)), 'uint8'))';
	HwSettings.CC_FlexiPort = double(typecast(buffer(mcolon(HwSettingsFidIdx + 2, HwSettingsFidIdx + 2)), 'uint8'))';
	HwSettings.RV_RcvrPort = double(typecast(buffer(mcolon(HwSettingsFidIdx + 3, HwSettingsFidIdx + 3)), 'uint8'))';
	HwSettings.RV_AuxPort = double(typecast(buffer(mcolon(HwSettingsFidIdx + 4, HwSettingsFidIdx + 4)), 'uint8'))';
	HwSettings.RV_AuxSBusPort = double(typecast(buffer(mcolon(HwSettingsFidIdx + 5, HwSettingsFidIdx + 5)), 'uint8'))';
	HwSettings.RV_FlexiPort = double(typecast(buffer(mcolon(HwSettingsFidIdx + 6, HwSettingsFidIdx + 6)), 'uint8'))';
	HwSettings.RV_TelemetryPort = double(typecast(buffer(mcolon(HwSettingsFidIdx + 7, HwSettingsFidIdx + 7)), 'uint8'))';
	HwSettings.RV_GPSPort = double(typecast(buffer(mcolon(HwSettingsFidIdx + 8, HwSettingsFidIdx + 8)), 'uint8'))';
	HwSettings.RM_RcvrPort = double(typecast(buffer(mcolon(HwSettingsFidIdx + 9, HwSettingsFidIdx + 9)), 'uint8'))';
	HwSettings.RM_MainPort = double(typecast(buffer(mcolon(HwSettingsFidIdx + 10, HwSettingsFidIdx + 10)), 'uint8'))';
	HwSettings.RM_FlexiPort = double(typecast(buffer(mcolon(HwSettingsFidIdx + 11, HwSettingsFidIdx + 11)), 'uint8'))';
	HwSettings.SPK2_RcvrPort = double(typecast(buffer(mcolon(HwSettingsFidIdx + 12, HwSettingsFidIdx + 12)), 'uint8'))';
	HwSettings.SPK2_MainPort = double(typecast(buffer(mcolon(HwSettingsFidIdx + 13, HwSettingsFidIdx + 13)), 'uint8'))';
	HwSettings.SPK2_FlexiPort = double(typecast(buffer(mcolon(HwSettingsFidIdx + 14, HwSettingsFidIdx + 14)), 'uint8'))';
	HwSettings.SPK2_I2CPort = double(typecast(buffer(mcolon(HwSettingsFidIdx + 15, HwSettingsFidIdx + 15)), 'uint8'))';
	HwSettings.TelemetrySpeed = double(typecast(buffer(mcolon(HwSettingsFidIdx + 16, HwSettingsFidIdx + 16)), 'uint8'))';
	HwSettings.GPSSpeed = double(typecast(buffer(mcolon(HwSettingsFidIdx + 17, HwSettingsFidIdx + 17)), 'uint8'))';
	HwSettings.DebugConsoleSpeed = double(typecast(buffer(mcolon(HwSettingsFidIdx + 18, HwSettingsFidIdx + 18)), 'uint8'))';
	HwSettings.MSPSpeed = double(typecast(buffer(mcolon(HwSettingsFidIdx + 19, HwSettingsFidIdx + 19)), 'uint8'))';
	HwSettings.MAVLinkSpeed = double(typecast(buffer(mcolon(HwSettingsFidIdx + 20, HwSettingsFidIdx + 20)), 'uint8'))';
	HwSettings.USB_HIDPort = double(typecast(buffer(mcolon(HwSettingsFidIdx + 21, HwSettingsFidIdx + 21)), 'uint8'))';
	HwSettings.USB_VCPPort = double(typecast(buffer(mcolon(HwSettingsFidIdx + 22, HwSettingsFidIdx + 22)), 'uint8'))';
	HwSettings.OptionalModules = reshape(double(typecast(buffer(mcolon(HwSettingsFidIdx + 23, HwSettingsFidIdx + 34)), 'uint8')), 12, [] );
	HwSettings.ADCRouting = reshape(double(typecast(buffer(mcolon(HwSettingsFidIdx + 35, HwSettingsFidIdx + 42)), 'uint8')), 8, [] );
	HwSettings.DSMxBind = double(typecast(buffer(mcolon(HwSettingsFidIdx + 43, HwSettingsFidIdx + 43)), 'uint8'))';
	HwSettings.WS2811LED_Out = double(typecast(buffer(mcolon(HwSettingsFidIdx + 44, HwSettingsFidIdx + 44)), 'uint8'))';

% I2CStats typecasting
	I2CStats.timestamp = double(typecast(buffer(mcolon(I2CStatsFidIdx - headerLen - oplHeaderLen, I2CStatsFidIdx + 3 - headerLen - oplHeaderLen)), 'uint32'))';
	I2CStats.evirq_log = reshape(double(typecast(buffer(mcolon(I2CStatsFidIdx + 0, I2CStatsFidIdx + 19)), 'uint32')), 5, [] );
	I2CStats.erirq_log = reshape(double(typecast(buffer(mcolon(I2CStatsFidIdx + 20, I2CStatsFidIdx + 39)), 'uint32')), 5, [] );
	I2CStats.event_errors = double(typecast(buffer(mcolon(I2CStatsFidIdx + 40, I2CStatsFidIdx + 40)), 'uint8'))';
	I2CStats.fsm_errors = double(typecast(buffer(mcolon(I2CStatsFidIdx + 41, I2CStatsFidIdx + 41)), 'uint8'))';
	I2CStats.irq_errors = double(typecast(buffer(mcolon(I2CStatsFidIdx + 42, I2CStatsFidIdx + 42)), 'uint8'))';
	I2CStats.nacks = double(typecast(buffer(mcolon(I2CStatsFidIdx + 43, I2CStatsFidIdx + 43)), 'uint8'))';
	I2CStats.timeouts = double(typecast(buffer(mcolon(I2CStatsFidIdx + 44, I2CStatsFidIdx + 44)), 'uint8'))';
	I2CStats.last_error_type = double(typecast(buffer(mcolon(I2CStatsFidIdx + 45, I2CStatsFidIdx + 45)), 'uint8'))';
	I2CStats.event_log = reshape(double(typecast(buffer(mcolon(I2CStatsFidIdx + 46, I2CStatsFidIdx + 50)), 'uint8')), 5, [] );
	I2CStats.state_log = reshape(double(typecast(buffer(mcolon(I2CStatsFidIdx + 51, I2CStatsFidIdx + 55)), 'uint8')), 5, [] );

% MagSensor typecasting
	MagSensor.timestamp = double(typecast(buffer(mcolon(MagSensorFidIdx - headerLen - oplHeaderLen, MagSensorFidIdx + 3 - headerLen - oplHeaderLen)), 'uint32'))';
	MagSensor.x = double(typecast(buffer(mcolon(MagSensorFidIdx + 0, MagSensorFidIdx + 3)), 'single'))';
	MagSensor.y = double(typecast(buffer(mcolon(MagSensorFidIdx + 4, MagSensorFidIdx + 7)), 'single'))';
	MagSensor.z = double(typecast(buffer(mcolon(MagSensorFidIdx + 8, MagSensorFidIdx + 11)), 'single'))';
	MagSensor.temperature = double(typecast(buffer(mcolon(MagSensorFidIdx + 12, MagSensorFidIdx + 15)), 'single'))';

% MagState typecasting
	MagState.timestamp = double(typecast(buffer(mcolon(MagStateFidIdx - headerLen - oplHeaderLen, MagStateFidIdx + 3 - headerLen - oplHeaderLen)), 'uint32'))';
	MagState.x = double(typecast(buffer(mcolon(MagStateFidIdx + 0, MagStateFidIdx + 3)), 'single'))';
	MagState.y = double(typecast(buffer(mcolon(MagStateFidIdx + 4, MagStateFidIdx + 7)), 'single'))';
	MagState.z = double(typecast(buffer(mcolon(MagStateFidIdx + 8, MagStateFidIdx + 11)), 'single'))';
	MagState.Source = double(typecast(buffer(mcolon(MagStateFidIdx + 12, MagStateFidIdx + 12)), 'uint8'))';

% ManualControlCommand typecasting
	ManualControlCommand.timestamp = double(typecast(buffer(mcolon(ManualControlCommandFidIdx - headerLen - oplHeaderLen, ManualControlCommandFidIdx + 3 - headerLen - oplHeaderLen)), 'uint32'))';
	ManualControlCommand.Throttle = double(typecast(buffer(mcolon(ManualControlCommandFidIdx + 0, ManualControlCommandFidIdx + 3)), 'single'))';
	ManualControlCommand.Roll = double(typecast(buffer(mcolon(ManualControlCommandFidIdx + 4, ManualControlCommandFidIdx + 7)), 'single'))';
	ManualControlCommand.Pitch = double(typecast(buffer(mcolon(ManualControlCommandFidIdx + 8, ManualControlCommandFidIdx + 11)), 'single'))';
	ManualControlCommand.Yaw = double(typecast(buffer(mcolon(ManualControlCommandFidIdx + 12, ManualControlCommandFidIdx + 15)), 'single'))';
	ManualControlCommand.Collective = double(typecast(buffer(mcolon(ManualControlCommandFidIdx + 16, ManualControlCommandFidIdx + 19)), 'single'))';
	ManualControlCommand.Thrust = double(typecast(buffer(mcolon(ManualControlCommandFidIdx + 20, ManualControlCommandFidIdx + 23)), 'single'))';
	ManualControlCommand.Channel = reshape(double(typecast(buffer(mcolon(ManualControlCommandFidIdx + 24, ManualControlCommandFidIdx + 45)), 'uint16')), 11, [] );
	ManualControlCommand.Connected = double(typecast(buffer(mcolon(ManualControlCommandFidIdx + 46, ManualControlCommandFidIdx + 46)), 'uint8'))';
	ManualControlCommand.FlightModeSwitchPosition = double(typecast(buffer(mcolon(ManualControlCommandFidIdx + 47, ManualControlCommandFidIdx + 47)), 'uint8'))';

% ManualControlSettings typecasting
	ManualControlSettings.timestamp = double(typecast(buffer(mcolon(ManualControlSettingsFidIdx - headerLen - oplHeaderLen, ManualControlSettingsFidIdx + 3 - headerLen - oplHeaderLen)), 'uint32'))';
	ManualControlSettings.FailsafeChannel = reshape(double(typecast(buffer(mcolon(ManualControlSettingsFidIdx + 0, ManualControlSettingsFidIdx + 35)), 'single')), 9, [] );
	ManualControlSettings.ChannelMin = reshape(double(typecast(buffer(mcolon(ManualControlSettingsFidIdx + 36, ManualControlSettingsFidIdx + 57)), 'int16')), 11, [] );
	ManualControlSettings.ChannelNeutral = reshape(double(typecast(buffer(mcolon(ManualControlSettingsFidIdx + 58, ManualControlSettingsFidIdx + 79)), 'int16')), 11, [] );
	ManualControlSettings.ChannelMax = reshape(double(typecast(buffer(mcolon(ManualControlSettingsFidIdx + 80, ManualControlSettingsFidIdx + 101)), 'int16')), 11, [] );
	ManualControlSettings.ResponseTime = reshape(double(typecast(buffer(mcolon(ManualControlSettingsFidIdx + 102, ManualControlSettingsFidIdx + 119)), 'uint16')), 9, [] );
	ManualControlSettings.ChannelGroups = reshape(double(typecast(buffer(mcolon(ManualControlSettingsFidIdx + 120, ManualControlSettingsFidIdx + 130)), 'uint8')), 11, [] );
	ManualControlSettings.ChannelNumber = reshape(double(typecast(buffer(mcolon(ManualControlSettingsFidIdx + 131, ManualControlSettingsFidIdx + 141)), 'uint8')), 11, [] );
	ManualControlSettings.Deadband = double(typecast(buffer(mcolon(ManualControlSettingsFidIdx + 142, ManualControlSettingsFidIdx + 142)), 'uint8'))';
	ManualControlSettings.DeadbandAssistedControl = double(typecast(buffer(mcolon(ManualControlSettingsFidIdx + 143, ManualControlSettingsFidIdx + 143)), 'uint8'))';
	ManualControlSettings.FlightModeNumber = double(typecast(buffer(mcolon(ManualControlSettingsFidIdx + 144, ManualControlSettingsFidIdx + 144)), 'uint8'))';
	ManualControlSettings.FailsafeFlightModeSwitchPosition = double(typecast(buffer(mcolon(ManualControlSettingsFidIdx + 145, ManualControlSettingsFidIdx + 145)), 'int8'))';

% MixerSettings typecasting
	MixerSettings.timestamp = double(typecast(buffer(mcolon(MixerSettingsFidIdx - headerLen - oplHeaderLen, MixerSettingsFidIdx + 3 - headerLen - oplHeaderLen)), 'uint32'))';
	MixerSettings.ThrottleCurve1 = reshape(double(typecast(buffer(mcolon(MixerSettingsFidIdx + 0, MixerSettingsFidIdx + 19)), 'single')), 5, [] );
	MixerSettings.ThrottleCurve2 = reshape(double(typecast(buffer(mcolon(MixerSettingsFidIdx + 20, MixerSettingsFidIdx + 39)), 'single')), 5, [] );
	MixerSettings.MixerValueRoll = double(typecast(buffer(mcolon(MixerSettingsFidIdx + 40, MixerSettingsFidIdx + 40)), 'int8'))';
	MixerSettings.MixerValuePitch = double(typecast(buffer(mcolon(MixerSettingsFidIdx + 41, MixerSettingsFidIdx + 41)), 'int8'))';
	MixerSettings.MixerValueYaw = double(typecast(buffer(mcolon(MixerSettingsFidIdx + 42, MixerSettingsFidIdx + 42)), 'int8'))';
	MixerSettings.RollDifferential = double(typecast(buffer(mcolon(MixerSettingsFidIdx + 43, MixerSettingsFidIdx + 43)), 'int8'))';
	MixerSettings.FirstRollServo = double(typecast(buffer(mcolon(MixerSettingsFidIdx + 44, MixerSettingsFidIdx + 44)), 'uint8'))';
	MixerSettings.Curve2Source = double(typecast(buffer(mcolon(MixerSettingsFidIdx + 45, MixerSettingsFidIdx + 45)), 'uint8'))';
	MixerSettings.Mixer1Type = double(typecast(buffer(mcolon(MixerSettingsFidIdx + 46, MixerSettingsFidIdx + 46)), 'uint8'))';
	MixerSettings.Mixer1Vector = reshape(double(typecast(buffer(mcolon(MixerSettingsFidIdx + 47, MixerSettingsFidIdx + 51)), 'int8')), 5, [] );
	MixerSettings.Mixer2Type = double(typecast(buffer(mcolon(MixerSettingsFidIdx + 52, MixerSettingsFidIdx + 52)), 'uint8'))';
	MixerSettings.Mixer2Vector = reshape(double(typecast(buffer(mcolon(MixerSettingsFidIdx + 53, MixerSettingsFidIdx + 57)), 'int8')), 5, [] );
	MixerSettings.Mixer3Type = double(typecast(buffer(mcolon(MixerSettingsFidIdx + 58, MixerSettingsFidIdx + 58)), 'uint8'))';
	MixerSettings.Mixer3Vector = reshape(double(typecast(buffer(mcolon(MixerSettingsFidIdx + 59, MixerSettingsFidIdx + 63)), 'int8')), 5, [] );
	MixerSettings.Mixer4Type = double(typecast(buffer(mcolon(MixerSettingsFidIdx + 64, MixerSettingsFidIdx + 64)), 'uint8'))';
	MixerSettings.Mixer4Vector = reshape(double(typecast(buffer(mcolon(MixerSettingsFidIdx + 65, MixerSettingsFidIdx + 69)), 'int8')), 5, [] );
	MixerSettings.Mixer5Type = double(typecast(buffer(mcolon(MixerSettingsFidIdx + 70, MixerSettingsFidIdx + 70)), 'uint8'))';
	MixerSettings.Mixer5Vector = reshape(double(typecast(buffer(mcolon(MixerSettingsFidIdx + 71, MixerSettingsFidIdx + 75)), 'int8')), 5, [] );
	MixerSettings.Mixer6Type = double(typecast(buffer(mcolon(MixerSettingsFidIdx + 76, MixerSettingsFidIdx + 76)), 'uint8'))';
	MixerSettings.Mixer6Vector = reshape(double(typecast(buffer(mcolon(MixerSettingsFidIdx + 77, MixerSettingsFidIdx + 81)), 'int8')), 5, [] );
	MixerSettings.Mixer7Type = double(typecast(buffer(mcolon(MixerSettingsFidIdx + 82, MixerSettingsFidIdx + 82)), 'uint8'))';
	MixerSettings.Mixer7Vector = reshape(double(typecast(buffer(mcolon(MixerSettingsFidIdx + 83, MixerSettingsFidIdx + 87)), 'int8')), 5, [] );
	MixerSettings.Mixer8Type = double(typecast(buffer(mcolon(MixerSettingsFidIdx + 88, MixerSettingsFidIdx + 88)), 'uint8'))';
	MixerSettings.Mixer8Vector = reshape(double(typecast(buffer(mcolon(MixerSettingsFidIdx + 89, MixerSettingsFidIdx + 93)), 'int8')), 5, [] );
	MixerSettings.Mixer9Type = double(typecast(buffer(mcolon(MixerSettingsFidIdx + 94, MixerSettingsFidIdx + 94)), 'uint8'))';
	MixerSettings.Mixer9Vector = reshape(double(typecast(buffer(mcolon(MixerSettingsFidIdx + 95, MixerSettingsFidIdx + 99)), 'int8')), 5, [] );
	MixerSettings.Mixer10Type = double(typecast(buffer(mcolon(MixerSettingsFidIdx + 100, MixerSettingsFidIdx + 100)), 'uint8'))';
	MixerSettings.Mixer10Vector = reshape(double(typecast(buffer(mcolon(MixerSettingsFidIdx + 101, MixerSettingsFidIdx + 105)), 'int8')), 5, [] );
	MixerSettings.Mixer11Type = double(typecast(buffer(mcolon(MixerSettingsFidIdx + 106, MixerSettingsFidIdx + 106)), 'uint8'))';
	MixerSettings.Mixer11Vector = reshape(double(typecast(buffer(mcolon(MixerSettingsFidIdx + 107, MixerSettingsFidIdx + 111)), 'int8')), 5, [] );
	MixerSettings.Mixer12Type = double(typecast(buffer(mcolon(MixerSettingsFidIdx + 112, MixerSettingsFidIdx + 112)), 'uint8'))';
	MixerSettings.Mixer12Vector = reshape(double(typecast(buffer(mcolon(MixerSettingsFidIdx + 113, MixerSettingsFidIdx + 117)), 'int8')), 5, [] );

% MixerStatus typecasting
	MixerStatus.timestamp = double(typecast(buffer(mcolon(MixerStatusFidIdx - headerLen - oplHeaderLen, MixerStatusFidIdx + 3 - headerLen - oplHeaderLen)), 'uint32'))';
	MixerStatus.Mixer1 = double(typecast(buffer(mcolon(MixerStatusFidIdx + 0, MixerStatusFidIdx + 3)), 'single'))';
	MixerStatus.Mixer2 = double(typecast(buffer(mcolon(MixerStatusFidIdx + 4, MixerStatusFidIdx + 7)), 'single'))';
	MixerStatus.Mixer3 = double(typecast(buffer(mcolon(MixerStatusFidIdx + 8, MixerStatusFidIdx + 11)), 'single'))';
	MixerStatus.Mixer4 = double(typecast(buffer(mcolon(MixerStatusFidIdx + 12, MixerStatusFidIdx + 15)), 'single'))';
	MixerStatus.Mixer5 = double(typecast(buffer(mcolon(MixerStatusFidIdx + 16, MixerStatusFidIdx + 19)), 'single'))';
	MixerStatus.Mixer6 = double(typecast(buffer(mcolon(MixerStatusFidIdx + 20, MixerStatusFidIdx + 23)), 'single'))';
	MixerStatus.Mixer7 = double(typecast(buffer(mcolon(MixerStatusFidIdx + 24, MixerStatusFidIdx + 27)), 'single'))';
	MixerStatus.Mixer8 = double(typecast(buffer(mcolon(MixerStatusFidIdx + 28, MixerStatusFidIdx + 31)), 'single'))';
	MixerStatus.Mixer9 = double(typecast(buffer(mcolon(MixerStatusFidIdx + 32, MixerStatusFidIdx + 35)), 'single'))';
	MixerStatus.Mixer10 = double(typecast(buffer(mcolon(MixerStatusFidIdx + 36, MixerStatusFidIdx + 39)), 'single'))';
	MixerStatus.Mixer11 = double(typecast(buffer(mcolon(MixerStatusFidIdx + 40, MixerStatusFidIdx + 43)), 'single'))';
	MixerStatus.Mixer12 = double(typecast(buffer(mcolon(MixerStatusFidIdx + 44, MixerStatusFidIdx + 47)), 'single'))';

% MPUGyroAccelSettings typecasting
	MPUGyroAccelSettings.timestamp = double(typecast(buffer(mcolon(MPUGyroAccelSettingsFidIdx - headerLen - oplHeaderLen, MPUGyroAccelSettingsFidIdx + 3 - headerLen - oplHeaderLen)), 'uint32'))';
	MPUGyroAccelSettings.GyroScale = double(typecast(buffer(mcolon(MPUGyroAccelSettingsFidIdx + 0, MPUGyroAccelSettingsFidIdx + 0)), 'uint8'))';
	MPUGyroAccelSettings.AccelScale = double(typecast(buffer(mcolon(MPUGyroAccelSettingsFidIdx + 1, MPUGyroAccelSettingsFidIdx + 1)), 'uint8'))';
	MPUGyroAccelSettings.FilterSetting = double(typecast(buffer(mcolon(MPUGyroAccelSettingsFidIdx + 2, MPUGyroAccelSettingsFidIdx + 2)), 'uint8'))';

% NedAccel typecasting
	NedAccel.timestamp = double(typecast(buffer(mcolon(NedAccelFidIdx - headerLen - oplHeaderLen, NedAccelFidIdx + 3 - headerLen - oplHeaderLen)), 'uint32'))';
	NedAccel.North = double(typecast(buffer(mcolon(NedAccelFidIdx + 0, NedAccelFidIdx + 3)), 'single'))';
	NedAccel.East = double(typecast(buffer(mcolon(NedAccelFidIdx + 4, NedAccelFidIdx + 7)), 'single'))';
	NedAccel.Down = double(typecast(buffer(mcolon(NedAccelFidIdx + 8, NedAccelFidIdx + 11)), 'single'))';

% ObjectPersistence typecasting
	ObjectPersistence.timestamp = double(typecast(buffer(mcolon(ObjectPersistenceFidIdx - headerLen - oplHeaderLen, ObjectPersistenceFidIdx + 3 - headerLen - oplHeaderLen)), 'uint32'))';
	ObjectPersistence.ObjectID = double(typecast(buffer(mcolon(ObjectPersistenceFidIdx + 0, ObjectPersistenceFidIdx + 3)), 'uint32'))';
	ObjectPersistence.InstanceID = double(typecast(buffer(mcolon(ObjectPersistenceFidIdx + 4, ObjectPersistenceFidIdx + 7)), 'uint32'))';
	ObjectPersistence.Operation = double(typecast(buffer(mcolon(ObjectPersistenceFidIdx + 8, ObjectPersistenceFidIdx + 8)), 'uint8'))';
	ObjectPersistence.Selection = double(typecast(buffer(mcolon(ObjectPersistenceFidIdx + 9, ObjectPersistenceFidIdx + 9)), 'uint8'))';

% OPLinkReceiver typecasting
	OPLinkReceiver.timestamp = double(typecast(buffer(mcolon(OPLinkReceiverFidIdx - headerLen - oplHeaderLen, OPLinkReceiverFidIdx + 3 - headerLen - oplHeaderLen)), 'uint32'))';
	OPLinkReceiver.Channel = reshape(double(typecast(buffer(mcolon(OPLinkReceiverFidIdx + 0, OPLinkReceiverFidIdx + 31)), 'int16')), 16, [] );

% OPLinkSettings typecasting
	OPLinkSettings.timestamp = double(typecast(buffer(mcolon(OPLinkSettingsFidIdx - headerLen - oplHeaderLen, OPLinkSettingsFidIdx + 3 - headerLen - oplHeaderLen)), 'uint32'))';
	OPLinkSettings.CoordID = double(typecast(buffer(mcolon(OPLinkSettingsFidIdx + 0, OPLinkSettingsFidIdx + 3)), 'uint32'))';
	OPLinkSettings.CustomDeviceID = double(typecast(buffer(mcolon(OPLinkSettingsFidIdx + 4, OPLinkSettingsFidIdx + 7)), 'uint32'))';
	OPLinkSettings.SerialBaudrate = double(typecast(buffer(mcolon(OPLinkSettingsFidIdx + 8, OPLinkSettingsFidIdx + 11)), 'uint32'))';
	OPLinkSettings.RFFrequency = double(typecast(buffer(mcolon(OPLinkSettingsFidIdx + 12, OPLinkSettingsFidIdx + 15)), 'uint32'))';
	OPLinkSettings.FailsafeDelay = double(typecast(buffer(mcolon(OPLinkSettingsFidIdx + 16, OPLinkSettingsFidIdx + 19)), 'uint32'))';
	OPLinkSettings.BeaconFrequency = double(typecast(buffer(mcolon(OPLinkSettingsFidIdx + 20, OPLinkSettingsFidIdx + 23)), 'uint32'))';
	OPLinkSettings.Protocol = double(typecast(buffer(mcolon(OPLinkSettingsFidIdx + 24, OPLinkSettingsFidIdx + 24)), 'uint8'))';
	OPLinkSettings.LinkType = double(typecast(buffer(mcolon(OPLinkSettingsFidIdx + 25, OPLinkSettingsFidIdx + 25)), 'uint8'))';
	OPLinkSettings.MainPort = double(typecast(buffer(mcolon(OPLinkSettingsFidIdx + 26, OPLinkSettingsFidIdx + 26)), 'uint8'))';
	OPLinkSettings.FlexiPort = double(typecast(buffer(mcolon(OPLinkSettingsFidIdx + 27, OPLinkSettingsFidIdx + 27)), 'uint8'))';
	OPLinkSettings.VCPPort = double(typecast(buffer(mcolon(OPLinkSettingsFidIdx + 28, OPLinkSettingsFidIdx + 28)), 'uint8'))';
	OPLinkSettings.ComSpeed = double(typecast(buffer(mcolon(OPLinkSettingsFidIdx + 29, OPLinkSettingsFidIdx + 29)), 'uint8'))';
	OPLinkSettings.MaxRFPower = double(typecast(buffer(mcolon(OPLinkSettingsFidIdx + 30, OPLinkSettingsFidIdx + 30)), 'uint8'))';
	OPLinkSettings.MinChannel = double(typecast(buffer(mcolon(OPLinkSettingsFidIdx + 31, OPLinkSettingsFidIdx + 31)), 'uint8'))';
	OPLinkSettings.MaxChannel = double(typecast(buffer(mcolon(OPLinkSettingsFidIdx + 32, OPLinkSettingsFidIdx + 32)), 'uint8'))';
	OPLinkSettings.Version = double(typecast(buffer(mcolon(OPLinkSettingsFidIdx + 33, OPLinkSettingsFidIdx + 33)), 'uint8'))';
	OPLinkSettings.RSSIType = double(typecast(buffer(mcolon(OPLinkSettingsFidIdx + 34, OPLinkSettingsFidIdx + 34)), 'uint8'))';
	OPLinkSettings.RFPower = double(typecast(buffer(mcolon(OPLinkSettingsFidIdx + 35, OPLinkSettingsFidIdx + 35)), 'uint8'))';
	OPLinkSettings.RFChannelSpacing = double(typecast(buffer(mcolon(OPLinkSettingsFidIdx + 36, OPLinkSettingsFidIdx + 36)), 'uint8'))';
	OPLinkSettings.HopChannel = reshape(double(typecast(buffer(mcolon(OPLinkSettingsFidIdx + 37, OPLinkSettingsFidIdx + 60)), 'uint8')), 24, [] );
	OPLinkSettings.ModemParams = double(typecast(buffer(mcolon(OPLinkSettingsFidIdx + 61, OPLinkSettingsFidIdx + 61)), 'uint8'))';
	OPLinkSettings.Flags = double(typecast(buffer(mcolon(OPLinkSettingsFidIdx + 62, OPLinkSettingsFidIdx + 62)), 'uint8'))';
	OPLinkSettings.BeaconDelay = double(typecast(buffer(mcolon(OPLinkSettingsFidIdx + 63, OPLinkSettingsFidIdx + 63)), 'uint8'))';
	OPLinkSettings.BeaconPeriod = double(typecast(buffer(mcolon(OPLinkSettingsFidIdx + 64, OPLinkSettingsFidIdx + 64)), 'uint8'))';

% OPLinkStatus typecasting
	OPLinkStatus.timestamp = double(typecast(buffer(mcolon(OPLinkStatusFidIdx - headerLen - oplHeaderLen, OPLinkStatusFidIdx + 3 - headerLen - oplHeaderLen)), 'uint32'))';
	OPLinkStatus.DeviceID = double(typecast(buffer(mcolon(OPLinkStatusFidIdx + 0, OPLinkStatusFidIdx + 3)), 'uint32'))';
	OPLinkStatus.PairIDs = reshape(double(typecast(buffer(mcolon(OPLinkStatusFidIdx + 4, OPLinkStatusFidIdx + 19)), 'uint32')), 4, [] );
	OPLinkStatus.BoardRevision = double(typecast(buffer(mcolon(OPLinkStatusFidIdx + 20, OPLinkStatusFidIdx + 21)), 'uint16'))';
	OPLinkStatus.HeapRemaining = double(typecast(buffer(mcolon(OPLinkStatusFidIdx + 22, OPLinkStatusFidIdx + 23)), 'uint16'))';
	OPLinkStatus.UAVTalkErrors = double(typecast(buffer(mcolon(OPLinkStatusFidIdx + 24, OPLinkStatusFidIdx + 25)), 'uint16'))';
	OPLinkStatus.LinkQuality = double(typecast(buffer(mcolon(OPLinkStatusFidIdx + 26, OPLinkStatusFidIdx + 27)), 'uint16'))';
	OPLinkStatus.TXRate = double(typecast(buffer(mcolon(OPLinkStatusFidIdx + 28, OPLinkStatusFidIdx + 29)), 'uint16'))';
	OPLinkStatus.RXRate = double(typecast(buffer(mcolon(OPLinkStatusFidIdx + 30, OPLinkStatusFidIdx + 31)), 'uint16'))';
	OPLinkStatus.TXSeq = double(typecast(buffer(mcolon(OPLinkStatusFidIdx + 32, OPLinkStatusFidIdx + 33)), 'uint16'))';
	OPLinkStatus.RXSeq = double(typecast(buffer(mcolon(OPLinkStatusFidIdx + 34, OPLinkStatusFidIdx + 35)), 'uint16'))';
	OPLinkStatus.TXPacketRate = double(typecast(buffer(mcolon(OPLinkStatusFidIdx + 36, OPLinkStatusFidIdx + 37)), 'uint16'))';
	OPLinkStatus.RXPacketRate = double(typecast(buffer(mcolon(OPLinkStatusFidIdx + 38, OPLinkStatusFidIdx + 39)), 'uint16'))';
	OPLinkStatus.Description = reshape(double(typecast(buffer(mcolon(OPLinkStatusFidIdx + 40, OPLinkStatusFidIdx + 79)), 'uint8')), 40, [] );
	OPLinkStatus.CPUSerial = reshape(double(typecast(buffer(mcolon(OPLinkStatusFidIdx + 80, OPLinkStatusFidIdx + 91)), 'uint8')), 12, [] );
	OPLinkStatus.BoardType = double(typecast(buffer(mcolon(OPLinkStatusFidIdx + 92, OPLinkStatusFidIdx + 92)), 'uint8'))';
	OPLinkStatus.RxGood = double(typecast(buffer(mcolon(OPLinkStatusFidIdx + 93, OPLinkStatusFidIdx + 93)), 'uint8'))';
	OPLinkStatus.RxCorrected = double(typecast(buffer(mcolon(OPLinkStatusFidIdx + 94, OPLinkStatusFidIdx + 94)), 'uint8'))';
	OPLinkStatus.RxErrors = double(typecast(buffer(mcolon(OPLinkStatusFidIdx + 95, OPLinkStatusFidIdx + 95)), 'uint8'))';
	OPLinkStatus.RxMissed = double(typecast(buffer(mcolon(OPLinkStatusFidIdx + 96, OPLinkStatusFidIdx + 96)), 'uint8'))';
	OPLinkStatus.RxFailure = double(typecast(buffer(mcolon(OPLinkStatusFidIdx + 97, OPLinkStatusFidIdx + 97)), 'uint8'))';
	OPLinkStatus.TxDropped = double(typecast(buffer(mcolon(OPLinkStatusFidIdx + 98, OPLinkStatusFidIdx + 98)), 'uint8'))';
	OPLinkStatus.TxFailure = double(typecast(buffer(mcolon(OPLinkStatusFidIdx + 99, OPLinkStatusFidIdx + 99)), 'uint8'))';
	OPLinkStatus.Resets = double(typecast(buffer(mcolon(OPLinkStatusFidIdx + 100, OPLinkStatusFidIdx + 100)), 'uint8'))';
	OPLinkStatus.Timeouts = double(typecast(buffer(mcolon(OPLinkStatusFidIdx + 101, OPLinkStatusFidIdx + 101)), 'uint8'))';
	OPLinkStatus.RSSI = double(typecast(buffer(mcolon(OPLinkStatusFidIdx + 102, OPLinkStatusFidIdx + 102)), 'int8'))';
	OPLinkStatus.LinkState = double(typecast(buffer(mcolon(OPLinkStatusFidIdx + 103, OPLinkStatusFidIdx + 103)), 'uint8'))';
	OPLinkStatus.PairSignalStrengths = reshape(double(typecast(buffer(mcolon(OPLinkStatusFidIdx + 104, OPLinkStatusFidIdx + 107)), 'int8')), 4, [] );

% OsdSettings typecasting
	OsdSettings.timestamp = double(typecast(buffer(mcolon(OsdSettingsFidIdx - headerLen - oplHeaderLen, OsdSettingsFidIdx + 3 - headerLen - oplHeaderLen)), 'uint32'))';
	OsdSettings.AttitudeSetup = reshape(double(typecast(buffer(mcolon(OsdSettingsFidIdx + 0, OsdSettingsFidIdx + 3)), 'int16')), 2, [] );
	OsdSettings.TimeSetup = reshape(double(typecast(buffer(mcolon(OsdSettingsFidIdx + 4, OsdSettingsFidIdx + 7)), 'int16')), 2, [] );
	OsdSettings.BatterySetup = reshape(double(typecast(buffer(mcolon(OsdSettingsFidIdx + 8, OsdSettingsFidIdx + 11)), 'int16')), 2, [] );
	OsdSettings.SpeedSetup = reshape(double(typecast(buffer(mcolon(OsdSettingsFidIdx + 12, OsdSettingsFidIdx + 15)), 'int16')), 2, [] );
	OsdSettings.AltitudeSetup = reshape(double(typecast(buffer(mcolon(OsdSettingsFidIdx + 16, OsdSettingsFidIdx + 19)), 'int16')), 2, [] );
	OsdSettings.HeadingSetup = reshape(double(typecast(buffer(mcolon(OsdSettingsFidIdx + 20, OsdSettingsFidIdx + 23)), 'int16')), 2, [] );
	OsdSettings.Attitude = double(typecast(buffer(mcolon(OsdSettingsFidIdx + 24, OsdSettingsFidIdx + 24)), 'uint8'))';
	OsdSettings.Time = double(typecast(buffer(mcolon(OsdSettingsFidIdx + 25, OsdSettingsFidIdx + 25)), 'uint8'))';
	OsdSettings.Battery = double(typecast(buffer(mcolon(OsdSettingsFidIdx + 26, OsdSettingsFidIdx + 26)), 'uint8'))';
	OsdSettings.Speed = double(typecast(buffer(mcolon(OsdSettingsFidIdx + 27, OsdSettingsFidIdx + 27)), 'uint8'))';
	OsdSettings.Altitude = double(typecast(buffer(mcolon(OsdSettingsFidIdx + 28, OsdSettingsFidIdx + 28)), 'uint8'))';
	OsdSettings.Heading = double(typecast(buffer(mcolon(OsdSettingsFidIdx + 29, OsdSettingsFidIdx + 29)), 'uint8'))';
	OsdSettings.Screen = double(typecast(buffer(mcolon(OsdSettingsFidIdx + 30, OsdSettingsFidIdx + 30)), 'uint8'))';
	OsdSettings.White = double(typecast(buffer(mcolon(OsdSettingsFidIdx + 31, OsdSettingsFidIdx + 31)), 'uint8'))';
	OsdSettings.Black = double(typecast(buffer(mcolon(OsdSettingsFidIdx + 32, OsdSettingsFidIdx + 32)), 'uint8'))';
	OsdSettings.AltitudeSource = double(typecast(buffer(mcolon(OsdSettingsFidIdx + 33, OsdSettingsFidIdx + 33)), 'uint8'))';

% OveroSyncSettings typecasting
	OveroSyncSettings.timestamp = double(typecast(buffer(mcolon(OveroSyncSettingsFidIdx - headerLen - oplHeaderLen, OveroSyncSettingsFidIdx + 3 - headerLen - oplHeaderLen)), 'uint32'))';
	OveroSyncSettings.LogOn = double(typecast(buffer(mcolon(OveroSyncSettingsFidIdx + 0, OveroSyncSettingsFidIdx + 0)), 'uint8'))';

% OveroSyncStats typecasting
	OveroSyncStats.timestamp = double(typecast(buffer(mcolon(OveroSyncStatsFidIdx - headerLen - oplHeaderLen, OveroSyncStatsFidIdx + 3 - headerLen - oplHeaderLen)), 'uint32'))';
	OveroSyncStats.Send = double(typecast(buffer(mcolon(OveroSyncStatsFidIdx + 0, OveroSyncStatsFidIdx + 3)), 'uint32'))';
	OveroSyncStats.Received = double(typecast(buffer(mcolon(OveroSyncStatsFidIdx + 4, OveroSyncStatsFidIdx + 7)), 'uint32'))';
	OveroSyncStats.FramesyncErrors = double(typecast(buffer(mcolon(OveroSyncStatsFidIdx + 8, OveroSyncStatsFidIdx + 11)), 'uint32'))';
	OveroSyncStats.UnderrunErrors = double(typecast(buffer(mcolon(OveroSyncStatsFidIdx + 12, OveroSyncStatsFidIdx + 15)), 'uint32'))';
	OveroSyncStats.DroppedUpdates = double(typecast(buffer(mcolon(OveroSyncStatsFidIdx + 16, OveroSyncStatsFidIdx + 19)), 'uint32'))';
	OveroSyncStats.Packets = double(typecast(buffer(mcolon(OveroSyncStatsFidIdx + 20, OveroSyncStatsFidIdx + 23)), 'uint32'))';
	OveroSyncStats.Connected = double(typecast(buffer(mcolon(OveroSyncStatsFidIdx + 24, OveroSyncStatsFidIdx + 24)), 'uint8'))';

% PathAction typecasting
	PathAction.timestamp = double(typecast(buffer(mcolon(PathActionFidIdx - headerLen - oplHeaderLen, PathActionFidIdx + 3 - headerLen - oplHeaderLen)), 'uint32'))';
	PathAction.instanceID = double(typecast(buffer(mcolon(PathActionFidIdx - 2, PathActionFidIdx - 2 + 1)), 'uint16'))';
	PathAction.ModeParameters = reshape(double(typecast(buffer(mcolon(PathActionFidIdx + 0, PathActionFidIdx + 15)), 'single')), 4, [] );
	PathAction.ConditionParameters = reshape(double(typecast(buffer(mcolon(PathActionFidIdx + 16, PathActionFidIdx + 31)), 'single')), 4, [] );
	PathAction.JumpDestination = double(typecast(buffer(mcolon(PathActionFidIdx + 32, PathActionFidIdx + 33)), 'int16'))';
	PathAction.ErrorDestination = double(typecast(buffer(mcolon(PathActionFidIdx + 34, PathActionFidIdx + 35)), 'int16'))';
	PathAction.Mode = double(typecast(buffer(mcolon(PathActionFidIdx + 36, PathActionFidIdx + 36)), 'uint8'))';
	PathAction.EndCondition = double(typecast(buffer(mcolon(PathActionFidIdx + 37, PathActionFidIdx + 37)), 'uint8'))';
	PathAction.Command = double(typecast(buffer(mcolon(PathActionFidIdx + 38, PathActionFidIdx + 38)), 'uint8'))';

% PathDesired typecasting
	PathDesired.timestamp = double(typecast(buffer(mcolon(PathDesiredFidIdx - headerLen - oplHeaderLen, PathDesiredFidIdx + 3 - headerLen - oplHeaderLen)), 'uint32'))';
	PathDesired.Start = reshape(double(typecast(buffer(mcolon(PathDesiredFidIdx + 0, PathDesiredFidIdx + 11)), 'single')), 3, [] );
	PathDesired.End = reshape(double(typecast(buffer(mcolon(PathDesiredFidIdx + 12, PathDesiredFidIdx + 23)), 'single')), 3, [] );
	PathDesired.StartingVelocity = double(typecast(buffer(mcolon(PathDesiredFidIdx + 24, PathDesiredFidIdx + 27)), 'single'))';
	PathDesired.EndingVelocity = double(typecast(buffer(mcolon(PathDesiredFidIdx + 28, PathDesiredFidIdx + 31)), 'single'))';
	PathDesired.ModeParameters = reshape(double(typecast(buffer(mcolon(PathDesiredFidIdx + 32, PathDesiredFidIdx + 47)), 'single')), 4, [] );
	PathDesired.UID = double(typecast(buffer(mcolon(PathDesiredFidIdx + 48, PathDesiredFidIdx + 49)), 'int16'))';
	PathDesired.Mode = double(typecast(buffer(mcolon(PathDesiredFidIdx + 50, PathDesiredFidIdx + 50)), 'uint8'))';

% PathPlan typecasting
	PathPlan.timestamp = double(typecast(buffer(mcolon(PathPlanFidIdx - headerLen - oplHeaderLen, PathPlanFidIdx + 3 - headerLen - oplHeaderLen)), 'uint32'))';
	PathPlan.WaypointCount = double(typecast(buffer(mcolon(PathPlanFidIdx + 0, PathPlanFidIdx + 1)), 'uint16'))';
	PathPlan.PathActionCount = double(typecast(buffer(mcolon(PathPlanFidIdx + 2, PathPlanFidIdx + 3)), 'uint16'))';
	PathPlan.Crc = double(typecast(buffer(mcolon(PathPlanFidIdx + 4, PathPlanFidIdx + 4)), 'uint8'))';

% PathStatus typecasting
	PathStatus.timestamp = double(typecast(buffer(mcolon(PathStatusFidIdx - headerLen - oplHeaderLen, PathStatusFidIdx + 3 - headerLen - oplHeaderLen)), 'uint32'))';
	PathStatus.fractional_progress = double(typecast(buffer(mcolon(PathStatusFidIdx + 0, PathStatusFidIdx + 3)), 'single'))';
	PathStatus.error = double(typecast(buffer(mcolon(PathStatusFidIdx + 4, PathStatusFidIdx + 7)), 'single'))';
	PathStatus.path_direction_north = double(typecast(buffer(mcolon(PathStatusFidIdx + 8, PathStatusFidIdx + 11)), 'single'))';
	PathStatus.path_direction_east = double(typecast(buffer(mcolon(PathStatusFidIdx + 12, PathStatusFidIdx + 15)), 'single'))';
	PathStatus.path_direction_down = double(typecast(buffer(mcolon(PathStatusFidIdx + 16, PathStatusFidIdx + 19)), 'single'))';
	PathStatus.correction_direction_north = double(typecast(buffer(mcolon(PathStatusFidIdx + 20, PathStatusFidIdx + 23)), 'single'))';
	PathStatus.correction_direction_east = double(typecast(buffer(mcolon(PathStatusFidIdx + 24, PathStatusFidIdx + 27)), 'single'))';
	PathStatus.correction_direction_down = double(typecast(buffer(mcolon(PathStatusFidIdx + 28, PathStatusFidIdx + 31)), 'single'))';
	PathStatus.path_time = double(typecast(buffer(mcolon(PathStatusFidIdx + 32, PathStatusFidIdx + 35)), 'single'))';
	PathStatus.UID = double(typecast(buffer(mcolon(PathStatusFidIdx + 36, PathStatusFidIdx + 37)), 'int16'))';
	PathStatus.Status = double(typecast(buffer(mcolon(PathStatusFidIdx + 38, PathStatusFidIdx + 38)), 'uint8'))';

% PathSummary typecasting
	PathSummary.timestamp = double(typecast(buffer(mcolon(PathSummaryFidIdx - headerLen - oplHeaderLen, PathSummaryFidIdx + 3 - headerLen - oplHeaderLen)), 'uint32'))';
	PathSummary.brake_distance_offset = double(typecast(buffer(mcolon(PathSummaryFidIdx + 0, PathSummaryFidIdx + 3)), 'single'))';
	PathSummary.time_remaining = double(typecast(buffer(mcolon(PathSummaryFidIdx + 4, PathSummaryFidIdx + 7)), 'single'))';
	PathSummary.fractional_progress = double(typecast(buffer(mcolon(PathSummaryFidIdx + 8, PathSummaryFidIdx + 11)), 'single'))';
	PathSummary.decelrate = double(typecast(buffer(mcolon(PathSummaryFidIdx + 12, PathSummaryFidIdx + 15)), 'single'))';
	PathSummary.brakeRateActualDesiredRatio = double(typecast(buffer(mcolon(PathSummaryFidIdx + 16, PathSummaryFidIdx + 19)), 'single'))';
	PathSummary.velocityIntoHold = double(typecast(buffer(mcolon(PathSummaryFidIdx + 20, PathSummaryFidIdx + 23)), 'single'))';
	PathSummary.UID = double(typecast(buffer(mcolon(PathSummaryFidIdx + 24, PathSummaryFidIdx + 25)), 'int16'))';
	PathSummary.brake_exit_reason = double(typecast(buffer(mcolon(PathSummaryFidIdx + 26, PathSummaryFidIdx + 26)), 'uint8'))';
	PathSummary.Mode = double(typecast(buffer(mcolon(PathSummaryFidIdx + 27, PathSummaryFidIdx + 27)), 'uint8'))';

% PerfCounter typecasting
	PerfCounter.timestamp = double(typecast(buffer(mcolon(PerfCounterFidIdx - headerLen - oplHeaderLen, PerfCounterFidIdx + 3 - headerLen - oplHeaderLen)), 'uint32'))';
	PerfCounter.instanceID = double(typecast(buffer(mcolon(PerfCounterFidIdx - 2, PerfCounterFidIdx - 2 + 1)), 'uint16'))';
	PerfCounter.Id = double(typecast(buffer(mcolon(PerfCounterFidIdx + 0, PerfCounterFidIdx + 3)), 'uint32'))';
	PerfCounter.Counter = reshape(double(typecast(buffer(mcolon(PerfCounterFidIdx + 4, PerfCounterFidIdx + 15)), 'int32')), 3, [] );

% PIDStatus typecasting
	PIDStatus.timestamp = double(typecast(buffer(mcolon(PIDStatusFidIdx - headerLen - oplHeaderLen, PIDStatusFidIdx + 3 - headerLen - oplHeaderLen)), 'uint32'))';
	PIDStatus.setpoint = double(typecast(buffer(mcolon(PIDStatusFidIdx + 0, PIDStatusFidIdx + 3)), 'single'))';
	PIDStatus.actual = double(typecast(buffer(mcolon(PIDStatusFidIdx + 4, PIDStatusFidIdx + 7)), 'single'))';
	PIDStatus.error = double(typecast(buffer(mcolon(PIDStatusFidIdx + 8, PIDStatusFidIdx + 11)), 'single'))';
	PIDStatus.ulow = double(typecast(buffer(mcolon(PIDStatusFidIdx + 12, PIDStatusFidIdx + 15)), 'single'))';
	PIDStatus.uhigh = double(typecast(buffer(mcolon(PIDStatusFidIdx + 16, PIDStatusFidIdx + 19)), 'single'))';
	PIDStatus.command = double(typecast(buffer(mcolon(PIDStatusFidIdx + 20, PIDStatusFidIdx + 23)), 'single'))';
	PIDStatus.P = double(typecast(buffer(mcolon(PIDStatusFidIdx + 24, PIDStatusFidIdx + 27)), 'single'))';
	PIDStatus.I = double(typecast(buffer(mcolon(PIDStatusFidIdx + 28, PIDStatusFidIdx + 31)), 'single'))';
	PIDStatus.D = double(typecast(buffer(mcolon(PIDStatusFidIdx + 32, PIDStatusFidIdx + 35)), 'single'))';

% PoiLearnSettings typecasting
	PoiLearnSettings.timestamp = double(typecast(buffer(mcolon(PoiLearnSettingsFidIdx - headerLen - oplHeaderLen, PoiLearnSettingsFidIdx + 3 - headerLen - oplHeaderLen)), 'uint32'))';
	PoiLearnSettings.Input = double(typecast(buffer(mcolon(PoiLearnSettingsFidIdx + 0, PoiLearnSettingsFidIdx + 0)), 'uint8'))';

% PoiLocation typecasting
	PoiLocation.timestamp = double(typecast(buffer(mcolon(PoiLocationFidIdx - headerLen - oplHeaderLen, PoiLocationFidIdx + 3 - headerLen - oplHeaderLen)), 'uint32'))';
	PoiLocation.North = double(typecast(buffer(mcolon(PoiLocationFidIdx + 0, PoiLocationFidIdx + 3)), 'single'))';
	PoiLocation.East = double(typecast(buffer(mcolon(PoiLocationFidIdx + 4, PoiLocationFidIdx + 7)), 'single'))';
	PoiLocation.Down = double(typecast(buffer(mcolon(PoiLocationFidIdx + 8, PoiLocationFidIdx + 11)), 'single'))';

% PositionState typecasting
	PositionState.timestamp = double(typecast(buffer(mcolon(PositionStateFidIdx - headerLen - oplHeaderLen, PositionStateFidIdx + 3 - headerLen - oplHeaderLen)), 'uint32'))';
	PositionState.North = double(typecast(buffer(mcolon(PositionStateFidIdx + 0, PositionStateFidIdx + 3)), 'single'))';
	PositionState.East = double(typecast(buffer(mcolon(PositionStateFidIdx + 4, PositionStateFidIdx + 7)), 'single'))';
	PositionState.Down = double(typecast(buffer(mcolon(PositionStateFidIdx + 8, PositionStateFidIdx + 11)), 'single'))';

% RadioComBridgeStats typecasting
	RadioComBridgeStats.timestamp = double(typecast(buffer(mcolon(RadioComBridgeStatsFidIdx - headerLen - oplHeaderLen, RadioComBridgeStatsFidIdx + 3 - headerLen - oplHeaderLen)), 'uint32'))';
	RadioComBridgeStats.TelemetryTxBytes = double(typecast(buffer(mcolon(RadioComBridgeStatsFidIdx + 0, RadioComBridgeStatsFidIdx + 3)), 'uint32'))';
	RadioComBridgeStats.TelemetryTxFailures = double(typecast(buffer(mcolon(RadioComBridgeStatsFidIdx + 4, RadioComBridgeStatsFidIdx + 7)), 'uint32'))';
	RadioComBridgeStats.TelemetryTxRetries = double(typecast(buffer(mcolon(RadioComBridgeStatsFidIdx + 8, RadioComBridgeStatsFidIdx + 11)), 'uint32'))';
	RadioComBridgeStats.TelemetryRxBytes = double(typecast(buffer(mcolon(RadioComBridgeStatsFidIdx + 12, RadioComBridgeStatsFidIdx + 15)), 'uint32'))';
	RadioComBridgeStats.TelemetryRxFailures = double(typecast(buffer(mcolon(RadioComBridgeStatsFidIdx + 16, RadioComBridgeStatsFidIdx + 19)), 'uint32'))';
	RadioComBridgeStats.TelemetryRxSyncErrors = double(typecast(buffer(mcolon(RadioComBridgeStatsFidIdx + 20, RadioComBridgeStatsFidIdx + 23)), 'uint32'))';
	RadioComBridgeStats.TelemetryRxCrcErrors = double(typecast(buffer(mcolon(RadioComBridgeStatsFidIdx + 24, RadioComBridgeStatsFidIdx + 27)), 'uint32'))';
	RadioComBridgeStats.RadioTxBytes = double(typecast(buffer(mcolon(RadioComBridgeStatsFidIdx + 28, RadioComBridgeStatsFidIdx + 31)), 'uint32'))';
	RadioComBridgeStats.RadioTxFailures = double(typecast(buffer(mcolon(RadioComBridgeStatsFidIdx + 32, RadioComBridgeStatsFidIdx + 35)), 'uint32'))';
	RadioComBridgeStats.RadioTxRetries = double(typecast(buffer(mcolon(RadioComBridgeStatsFidIdx + 36, RadioComBridgeStatsFidIdx + 39)), 'uint32'))';
	RadioComBridgeStats.RadioRxBytes = double(typecast(buffer(mcolon(RadioComBridgeStatsFidIdx + 40, RadioComBridgeStatsFidIdx + 43)), 'uint32'))';
	RadioComBridgeStats.RadioRxFailures = double(typecast(buffer(mcolon(RadioComBridgeStatsFidIdx + 44, RadioComBridgeStatsFidIdx + 47)), 'uint32'))';
	RadioComBridgeStats.RadioRxSyncErrors = double(typecast(buffer(mcolon(RadioComBridgeStatsFidIdx + 48, RadioComBridgeStatsFidIdx + 51)), 'uint32'))';
	RadioComBridgeStats.RadioRxCrcErrors = double(typecast(buffer(mcolon(RadioComBridgeStatsFidIdx + 52, RadioComBridgeStatsFidIdx + 55)), 'uint32'))';

% RateDesired typecasting
	RateDesired.timestamp = double(typecast(buffer(mcolon(RateDesiredFidIdx - headerLen - oplHeaderLen, RateDesiredFidIdx + 3 - headerLen - oplHeaderLen)), 'uint32'))';
	RateDesired.Roll = double(typecast(buffer(mcolon(RateDesiredFidIdx + 0, RateDesiredFidIdx + 3)), 'single'))';
	RateDesired.Pitch = double(typecast(buffer(mcolon(RateDesiredFidIdx + 4, RateDesiredFidIdx + 7)), 'single'))';
	RateDesired.Yaw = double(typecast(buffer(mcolon(RateDesiredFidIdx + 8, RateDesiredFidIdx + 11)), 'single'))';
	RateDesired.Thrust = double(typecast(buffer(mcolon(RateDesiredFidIdx + 12, RateDesiredFidIdx + 15)), 'single'))';

% ReceiverActivity typecasting
	ReceiverActivity.timestamp = double(typecast(buffer(mcolon(ReceiverActivityFidIdx - headerLen - oplHeaderLen, ReceiverActivityFidIdx + 3 - headerLen - oplHeaderLen)), 'uint32'))';
	ReceiverActivity.ActiveGroup = double(typecast(buffer(mcolon(ReceiverActivityFidIdx + 0, ReceiverActivityFidIdx + 0)), 'uint8'))';
	ReceiverActivity.ActiveChannel = double(typecast(buffer(mcolon(ReceiverActivityFidIdx + 1, ReceiverActivityFidIdx + 1)), 'uint8'))';

% ReceiverStatus typecasting
	ReceiverStatus.timestamp = double(typecast(buffer(mcolon(ReceiverStatusFidIdx - headerLen - oplHeaderLen, ReceiverStatusFidIdx + 3 - headerLen - oplHeaderLen)), 'uint32'))';
	ReceiverStatus.Quality = double(typecast(buffer(mcolon(ReceiverStatusFidIdx + 0, ReceiverStatusFidIdx + 0)), 'uint8'))';

% RevoCalibration typecasting
	RevoCalibration.timestamp = double(typecast(buffer(mcolon(RevoCalibrationFidIdx - headerLen - oplHeaderLen, RevoCalibrationFidIdx + 3 - headerLen - oplHeaderLen)), 'uint32'))';
	RevoCalibration.mag_bias = reshape(double(typecast(buffer(mcolon(RevoCalibrationFidIdx + 0, RevoCalibrationFidIdx + 11)), 'single')), 3, [] );
	RevoCalibration.mag_transform = reshape(double(typecast(buffer(mcolon(RevoCalibrationFidIdx + 12, RevoCalibrationFidIdx + 47)), 'single')), 9, [] );
	RevoCalibration.MagBiasNullingRate = double(typecast(buffer(mcolon(RevoCalibrationFidIdx + 48, RevoCalibrationFidIdx + 51)), 'single'))';
	RevoCalibration.BiasCorrectedRaw = double(typecast(buffer(mcolon(RevoCalibrationFidIdx + 52, RevoCalibrationFidIdx + 52)), 'uint8'))';

% RevoSettings typecasting
	RevoSettings.timestamp = double(typecast(buffer(mcolon(RevoSettingsFidIdx - headerLen - oplHeaderLen, RevoSettingsFidIdx + 3 - headerLen - oplHeaderLen)), 'uint32'))';
	RevoSettings.BaroGPSOffsetCorrectionAlpha = double(typecast(buffer(mcolon(RevoSettingsFidIdx + 0, RevoSettingsFidIdx + 3)), 'single'))';
	RevoSettings.MagnetometerMaxDeviation = reshape(double(typecast(buffer(mcolon(RevoSettingsFidIdx + 4, RevoSettingsFidIdx + 11)), 'single')), 2, [] );
	RevoSettings.BaroTempCorrectionPolynomial = reshape(double(typecast(buffer(mcolon(RevoSettingsFidIdx + 12, RevoSettingsFidIdx + 27)), 'single')), 4, [] );
	RevoSettings.BaroTempCorrectionExtent = reshape(double(typecast(buffer(mcolon(RevoSettingsFidIdx + 28, RevoSettingsFidIdx + 35)), 'single')), 2, [] );
	RevoSettings.VelocityPostProcessingLowPassAlpha = double(typecast(buffer(mcolon(RevoSettingsFidIdx + 36, RevoSettingsFidIdx + 39)), 'single'))';
	RevoSettings.FusionAlgorithm = double(typecast(buffer(mcolon(RevoSettingsFidIdx + 40, RevoSettingsFidIdx + 40)), 'uint8'))';

% SonarAltitude typecasting
	SonarAltitude.timestamp = double(typecast(buffer(mcolon(SonarAltitudeFidIdx - headerLen - oplHeaderLen, SonarAltitudeFidIdx + 3 - headerLen - oplHeaderLen)), 'uint32'))';
	SonarAltitude.Altitude = double(typecast(buffer(mcolon(SonarAltitudeFidIdx + 0, SonarAltitudeFidIdx + 3)), 'single'))';

% StabilizationBank typecasting
	StabilizationBank.timestamp = double(typecast(buffer(mcolon(StabilizationBankFidIdx - headerLen - oplHeaderLen, StabilizationBankFidIdx + 3 - headerLen - oplHeaderLen)), 'uint32'))';
	StabilizationBank.RollRatePID = reshape(double(typecast(buffer(mcolon(StabilizationBankFidIdx + 0, StabilizationBankFidIdx + 15)), 'single')), 4, [] );
	StabilizationBank.PitchRatePID = reshape(double(typecast(buffer(mcolon(StabilizationBankFidIdx + 16, StabilizationBankFidIdx + 31)), 'single')), 4, [] );
	StabilizationBank.YawRatePID = reshape(double(typecast(buffer(mcolon(StabilizationBankFidIdx + 32, StabilizationBankFidIdx + 47)), 'single')), 4, [] );
	StabilizationBank.RollPI = reshape(double(typecast(buffer(mcolon(StabilizationBankFidIdx + 48, StabilizationBankFidIdx + 59)), 'single')), 3, [] );
	StabilizationBank.PitchPI = reshape(double(typecast(buffer(mcolon(StabilizationBankFidIdx + 60, StabilizationBankFidIdx + 71)), 'single')), 3, [] );
	StabilizationBank.YawPI = reshape(double(typecast(buffer(mcolon(StabilizationBankFidIdx + 72, StabilizationBankFidIdx + 83)), 'single')), 3, [] );
	StabilizationBank.ManualRate = reshape(double(typecast(buffer(mcolon(StabilizationBankFidIdx + 84, StabilizationBankFidIdx + 89)), 'uint16')), 3, [] );
	StabilizationBank.MaximumRate = reshape(double(typecast(buffer(mcolon(StabilizationBankFidIdx + 90, StabilizationBankFidIdx + 95)), 'uint16')), 3, [] );
	StabilizationBank.RollMax = double(typecast(buffer(mcolon(StabilizationBankFidIdx + 96, StabilizationBankFidIdx + 96)), 'uint8'))';
	StabilizationBank.PitchMax = double(typecast(buffer(mcolon(StabilizationBankFidIdx + 97, StabilizationBankFidIdx + 97)), 'uint8'))';
	StabilizationBank.YawMax = double(typecast(buffer(mcolon(StabilizationBankFidIdx + 98, StabilizationBankFidIdx + 98)), 'uint8'))';
	StabilizationBank.StickExpo = reshape(double(typecast(buffer(mcolon(StabilizationBankFidIdx + 99, StabilizationBankFidIdx + 101)), 'int8')), 3, [] );
	StabilizationBank.AcroInsanityFactor = reshape(double(typecast(buffer(mcolon(StabilizationBankFidIdx + 102, StabilizationBankFidIdx + 104)), 'uint8')), 3, [] );
	StabilizationBank.EnablePiroComp = double(typecast(buffer(mcolon(StabilizationBankFidIdx + 105, StabilizationBankFidIdx + 105)), 'uint8'))';
	StabilizationBank.FpvCamTiltCompensation = double(typecast(buffer(mcolon(StabilizationBankFidIdx + 106, StabilizationBankFidIdx + 106)), 'uint8'))';
	StabilizationBank.EnableThrustPIDScaling = double(typecast(buffer(mcolon(StabilizationBankFidIdx + 107, StabilizationBankFidIdx + 107)), 'uint8'))';
	StabilizationBank.ThrustPIDScaleCurve = reshape(double(typecast(buffer(mcolon(StabilizationBankFidIdx + 108, StabilizationBankFidIdx + 112)), 'int8')), 5, [] );
	StabilizationBank.ThrustPIDScaleSource = double(typecast(buffer(mcolon(StabilizationBankFidIdx + 113, StabilizationBankFidIdx + 113)), 'uint8'))';
	StabilizationBank.ThrustPIDScaleTarget = double(typecast(buffer(mcolon(StabilizationBankFidIdx + 114, StabilizationBankFidIdx + 114)), 'uint8'))';
	StabilizationBank.ThrustPIDScaleAxes = double(typecast(buffer(mcolon(StabilizationBankFidIdx + 115, StabilizationBankFidIdx + 115)), 'uint8'))';

% StabilizationDesired typecasting
	StabilizationDesired.timestamp = double(typecast(buffer(mcolon(StabilizationDesiredFidIdx - headerLen - oplHeaderLen, StabilizationDesiredFidIdx + 3 - headerLen - oplHeaderLen)), 'uint32'))';
	StabilizationDesired.Roll = double(typecast(buffer(mcolon(StabilizationDesiredFidIdx + 0, StabilizationDesiredFidIdx + 3)), 'single'))';
	StabilizationDesired.Pitch = double(typecast(buffer(mcolon(StabilizationDesiredFidIdx + 4, StabilizationDesiredFidIdx + 7)), 'single'))';
	StabilizationDesired.Yaw = double(typecast(buffer(mcolon(StabilizationDesiredFidIdx + 8, StabilizationDesiredFidIdx + 11)), 'single'))';
	StabilizationDesired.Thrust = double(typecast(buffer(mcolon(StabilizationDesiredFidIdx + 12, StabilizationDesiredFidIdx + 15)), 'single'))';
	StabilizationDesired.StabilizationMode = reshape(double(typecast(buffer(mcolon(StabilizationDesiredFidIdx + 16, StabilizationDesiredFidIdx + 19)), 'uint8')), 4, [] );

% StabilizationSettings typecasting
	StabilizationSettings.timestamp = double(typecast(buffer(mcolon(StabilizationSettingsFidIdx - headerLen - oplHeaderLen, StabilizationSettingsFidIdx + 3 - headerLen - oplHeaderLen)), 'uint32'))';
	StabilizationSettings.VbarSensitivity = reshape(double(typecast(buffer(mcolon(StabilizationSettingsFidIdx + 0, StabilizationSettingsFidIdx + 11)), 'single')), 3, [] );
	StabilizationSettings.VbarRollPI = reshape(double(typecast(buffer(mcolon(StabilizationSettingsFidIdx + 12, StabilizationSettingsFidIdx + 19)), 'single')), 2, [] );
	StabilizationSettings.VbarPitchPI = reshape(double(typecast(buffer(mcolon(StabilizationSettingsFidIdx + 20, StabilizationSettingsFidIdx + 27)), 'single')), 2, [] );
	StabilizationSettings.VbarYawPI = reshape(double(typecast(buffer(mcolon(StabilizationSettingsFidIdx + 28, StabilizationSettingsFidIdx + 35)), 'single')), 2, [] );
	StabilizationSettings.VbarTau = double(typecast(buffer(mcolon(StabilizationSettingsFidIdx + 36, StabilizationSettingsFidIdx + 39)), 'single'))';
	StabilizationSettings.GyroTau = double(typecast(buffer(mcolon(StabilizationSettingsFidIdx + 40, StabilizationSettingsFidIdx + 43)), 'single'))';
	StabilizationSettings.DerivativeGamma = double(typecast(buffer(mcolon(StabilizationSettingsFidIdx + 44, StabilizationSettingsFidIdx + 47)), 'single'))';
	StabilizationSettings.AxisLockKp = double(typecast(buffer(mcolon(StabilizationSettingsFidIdx + 48, StabilizationSettingsFidIdx + 51)), 'single'))';
	StabilizationSettings.WeakLevelingKp = double(typecast(buffer(mcolon(StabilizationSettingsFidIdx + 52, StabilizationSettingsFidIdx + 55)), 'single'))';
	StabilizationSettings.CruiseControlMaxPowerFactor = double(typecast(buffer(mcolon(StabilizationSettingsFidIdx + 56, StabilizationSettingsFidIdx + 59)), 'single'))';
	StabilizationSettings.CruiseControlPowerTrim = double(typecast(buffer(mcolon(StabilizationSettingsFidIdx + 60, StabilizationSettingsFidIdx + 63)), 'single'))';
	StabilizationSettings.CruiseControlPowerDelayComp = double(typecast(buffer(mcolon(StabilizationSettingsFidIdx + 64, StabilizationSettingsFidIdx + 67)), 'single'))';
	StabilizationSettings.ScaleToAirspeed = double(typecast(buffer(mcolon(StabilizationSettingsFidIdx + 68, StabilizationSettingsFidIdx + 71)), 'single'))';
	StabilizationSettings.ScaleToAirspeedLimits = reshape(double(typecast(buffer(mcolon(StabilizationSettingsFidIdx + 72, StabilizationSettingsFidIdx + 79)), 'single')), 2, [] );
	StabilizationSettings.FlightModeMap = reshape(double(typecast(buffer(mcolon(StabilizationSettingsFidIdx + 80, StabilizationSettingsFidIdx + 85)), 'uint8')), 6, [] );
	StabilizationSettings.VbarGyroSuppress = double(typecast(buffer(mcolon(StabilizationSettingsFidIdx + 86, StabilizationSettingsFidIdx + 86)), 'int8'))';
	StabilizationSettings.VbarPiroComp = double(typecast(buffer(mcolon(StabilizationSettingsFidIdx + 87, StabilizationSettingsFidIdx + 87)), 'uint8'))';
	StabilizationSettings.VbarMaxAngle = double(typecast(buffer(mcolon(StabilizationSettingsFidIdx + 88, StabilizationSettingsFidIdx + 88)), 'uint8'))';
	StabilizationSettings.DerivativeCutoff = double(typecast(buffer(mcolon(StabilizationSettingsFidIdx + 89, StabilizationSettingsFidIdx + 89)), 'uint8'))';
	StabilizationSettings.MaxAxisLock = double(typecast(buffer(mcolon(StabilizationSettingsFidIdx + 90, StabilizationSettingsFidIdx + 90)), 'uint8'))';
	StabilizationSettings.MaxAxisLockRate = double(typecast(buffer(mcolon(StabilizationSettingsFidIdx + 91, StabilizationSettingsFidIdx + 91)), 'uint8'))';
	StabilizationSettings.MaxWeakLevelingRate = double(typecast(buffer(mcolon(StabilizationSettingsFidIdx + 92, StabilizationSettingsFidIdx + 92)), 'uint8'))';
	StabilizationSettings.RattitudeModeTransition = double(typecast(buffer(mcolon(StabilizationSettingsFidIdx + 93, StabilizationSettingsFidIdx + 93)), 'uint8'))';
	StabilizationSettings.CruiseControlMinThrust = double(typecast(buffer(mcolon(StabilizationSettingsFidIdx + 94, StabilizationSettingsFidIdx + 94)), 'int8'))';
	StabilizationSettings.CruiseControlMaxThrust = double(typecast(buffer(mcolon(StabilizationSettingsFidIdx + 95, StabilizationSettingsFidIdx + 95)), 'uint8'))';
	StabilizationSettings.CruiseControlMaxAngle = double(typecast(buffer(mcolon(StabilizationSettingsFidIdx + 96, StabilizationSettingsFidIdx + 96)), 'uint8'))';
	StabilizationSettings.CruiseControlFlightModeSwitchPosEnable = reshape(double(typecast(buffer(mcolon(StabilizationSettingsFidIdx + 97, StabilizationSettingsFidIdx + 102)), 'uint8')), 6, [] );
	StabilizationSettings.CruiseControlInvertedThrustReversing = double(typecast(buffer(mcolon(StabilizationSettingsFidIdx + 103, StabilizationSettingsFidIdx + 103)), 'uint8'))';
	StabilizationSettings.CruiseControlInvertedPowerOutput = double(typecast(buffer(mcolon(StabilizationSettingsFidIdx + 104, StabilizationSettingsFidIdx + 104)), 'uint8'))';
	StabilizationSettings.LowThrottleZeroIntegral = double(typecast(buffer(mcolon(StabilizationSettingsFidIdx + 105, StabilizationSettingsFidIdx + 105)), 'uint8'))';
	StabilizationSettings.FlightModeAssistMap = reshape(double(typecast(buffer(mcolon(StabilizationSettingsFidIdx + 106, StabilizationSettingsFidIdx + 111)), 'uint8')), 6, [] );
	StabilizationSettings.MeasureBasedDTerm = double(typecast(buffer(mcolon(StabilizationSettingsFidIdx + 112, StabilizationSettingsFidIdx + 112)), 'uint8'))';

% StabilizationSettingsBank1 typecasting
	StabilizationSettingsBank1.timestamp = double(typecast(buffer(mcolon(StabilizationSettingsBank1FidIdx - headerLen - oplHeaderLen, StabilizationSettingsBank1FidIdx + 3 - headerLen - oplHeaderLen)), 'uint32'))';
	StabilizationSettingsBank1.RollRatePID = reshape(double(typecast(buffer(mcolon(StabilizationSettingsBank1FidIdx + 0, StabilizationSettingsBank1FidIdx + 15)), 'single')), 4, [] );
	StabilizationSettingsBank1.PitchRatePID = reshape(double(typecast(buffer(mcolon(StabilizationSettingsBank1FidIdx + 16, StabilizationSettingsBank1FidIdx + 31)), 'single')), 4, [] );
	StabilizationSettingsBank1.YawRatePID = reshape(double(typecast(buffer(mcolon(StabilizationSettingsBank1FidIdx + 32, StabilizationSettingsBank1FidIdx + 47)), 'single')), 4, [] );
	StabilizationSettingsBank1.RollPI = reshape(double(typecast(buffer(mcolon(StabilizationSettingsBank1FidIdx + 48, StabilizationSettingsBank1FidIdx + 59)), 'single')), 3, [] );
	StabilizationSettingsBank1.PitchPI = reshape(double(typecast(buffer(mcolon(StabilizationSettingsBank1FidIdx + 60, StabilizationSettingsBank1FidIdx + 71)), 'single')), 3, [] );
	StabilizationSettingsBank1.YawPI = reshape(double(typecast(buffer(mcolon(StabilizationSettingsBank1FidIdx + 72, StabilizationSettingsBank1FidIdx + 83)), 'single')), 3, [] );
	StabilizationSettingsBank1.ManualRate = reshape(double(typecast(buffer(mcolon(StabilizationSettingsBank1FidIdx + 84, StabilizationSettingsBank1FidIdx + 89)), 'uint16')), 3, [] );
	StabilizationSettingsBank1.MaximumRate = reshape(double(typecast(buffer(mcolon(StabilizationSettingsBank1FidIdx + 90, StabilizationSettingsBank1FidIdx + 95)), 'uint16')), 3, [] );
	StabilizationSettingsBank1.RollMax = double(typecast(buffer(mcolon(StabilizationSettingsBank1FidIdx + 96, StabilizationSettingsBank1FidIdx + 96)), 'uint8'))';
	StabilizationSettingsBank1.PitchMax = double(typecast(buffer(mcolon(StabilizationSettingsBank1FidIdx + 97, StabilizationSettingsBank1FidIdx + 97)), 'uint8'))';
	StabilizationSettingsBank1.YawMax = double(typecast(buffer(mcolon(StabilizationSettingsBank1FidIdx + 98, StabilizationSettingsBank1FidIdx + 98)), 'uint8'))';
	StabilizationSettingsBank1.StickExpo = reshape(double(typecast(buffer(mcolon(StabilizationSettingsBank1FidIdx + 99, StabilizationSettingsBank1FidIdx + 101)), 'int8')), 3, [] );
	StabilizationSettingsBank1.AcroInsanityFactor = reshape(double(typecast(buffer(mcolon(StabilizationSettingsBank1FidIdx + 102, StabilizationSettingsBank1FidIdx + 104)), 'uint8')), 3, [] );
	StabilizationSettingsBank1.EnablePiroComp = double(typecast(buffer(mcolon(StabilizationSettingsBank1FidIdx + 105, StabilizationSettingsBank1FidIdx + 105)), 'uint8'))';
	StabilizationSettingsBank1.FpvCamTiltCompensation = double(typecast(buffer(mcolon(StabilizationSettingsBank1FidIdx + 106, StabilizationSettingsBank1FidIdx + 106)), 'uint8'))';
	StabilizationSettingsBank1.EnableThrustPIDScaling = double(typecast(buffer(mcolon(StabilizationSettingsBank1FidIdx + 107, StabilizationSettingsBank1FidIdx + 107)), 'uint8'))';
	StabilizationSettingsBank1.ThrustPIDScaleCurve = reshape(double(typecast(buffer(mcolon(StabilizationSettingsBank1FidIdx + 108, StabilizationSettingsBank1FidIdx + 112)), 'int8')), 5, [] );
	StabilizationSettingsBank1.ThrustPIDScaleSource = double(typecast(buffer(mcolon(StabilizationSettingsBank1FidIdx + 113, StabilizationSettingsBank1FidIdx + 113)), 'uint8'))';
	StabilizationSettingsBank1.ThrustPIDScaleTarget = double(typecast(buffer(mcolon(StabilizationSettingsBank1FidIdx + 114, StabilizationSettingsBank1FidIdx + 114)), 'uint8'))';
	StabilizationSettingsBank1.ThrustPIDScaleAxes = double(typecast(buffer(mcolon(StabilizationSettingsBank1FidIdx + 115, StabilizationSettingsBank1FidIdx + 115)), 'uint8'))';

% StabilizationSettingsBank2 typecasting
	StabilizationSettingsBank2.timestamp = double(typecast(buffer(mcolon(StabilizationSettingsBank2FidIdx - headerLen - oplHeaderLen, StabilizationSettingsBank2FidIdx + 3 - headerLen - oplHeaderLen)), 'uint32'))';
	StabilizationSettingsBank2.RollRatePID = reshape(double(typecast(buffer(mcolon(StabilizationSettingsBank2FidIdx + 0, StabilizationSettingsBank2FidIdx + 15)), 'single')), 4, [] );
	StabilizationSettingsBank2.PitchRatePID = reshape(double(typecast(buffer(mcolon(StabilizationSettingsBank2FidIdx + 16, StabilizationSettingsBank2FidIdx + 31)), 'single')), 4, [] );
	StabilizationSettingsBank2.YawRatePID = reshape(double(typecast(buffer(mcolon(StabilizationSettingsBank2FidIdx + 32, StabilizationSettingsBank2FidIdx + 47)), 'single')), 4, [] );
	StabilizationSettingsBank2.RollPI = reshape(double(typecast(buffer(mcolon(StabilizationSettingsBank2FidIdx + 48, StabilizationSettingsBank2FidIdx + 59)), 'single')), 3, [] );
	StabilizationSettingsBank2.PitchPI = reshape(double(typecast(buffer(mcolon(StabilizationSettingsBank2FidIdx + 60, StabilizationSettingsBank2FidIdx + 71)), 'single')), 3, [] );
	StabilizationSettingsBank2.YawPI = reshape(double(typecast(buffer(mcolon(StabilizationSettingsBank2FidIdx + 72, StabilizationSettingsBank2FidIdx + 83)), 'single')), 3, [] );
	StabilizationSettingsBank2.ManualRate = reshape(double(typecast(buffer(mcolon(StabilizationSettingsBank2FidIdx + 84, StabilizationSettingsBank2FidIdx + 89)), 'uint16')), 3, [] );
	StabilizationSettingsBank2.MaximumRate = reshape(double(typecast(buffer(mcolon(StabilizationSettingsBank2FidIdx + 90, StabilizationSettingsBank2FidIdx + 95)), 'uint16')), 3, [] );
	StabilizationSettingsBank2.RollMax = double(typecast(buffer(mcolon(StabilizationSettingsBank2FidIdx + 96, StabilizationSettingsBank2FidIdx + 96)), 'uint8'))';
	StabilizationSettingsBank2.PitchMax = double(typecast(buffer(mcolon(StabilizationSettingsBank2FidIdx + 97, StabilizationSettingsBank2FidIdx + 97)), 'uint8'))';
	StabilizationSettingsBank2.YawMax = double(typecast(buffer(mcolon(StabilizationSettingsBank2FidIdx + 98, StabilizationSettingsBank2FidIdx + 98)), 'uint8'))';
	StabilizationSettingsBank2.StickExpo = reshape(double(typecast(buffer(mcolon(StabilizationSettingsBank2FidIdx + 99, StabilizationSettingsBank2FidIdx + 101)), 'int8')), 3, [] );
	StabilizationSettingsBank2.AcroInsanityFactor = reshape(double(typecast(buffer(mcolon(StabilizationSettingsBank2FidIdx + 102, StabilizationSettingsBank2FidIdx + 104)), 'uint8')), 3, [] );
	StabilizationSettingsBank2.EnablePiroComp = double(typecast(buffer(mcolon(StabilizationSettingsBank2FidIdx + 105, StabilizationSettingsBank2FidIdx + 105)), 'uint8'))';
	StabilizationSettingsBank2.FpvCamTiltCompensation = double(typecast(buffer(mcolon(StabilizationSettingsBank2FidIdx + 106, StabilizationSettingsBank2FidIdx + 106)), 'uint8'))';
	StabilizationSettingsBank2.EnableThrustPIDScaling = double(typecast(buffer(mcolon(StabilizationSettingsBank2FidIdx + 107, StabilizationSettingsBank2FidIdx + 107)), 'uint8'))';
	StabilizationSettingsBank2.ThrustPIDScaleCurve = reshape(double(typecast(buffer(mcolon(StabilizationSettingsBank2FidIdx + 108, StabilizationSettingsBank2FidIdx + 112)), 'int8')), 5, [] );
	StabilizationSettingsBank2.ThrustPIDScaleSource = double(typecast(buffer(mcolon(StabilizationSettingsBank2FidIdx + 113, StabilizationSettingsBank2FidIdx + 113)), 'uint8'))';
	StabilizationSettingsBank2.ThrustPIDScaleTarget = double(typecast(buffer(mcolon(StabilizationSettingsBank2FidIdx + 114, StabilizationSettingsBank2FidIdx + 114)), 'uint8'))';
	StabilizationSettingsBank2.ThrustPIDScaleAxes = double(typecast(buffer(mcolon(StabilizationSettingsBank2FidIdx + 115, StabilizationSettingsBank2FidIdx + 115)), 'uint8'))';

% StabilizationSettingsBank3 typecasting
	StabilizationSettingsBank3.timestamp = double(typecast(buffer(mcolon(StabilizationSettingsBank3FidIdx - headerLen - oplHeaderLen, StabilizationSettingsBank3FidIdx + 3 - headerLen - oplHeaderLen)), 'uint32'))';
	StabilizationSettingsBank3.RollRatePID = reshape(double(typecast(buffer(mcolon(StabilizationSettingsBank3FidIdx + 0, StabilizationSettingsBank3FidIdx + 15)), 'single')), 4, [] );
	StabilizationSettingsBank3.PitchRatePID = reshape(double(typecast(buffer(mcolon(StabilizationSettingsBank3FidIdx + 16, StabilizationSettingsBank3FidIdx + 31)), 'single')), 4, [] );
	StabilizationSettingsBank3.YawRatePID = reshape(double(typecast(buffer(mcolon(StabilizationSettingsBank3FidIdx + 32, StabilizationSettingsBank3FidIdx + 47)), 'single')), 4, [] );
	StabilizationSettingsBank3.RollPI = reshape(double(typecast(buffer(mcolon(StabilizationSettingsBank3FidIdx + 48, StabilizationSettingsBank3FidIdx + 59)), 'single')), 3, [] );
	StabilizationSettingsBank3.PitchPI = reshape(double(typecast(buffer(mcolon(StabilizationSettingsBank3FidIdx + 60, StabilizationSettingsBank3FidIdx + 71)), 'single')), 3, [] );
	StabilizationSettingsBank3.YawPI = reshape(double(typecast(buffer(mcolon(StabilizationSettingsBank3FidIdx + 72, StabilizationSettingsBank3FidIdx + 83)), 'single')), 3, [] );
	StabilizationSettingsBank3.ManualRate = reshape(double(typecast(buffer(mcolon(StabilizationSettingsBank3FidIdx + 84, StabilizationSettingsBank3FidIdx + 89)), 'uint16')), 3, [] );
	StabilizationSettingsBank3.MaximumRate = reshape(double(typecast(buffer(mcolon(StabilizationSettingsBank3FidIdx + 90, StabilizationSettingsBank3FidIdx + 95)), 'uint16')), 3, [] );
	StabilizationSettingsBank3.RollMax = double(typecast(buffer(mcolon(StabilizationSettingsBank3FidIdx + 96, StabilizationSettingsBank3FidIdx + 96)), 'uint8'))';
	StabilizationSettingsBank3.PitchMax = double(typecast(buffer(mcolon(StabilizationSettingsBank3FidIdx + 97, StabilizationSettingsBank3FidIdx + 97)), 'uint8'))';
	StabilizationSettingsBank3.YawMax = double(typecast(buffer(mcolon(StabilizationSettingsBank3FidIdx + 98, StabilizationSettingsBank3FidIdx + 98)), 'uint8'))';
	StabilizationSettingsBank3.StickExpo = reshape(double(typecast(buffer(mcolon(StabilizationSettingsBank3FidIdx + 99, StabilizationSettingsBank3FidIdx + 101)), 'int8')), 3, [] );
	StabilizationSettingsBank3.AcroInsanityFactor = reshape(double(typecast(buffer(mcolon(StabilizationSettingsBank3FidIdx + 102, StabilizationSettingsBank3FidIdx + 104)), 'uint8')), 3, [] );
	StabilizationSettingsBank3.EnablePiroComp = double(typecast(buffer(mcolon(StabilizationSettingsBank3FidIdx + 105, StabilizationSettingsBank3FidIdx + 105)), 'uint8'))';
	StabilizationSettingsBank3.FpvCamTiltCompensation = double(typecast(buffer(mcolon(StabilizationSettingsBank3FidIdx + 106, StabilizationSettingsBank3FidIdx + 106)), 'uint8'))';
	StabilizationSettingsBank3.EnableThrustPIDScaling = double(typecast(buffer(mcolon(StabilizationSettingsBank3FidIdx + 107, StabilizationSettingsBank3FidIdx + 107)), 'uint8'))';
	StabilizationSettingsBank3.ThrustPIDScaleCurve = reshape(double(typecast(buffer(mcolon(StabilizationSettingsBank3FidIdx + 108, StabilizationSettingsBank3FidIdx + 112)), 'int8')), 5, [] );
	StabilizationSettingsBank3.ThrustPIDScaleSource = double(typecast(buffer(mcolon(StabilizationSettingsBank3FidIdx + 113, StabilizationSettingsBank3FidIdx + 113)), 'uint8'))';
	StabilizationSettingsBank3.ThrustPIDScaleTarget = double(typecast(buffer(mcolon(StabilizationSettingsBank3FidIdx + 114, StabilizationSettingsBank3FidIdx + 114)), 'uint8'))';
	StabilizationSettingsBank3.ThrustPIDScaleAxes = double(typecast(buffer(mcolon(StabilizationSettingsBank3FidIdx + 115, StabilizationSettingsBank3FidIdx + 115)), 'uint8'))';

% StabilizationStatus typecasting
	StabilizationStatus.timestamp = double(typecast(buffer(mcolon(StabilizationStatusFidIdx - headerLen - oplHeaderLen, StabilizationStatusFidIdx + 3 - headerLen - oplHeaderLen)), 'uint32'))';
	StabilizationStatus.OuterLoop = reshape(double(typecast(buffer(mcolon(StabilizationStatusFidIdx + 0, StabilizationStatusFidIdx + 3)), 'uint8')), 4, [] );
	StabilizationStatus.InnerLoop = reshape(double(typecast(buffer(mcolon(StabilizationStatusFidIdx + 4, StabilizationStatusFidIdx + 7)), 'uint8')), 4, [] );

% StatusGroundDrive typecasting
	StatusGroundDrive.timestamp = double(typecast(buffer(mcolon(StatusGroundDriveFidIdx - headerLen - oplHeaderLen, StatusGroundDriveFidIdx + 3 - headerLen - oplHeaderLen)), 'uint32'))';
	StatusGroundDrive.NECommand = reshape(double(typecast(buffer(mcolon(StatusGroundDriveFidIdx + 0, StatusGroundDriveFidIdx + 7)), 'single')), 2, [] );
	StatusGroundDrive.State = reshape(double(typecast(buffer(mcolon(StatusGroundDriveFidIdx + 8, StatusGroundDriveFidIdx + 19)), 'single')), 3, [] );
	StatusGroundDrive.BodyCommand = reshape(double(typecast(buffer(mcolon(StatusGroundDriveFidIdx + 20, StatusGroundDriveFidIdx + 27)), 'single')), 2, [] );
	StatusGroundDrive.ControlCommand = reshape(double(typecast(buffer(mcolon(StatusGroundDriveFidIdx + 28, StatusGroundDriveFidIdx + 35)), 'single')), 2, [] );
	StatusGroundDrive.ControlState = double(typecast(buffer(mcolon(StatusGroundDriveFidIdx + 36, StatusGroundDriveFidIdx + 36)), 'uint8'))';

% StatusVtolAutoTakeoff typecasting
	StatusVtolAutoTakeoff.timestamp = double(typecast(buffer(mcolon(StatusVtolAutoTakeoffFidIdx - headerLen - oplHeaderLen, StatusVtolAutoTakeoffFidIdx + 3 - headerLen - oplHeaderLen)), 'uint32'))';
	StatusVtolAutoTakeoff.AltitudeAtState = reshape(double(typecast(buffer(mcolon(StatusVtolAutoTakeoffFidIdx + 0, StatusVtolAutoTakeoffFidIdx + 39)), 'single')), 10, [] );
	StatusVtolAutoTakeoff.State = double(typecast(buffer(mcolon(StatusVtolAutoTakeoffFidIdx + 40, StatusVtolAutoTakeoffFidIdx + 40)), 'uint8'))';
	StatusVtolAutoTakeoff.StateExitReason = reshape(double(typecast(buffer(mcolon(StatusVtolAutoTakeoffFidIdx + 41, StatusVtolAutoTakeoffFidIdx + 50)), 'uint8')), 10, [] );
	StatusVtolAutoTakeoff.AltitudeState = double(typecast(buffer(mcolon(StatusVtolAutoTakeoffFidIdx + 51, StatusVtolAutoTakeoffFidIdx + 51)), 'uint8'))';
	StatusVtolAutoTakeoff.ControlState = double(typecast(buffer(mcolon(StatusVtolAutoTakeoffFidIdx + 52, StatusVtolAutoTakeoffFidIdx + 52)), 'uint8'))';

% StatusVtolLand typecasting
	StatusVtolLand.timestamp = double(typecast(buffer(mcolon(StatusVtolLandFidIdx - headerLen - oplHeaderLen, StatusVtolLandFidIdx + 3 - headerLen - oplHeaderLen)), 'uint32'))';
	StatusVtolLand.AltitudeAtState = reshape(double(typecast(buffer(mcolon(StatusVtolLandFidIdx + 0, StatusVtolLandFidIdx + 39)), 'single')), 10, [] );
	StatusVtolLand.targetDescentRate = double(typecast(buffer(mcolon(StatusVtolLandFidIdx + 40, StatusVtolLandFidIdx + 43)), 'single'))';
	StatusVtolLand.averageDescentRate = double(typecast(buffer(mcolon(StatusVtolLandFidIdx + 44, StatusVtolLandFidIdx + 47)), 'single'))';
	StatusVtolLand.averageDescentThrust = double(typecast(buffer(mcolon(StatusVtolLandFidIdx + 48, StatusVtolLandFidIdx + 51)), 'single'))';
	StatusVtolLand.calculatedNeutralThrust = double(typecast(buffer(mcolon(StatusVtolLandFidIdx + 52, StatusVtolLandFidIdx + 55)), 'single'))';
	StatusVtolLand.WtgForGroundEffect = reshape(double(typecast(buffer(mcolon(StatusVtolLandFidIdx + 56, StatusVtolLandFidIdx + 63)), 'single')), 2, [] );
	StatusVtolLand.State = double(typecast(buffer(mcolon(StatusVtolLandFidIdx + 64, StatusVtolLandFidIdx + 64)), 'uint8'))';
	StatusVtolLand.StateExitReason = reshape(double(typecast(buffer(mcolon(StatusVtolLandFidIdx + 65, StatusVtolLandFidIdx + 74)), 'uint8')), 10, [] );
	StatusVtolLand.AltitudeState = double(typecast(buffer(mcolon(StatusVtolLandFidIdx + 75, StatusVtolLandFidIdx + 75)), 'uint8'))';

% SystemAlarms typecasting
	SystemAlarms.timestamp = double(typecast(buffer(mcolon(SystemAlarmsFidIdx - headerLen - oplHeaderLen, SystemAlarmsFidIdx + 3 - headerLen - oplHeaderLen)), 'uint32'))';
	SystemAlarms.Alarm = reshape(double(typecast(buffer(mcolon(SystemAlarmsFidIdx + 0, SystemAlarmsFidIdx + 20)), 'uint8')), 21, [] );
	SystemAlarms.ExtendedAlarmStatus = reshape(double(typecast(buffer(mcolon(SystemAlarmsFidIdx + 21, SystemAlarmsFidIdx + 22)), 'uint8')), 2, [] );
	SystemAlarms.ExtendedAlarmSubStatus = reshape(double(typecast(buffer(mcolon(SystemAlarmsFidIdx + 23, SystemAlarmsFidIdx + 24)), 'uint8')), 2, [] );

% SystemIdentSettings typecasting
	SystemIdentSettings.timestamp = double(typecast(buffer(mcolon(SystemIdentSettingsFidIdx - headerLen - oplHeaderLen, SystemIdentSettingsFidIdx + 3 - headerLen - oplHeaderLen)), 'uint32'))';
	SystemIdentSettings.Tau = double(typecast(buffer(mcolon(SystemIdentSettingsFidIdx + 0, SystemIdentSettingsFidIdx + 3)), 'single'))';
	SystemIdentSettings.Beta = reshape(double(typecast(buffer(mcolon(SystemIdentSettingsFidIdx + 4, SystemIdentSettingsFidIdx + 15)), 'single')), 3, [] );
	SystemIdentSettings.YawToRollPitchPIDRatioMin = double(typecast(buffer(mcolon(SystemIdentSettingsFidIdx + 16, SystemIdentSettingsFidIdx + 19)), 'single'))';
	SystemIdentSettings.YawToRollPitchPIDRatioMax = double(typecast(buffer(mcolon(SystemIdentSettingsFidIdx + 20, SystemIdentSettingsFidIdx + 23)), 'single'))';
	SystemIdentSettings.DerivativeFactor = double(typecast(buffer(mcolon(SystemIdentSettingsFidIdx + 24, SystemIdentSettingsFidIdx + 27)), 'single'))';
	SystemIdentSettings.SmoothQuickValue = double(typecast(buffer(mcolon(SystemIdentSettingsFidIdx + 28, SystemIdentSettingsFidIdx + 31)), 'single'))';
	SystemIdentSettings.GyroReadTimeAverage = double(typecast(buffer(mcolon(SystemIdentSettingsFidIdx + 32, SystemIdentSettingsFidIdx + 35)), 'single'))';
	SystemIdentSettings.DampMin = double(typecast(buffer(mcolon(SystemIdentSettingsFidIdx + 36, SystemIdentSettingsFidIdx + 36)), 'uint8'))';
	SystemIdentSettings.DampRate = double(typecast(buffer(mcolon(SystemIdentSettingsFidIdx + 37, SystemIdentSettingsFidIdx + 37)), 'uint8'))';
	SystemIdentSettings.DampMax = double(typecast(buffer(mcolon(SystemIdentSettingsFidIdx + 38, SystemIdentSettingsFidIdx + 38)), 'uint8'))';
	SystemIdentSettings.NoiseMin = double(typecast(buffer(mcolon(SystemIdentSettingsFidIdx + 39, SystemIdentSettingsFidIdx + 39)), 'uint8'))';
	SystemIdentSettings.NoiseRate = double(typecast(buffer(mcolon(SystemIdentSettingsFidIdx + 40, SystemIdentSettingsFidIdx + 40)), 'uint8'))';
	SystemIdentSettings.NoiseMax = double(typecast(buffer(mcolon(SystemIdentSettingsFidIdx + 41, SystemIdentSettingsFidIdx + 41)), 'uint8'))';
	SystemIdentSettings.CalculateYaw = double(typecast(buffer(mcolon(SystemIdentSettingsFidIdx + 42, SystemIdentSettingsFidIdx + 42)), 'uint8'))';
	SystemIdentSettings.DestinationPidBank = double(typecast(buffer(mcolon(SystemIdentSettingsFidIdx + 43, SystemIdentSettingsFidIdx + 43)), 'uint8'))';
	SystemIdentSettings.TuningDuration = double(typecast(buffer(mcolon(SystemIdentSettingsFidIdx + 44, SystemIdentSettingsFidIdx + 44)), 'uint8'))';
	SystemIdentSettings.SmoothQuickSource = double(typecast(buffer(mcolon(SystemIdentSettingsFidIdx + 45, SystemIdentSettingsFidIdx + 45)), 'uint8'))';
	SystemIdentSettings.DisableSanityChecks = double(typecast(buffer(mcolon(SystemIdentSettingsFidIdx + 46, SystemIdentSettingsFidIdx + 46)), 'uint8'))';
	SystemIdentSettings.Complete = double(typecast(buffer(mcolon(SystemIdentSettingsFidIdx + 47, SystemIdentSettingsFidIdx + 47)), 'uint8'))';

% SystemIdentState typecasting
	SystemIdentState.timestamp = double(typecast(buffer(mcolon(SystemIdentStateFidIdx - headerLen - oplHeaderLen, SystemIdentStateFidIdx + 3 - headerLen - oplHeaderLen)), 'uint32'))';
	SystemIdentState.Tau = double(typecast(buffer(mcolon(SystemIdentStateFidIdx + 0, SystemIdentStateFidIdx + 3)), 'single'))';
	SystemIdentState.Beta = reshape(double(typecast(buffer(mcolon(SystemIdentStateFidIdx + 4, SystemIdentStateFidIdx + 15)), 'single')), 3, [] );
	SystemIdentState.Bias = reshape(double(typecast(buffer(mcolon(SystemIdentStateFidIdx + 16, SystemIdentStateFidIdx + 27)), 'single')), 3, [] );
	SystemIdentState.Noise = reshape(double(typecast(buffer(mcolon(SystemIdentStateFidIdx + 28, SystemIdentStateFidIdx + 39)), 'single')), 3, [] );
	SystemIdentState.Period = double(typecast(buffer(mcolon(SystemIdentStateFidIdx + 40, SystemIdentStateFidIdx + 43)), 'single'))';
	SystemIdentState.NumAfPredicts = double(typecast(buffer(mcolon(SystemIdentStateFidIdx + 44, SystemIdentStateFidIdx + 47)), 'uint32'))';
	SystemIdentState.NumSpilledPts = double(typecast(buffer(mcolon(SystemIdentStateFidIdx + 48, SystemIdentStateFidIdx + 51)), 'uint32'))';
	SystemIdentState.HoverThrottle = double(typecast(buffer(mcolon(SystemIdentStateFidIdx + 52, SystemIdentStateFidIdx + 55)), 'single'))';
	SystemIdentState.GyroReadTimeAverage = double(typecast(buffer(mcolon(SystemIdentStateFidIdx + 56, SystemIdentStateFidIdx + 59)), 'single'))';
	SystemIdentState.Complete = double(typecast(buffer(mcolon(SystemIdentStateFidIdx + 60, SystemIdentStateFidIdx + 60)), 'uint8'))';

% SystemSettings typecasting
	SystemSettings.timestamp = double(typecast(buffer(mcolon(SystemSettingsFidIdx - headerLen - oplHeaderLen, SystemSettingsFidIdx + 3 - headerLen - oplHeaderLen)), 'uint32'))';
	SystemSettings.GUIConfigData = reshape(double(typecast(buffer(mcolon(SystemSettingsFidIdx + 0, SystemSettingsFidIdx + 15)), 'uint32')), 4, [] );
	SystemSettings.AirSpeedMax = double(typecast(buffer(mcolon(SystemSettingsFidIdx + 16, SystemSettingsFidIdx + 19)), 'single'))';
	SystemSettings.AirSpeedMin = double(typecast(buffer(mcolon(SystemSettingsFidIdx + 20, SystemSettingsFidIdx + 23)), 'single'))';
	SystemSettings.AirframeType = double(typecast(buffer(mcolon(SystemSettingsFidIdx + 24, SystemSettingsFidIdx + 24)), 'uint8'))';
	SystemSettings.VehicleName = reshape(double(typecast(buffer(mcolon(SystemSettingsFidIdx + 25, SystemSettingsFidIdx + 44)), 'uint8')), 20, [] );
	SystemSettings.ThrustControl = double(typecast(buffer(mcolon(SystemSettingsFidIdx + 45, SystemSettingsFidIdx + 45)), 'uint8'))';

% SystemStats typecasting
	SystemStats.timestamp = double(typecast(buffer(mcolon(SystemStatsFidIdx - headerLen - oplHeaderLen, SystemStatsFidIdx + 3 - headerLen - oplHeaderLen)), 'uint32'))';
	SystemStats.FlightTime = double(typecast(buffer(mcolon(SystemStatsFidIdx + 0, SystemStatsFidIdx + 3)), 'uint32'))';
	SystemStats.HeapRemaining = double(typecast(buffer(mcolon(SystemStatsFidIdx + 4, SystemStatsFidIdx + 7)), 'uint32'))';
	SystemStats.CPUIdleTicks = double(typecast(buffer(mcolon(SystemStatsFidIdx + 8, SystemStatsFidIdx + 11)), 'uint32'))';
	SystemStats.CPUZeroLoadTicks = double(typecast(buffer(mcolon(SystemStatsFidIdx + 12, SystemStatsFidIdx + 15)), 'uint32'))';
	SystemStats.EventSystemWarningID = double(typecast(buffer(mcolon(SystemStatsFidIdx + 16, SystemStatsFidIdx + 19)), 'uint32'))';
	SystemStats.ObjectManagerCallbackID = double(typecast(buffer(mcolon(SystemStatsFidIdx + 20, SystemStatsFidIdx + 23)), 'uint32'))';
	SystemStats.ObjectManagerQueueID = double(typecast(buffer(mcolon(SystemStatsFidIdx + 24, SystemStatsFidIdx + 27)), 'uint32'))';
	SystemStats.IRQStackRemaining = double(typecast(buffer(mcolon(SystemStatsFidIdx + 28, SystemStatsFidIdx + 29)), 'uint16'))';
	SystemStats.SystemModStackRemaining = double(typecast(buffer(mcolon(SystemStatsFidIdx + 30, SystemStatsFidIdx + 31)), 'uint16'))';
	SystemStats.SysSlotsFree = double(typecast(buffer(mcolon(SystemStatsFidIdx + 32, SystemStatsFidIdx + 33)), 'uint16'))';
	SystemStats.SysSlotsActive = double(typecast(buffer(mcolon(SystemStatsFidIdx + 34, SystemStatsFidIdx + 35)), 'uint16'))';
	SystemStats.UsrSlotsFree = double(typecast(buffer(mcolon(SystemStatsFidIdx + 36, SystemStatsFidIdx + 37)), 'uint16'))';
	SystemStats.UsrSlotsActive = double(typecast(buffer(mcolon(SystemStatsFidIdx + 38, SystemStatsFidIdx + 39)), 'uint16'))';
	SystemStats.CPULoad = double(typecast(buffer(mcolon(SystemStatsFidIdx + 40, SystemStatsFidIdx + 40)), 'uint8'))';
	SystemStats.CPUTemp = double(typecast(buffer(mcolon(SystemStatsFidIdx + 41, SystemStatsFidIdx + 41)), 'int8'))';

% TakeOffLocation typecasting
	TakeOffLocation.timestamp = double(typecast(buffer(mcolon(TakeOffLocationFidIdx - headerLen - oplHeaderLen, TakeOffLocationFidIdx + 3 - headerLen - oplHeaderLen)), 'uint32'))';
	TakeOffLocation.North = double(typecast(buffer(mcolon(TakeOffLocationFidIdx + 0, TakeOffLocationFidIdx + 3)), 'single'))';
	TakeOffLocation.East = double(typecast(buffer(mcolon(TakeOffLocationFidIdx + 4, TakeOffLocationFidIdx + 7)), 'single'))';
	TakeOffLocation.Down = double(typecast(buffer(mcolon(TakeOffLocationFidIdx + 8, TakeOffLocationFidIdx + 11)), 'single'))';
	TakeOffLocation.Mode = double(typecast(buffer(mcolon(TakeOffLocationFidIdx + 12, TakeOffLocationFidIdx + 12)), 'uint8'))';
	TakeOffLocation.Status = double(typecast(buffer(mcolon(TakeOffLocationFidIdx + 13, TakeOffLocationFidIdx + 13)), 'uint8'))';

% TaskInfo typecasting
	TaskInfo.timestamp = double(typecast(buffer(mcolon(TaskInfoFidIdx - headerLen - oplHeaderLen, TaskInfoFidIdx + 3 - headerLen - oplHeaderLen)), 'uint32'))';
	TaskInfo.StackRemaining = reshape(double(typecast(buffer(mcolon(TaskInfoFidIdx + 0, TaskInfoFidIdx + 49)), 'uint16')), 25, [] );
	TaskInfo.Running = reshape(double(typecast(buffer(mcolon(TaskInfoFidIdx + 50, TaskInfoFidIdx + 74)), 'uint8')), 25, [] );
	TaskInfo.RunningTime = reshape(double(typecast(buffer(mcolon(TaskInfoFidIdx + 75, TaskInfoFidIdx + 99)), 'uint8')), 25, [] );

% TxPIDSettings typecasting
	TxPIDSettings.timestamp = double(typecast(buffer(mcolon(TxPIDSettingsFidIdx - headerLen - oplHeaderLen, TxPIDSettingsFidIdx + 3 - headerLen - oplHeaderLen)), 'uint32'))';
	TxPIDSettings.ThrottleRange = reshape(double(typecast(buffer(mcolon(TxPIDSettingsFidIdx + 0, TxPIDSettingsFidIdx + 7)), 'single')), 2, [] );
	TxPIDSettings.MinPID = reshape(double(typecast(buffer(mcolon(TxPIDSettingsFidIdx + 8, TxPIDSettingsFidIdx + 19)), 'single')), 3, [] );
	TxPIDSettings.MaxPID = reshape(double(typecast(buffer(mcolon(TxPIDSettingsFidIdx + 20, TxPIDSettingsFidIdx + 31)), 'single')), 3, [] );
	TxPIDSettings.EasyTunePitchRollRateFactors = reshape(double(typecast(buffer(mcolon(TxPIDSettingsFidIdx + 32, TxPIDSettingsFidIdx + 39)), 'single')), 2, [] );
	TxPIDSettings.EasyTuneYawRateFactors = reshape(double(typecast(buffer(mcolon(TxPIDSettingsFidIdx + 40, TxPIDSettingsFidIdx + 51)), 'single')), 3, [] );
	TxPIDSettings.UpdateMode = double(typecast(buffer(mcolon(TxPIDSettingsFidIdx + 52, TxPIDSettingsFidIdx + 52)), 'uint8'))';
	TxPIDSettings.BankNumber = double(typecast(buffer(mcolon(TxPIDSettingsFidIdx + 53, TxPIDSettingsFidIdx + 53)), 'uint8'))';
	TxPIDSettings.Inputs = reshape(double(typecast(buffer(mcolon(TxPIDSettingsFidIdx + 54, TxPIDSettingsFidIdx + 56)), 'uint8')), 3, [] );
	TxPIDSettings.PIDs = reshape(double(typecast(buffer(mcolon(TxPIDSettingsFidIdx + 57, TxPIDSettingsFidIdx + 59)), 'uint8')), 3, [] );
	TxPIDSettings.EasyTuneRatePIDRecalculateYaw = double(typecast(buffer(mcolon(TxPIDSettingsFidIdx + 60, TxPIDSettingsFidIdx + 60)), 'uint8'))';

% TxPIDStatus typecasting
	TxPIDStatus.timestamp = double(typecast(buffer(mcolon(TxPIDStatusFidIdx - headerLen - oplHeaderLen, TxPIDStatusFidIdx + 3 - headerLen - oplHeaderLen)), 'uint32'))';
	TxPIDStatus.CurPID = reshape(double(typecast(buffer(mcolon(TxPIDStatusFidIdx + 0, TxPIDStatusFidIdx + 11)), 'single')), 3, [] );

% VelocityDesired typecasting
	VelocityDesired.timestamp = double(typecast(buffer(mcolon(VelocityDesiredFidIdx - headerLen - oplHeaderLen, VelocityDesiredFidIdx + 3 - headerLen - oplHeaderLen)), 'uint32'))';
	VelocityDesired.North = double(typecast(buffer(mcolon(VelocityDesiredFidIdx + 0, VelocityDesiredFidIdx + 3)), 'single'))';
	VelocityDesired.East = double(typecast(buffer(mcolon(VelocityDesiredFidIdx + 4, VelocityDesiredFidIdx + 7)), 'single'))';
	VelocityDesired.Down = double(typecast(buffer(mcolon(VelocityDesiredFidIdx + 8, VelocityDesiredFidIdx + 11)), 'single'))';

% VelocityState typecasting
	VelocityState.timestamp = double(typecast(buffer(mcolon(VelocityStateFidIdx - headerLen - oplHeaderLen, VelocityStateFidIdx + 3 - headerLen - oplHeaderLen)), 'uint32'))';
	VelocityState.North = double(typecast(buffer(mcolon(VelocityStateFidIdx + 0, VelocityStateFidIdx + 3)), 'single'))';
	VelocityState.East = double(typecast(buffer(mcolon(VelocityStateFidIdx + 4, VelocityStateFidIdx + 7)), 'single'))';
	VelocityState.Down = double(typecast(buffer(mcolon(VelocityStateFidIdx + 8, VelocityStateFidIdx + 11)), 'single'))';

% VtolPathFollowerSettings typecasting
	VtolPathFollowerSettings.timestamp = double(typecast(buffer(mcolon(VtolPathFollowerSettingsFidIdx - headerLen - oplHeaderLen, VtolPathFollowerSettingsFidIdx + 3 - headerLen - oplHeaderLen)), 'uint32'))';
	VtolPathFollowerSettings.HorizontalVelMax = double(typecast(buffer(mcolon(VtolPathFollowerSettingsFidIdx + 0, VtolPathFollowerSettingsFidIdx + 3)), 'single'))';
	VtolPathFollowerSettings.VerticalVelMax = double(typecast(buffer(mcolon(VtolPathFollowerSettingsFidIdx + 4, VtolPathFollowerSettingsFidIdx + 7)), 'single'))';
	VtolPathFollowerSettings.CourseFeedForward = double(typecast(buffer(mcolon(VtolPathFollowerSettingsFidIdx + 8, VtolPathFollowerSettingsFidIdx + 11)), 'single'))';
	VtolPathFollowerSettings.HorizontalPosP = double(typecast(buffer(mcolon(VtolPathFollowerSettingsFidIdx + 12, VtolPathFollowerSettingsFidIdx + 15)), 'single'))';
	VtolPathFollowerSettings.VerticalPosP = double(typecast(buffer(mcolon(VtolPathFollowerSettingsFidIdx + 16, VtolPathFollowerSettingsFidIdx + 19)), 'single'))';
	VtolPathFollowerSettings.HorizontalVelPID = reshape(double(typecast(buffer(mcolon(VtolPathFollowerSettingsFidIdx + 20, VtolPathFollowerSettingsFidIdx + 35)), 'single')), 4, [] );
	VtolPathFollowerSettings.VerticalVelPID = reshape(double(typecast(buffer(mcolon(VtolPathFollowerSettingsFidIdx + 36, VtolPathFollowerSettingsFidIdx + 51)), 'single')), 4, [] );
	VtolPathFollowerSettings.ThrustLimits = reshape(double(typecast(buffer(mcolon(VtolPathFollowerSettingsFidIdx + 52, VtolPathFollowerSettingsFidIdx + 63)), 'single')), 3, [] );
	VtolPathFollowerSettings.VelocityFeedforward = double(typecast(buffer(mcolon(VtolPathFollowerSettingsFidIdx + 64, VtolPathFollowerSettingsFidIdx + 67)), 'single'))';
	VtolPathFollowerSettings.FlyawayEmergencyFallbackTriggerTime = double(typecast(buffer(mcolon(VtolPathFollowerSettingsFidIdx + 68, VtolPathFollowerSettingsFidIdx + 71)), 'single'))';
	VtolPathFollowerSettings.EmergencyFallbackAttitude = reshape(double(typecast(buffer(mcolon(VtolPathFollowerSettingsFidIdx + 72, VtolPathFollowerSettingsFidIdx + 79)), 'single')), 2, [] );
	VtolPathFollowerSettings.EmergencyFallbackYawRate = reshape(double(typecast(buffer(mcolon(VtolPathFollowerSettingsFidIdx + 80, VtolPathFollowerSettingsFidIdx + 87)), 'single')), 2, [] );
	VtolPathFollowerSettings.MaxRollPitch = double(typecast(buffer(mcolon(VtolPathFollowerSettingsFidIdx + 88, VtolPathFollowerSettingsFidIdx + 91)), 'single'))';
	VtolPathFollowerSettings.BrakeRate = double(typecast(buffer(mcolon(VtolPathFollowerSettingsFidIdx + 92, VtolPathFollowerSettingsFidIdx + 95)), 'single'))';
	VtolPathFollowerSettings.BrakeMaxPitch = double(typecast(buffer(mcolon(VtolPathFollowerSettingsFidIdx + 96, VtolPathFollowerSettingsFidIdx + 99)), 'single'))';
	VtolPathFollowerSettings.BrakeHorizontalVelPID = reshape(double(typecast(buffer(mcolon(VtolPathFollowerSettingsFidIdx + 100, VtolPathFollowerSettingsFidIdx + 115)), 'single')), 4, [] );
	VtolPathFollowerSettings.BrakeVelocityFeedforward = double(typecast(buffer(mcolon(VtolPathFollowerSettingsFidIdx + 116, VtolPathFollowerSettingsFidIdx + 119)), 'single'))';
	VtolPathFollowerSettings.LandVerticalVelPID = reshape(double(typecast(buffer(mcolon(VtolPathFollowerSettingsFidIdx + 120, VtolPathFollowerSettingsFidIdx + 135)), 'single')), 4, [] );
	VtolPathFollowerSettings.AutoTakeoffVerticalVelPID = reshape(double(typecast(buffer(mcolon(VtolPathFollowerSettingsFidIdx + 136, VtolPathFollowerSettingsFidIdx + 151)), 'single')), 4, [] );
	VtolPathFollowerSettings.VelocityRoamMaxRollPitch = double(typecast(buffer(mcolon(VtolPathFollowerSettingsFidIdx + 152, VtolPathFollowerSettingsFidIdx + 155)), 'single'))';
	VtolPathFollowerSettings.VelocityRoamHorizontalVelPID = reshape(double(typecast(buffer(mcolon(VtolPathFollowerSettingsFidIdx + 156, VtolPathFollowerSettingsFidIdx + 171)), 'single')), 4, [] );
	VtolPathFollowerSettings.UpdatePeriod = double(typecast(buffer(mcolon(VtolPathFollowerSettingsFidIdx + 172, VtolPathFollowerSettingsFidIdx + 173)), 'uint16'))';
	VtolPathFollowerSettings.TreatCustomCraftAs = double(typecast(buffer(mcolon(VtolPathFollowerSettingsFidIdx + 174, VtolPathFollowerSettingsFidIdx + 174)), 'uint8'))';
	VtolPathFollowerSettings.ThrustControl = double(typecast(buffer(mcolon(VtolPathFollowerSettingsFidIdx + 175, VtolPathFollowerSettingsFidIdx + 175)), 'uint8'))';
	VtolPathFollowerSettings.YawControl = double(typecast(buffer(mcolon(VtolPathFollowerSettingsFidIdx + 176, VtolPathFollowerSettingsFidIdx + 176)), 'uint8'))';
	VtolPathFollowerSettings.FlyawayEmergencyFallback = double(typecast(buffer(mcolon(VtolPathFollowerSettingsFidIdx + 177, VtolPathFollowerSettingsFidIdx + 177)), 'uint8'))';

% VtolSelfTuningStats typecasting
	VtolSelfTuningStats.timestamp = double(typecast(buffer(mcolon(VtolSelfTuningStatsFidIdx - headerLen - oplHeaderLen, VtolSelfTuningStatsFidIdx + 3 - headerLen - oplHeaderLen)), 'uint32'))';
	VtolSelfTuningStats.NeutralThrustOffset = double(typecast(buffer(mcolon(VtolSelfTuningStatsFidIdx + 0, VtolSelfTuningStatsFidIdx + 3)), 'single'))';
	VtolSelfTuningStats.NeutralThrustCorrection = double(typecast(buffer(mcolon(VtolSelfTuningStatsFidIdx + 4, VtolSelfTuningStatsFidIdx + 7)), 'single'))';
	VtolSelfTuningStats.NeutralThrustAccumulator = double(typecast(buffer(mcolon(VtolSelfTuningStatsFidIdx + 8, VtolSelfTuningStatsFidIdx + 11)), 'single'))';
	VtolSelfTuningStats.NeutralThrustRange = double(typecast(buffer(mcolon(VtolSelfTuningStatsFidIdx + 12, VtolSelfTuningStatsFidIdx + 15)), 'single'))';

% WatchdogStatus typecasting
	WatchdogStatus.timestamp = double(typecast(buffer(mcolon(WatchdogStatusFidIdx - headerLen - oplHeaderLen, WatchdogStatusFidIdx + 3 - headerLen - oplHeaderLen)), 'uint32'))';
	WatchdogStatus.BootupFlags = double(typecast(buffer(mcolon(WatchdogStatusFidIdx + 0, WatchdogStatusFidIdx + 1)), 'uint16'))';
	WatchdogStatus.ActiveFlags = double(typecast(buffer(mcolon(WatchdogStatusFidIdx + 2, WatchdogStatusFidIdx + 3)), 'uint16'))';

% Waypoint typecasting
	Waypoint.timestamp = double(typecast(buffer(mcolon(WaypointFidIdx - headerLen - oplHeaderLen, WaypointFidIdx + 3 - headerLen - oplHeaderLen)), 'uint32'))';
	Waypoint.instanceID = double(typecast(buffer(mcolon(WaypointFidIdx - 2, WaypointFidIdx - 2 + 1)), 'uint16'))';
	Waypoint.Position = reshape(double(typecast(buffer(mcolon(WaypointFidIdx + 0, WaypointFidIdx + 11)), 'single')), 3, [] );
	Waypoint.Velocity = double(typecast(buffer(mcolon(WaypointFidIdx + 12, WaypointFidIdx + 15)), 'single'))';
	Waypoint.Action = double(typecast(buffer(mcolon(WaypointFidIdx + 16, WaypointFidIdx + 16)), 'uint8'))';

% WaypointActive typecasting
	WaypointActive.timestamp = double(typecast(buffer(mcolon(WaypointActiveFidIdx - headerLen - oplHeaderLen, WaypointActiveFidIdx + 3 - headerLen - oplHeaderLen)), 'uint32'))';
	WaypointActive.Index = double(typecast(buffer(mcolon(WaypointActiveFidIdx + 0, WaypointActiveFidIdx + 1)), 'int16'))';



%% Save data to file
if strcmpi(outputType,'mat')
	[path, name]=fileparts(logfile);
	matfile = fullfile(path,[name '.mat']);
	save(matfile ,'AccelGyroSettings','AccelSensor','AccelState','AccessoryDesired','ActuatorCommand','ActuatorDesired','ActuatorSettings','AirspeedSensor','AirspeedSettings','AirspeedState','AltitudeFilterSettings','AltitudeHoldSettings','AltitudeHoldStatus','AttitudeSettings','AttitudeSimulated','AttitudeState','AuxMagSensor','AuxMagSettings','BaroSensor','CallbackInfo','CameraControlActivity','CameraControlSettings','CameraDesired','CameraStabSettings','DebugLogControl','DebugLogEntry','DebugLogSettings','DebugLogStatus','EKFConfiguration','EKFStateVariance','FaultSettings','FirmwareIAPObj','FixedWingPathFollowerSettings','FixedWingPathFollowerStatus','FlightBatterySettings','FlightBatteryState','FlightModeSettings','FlightPlanControl','FlightPlanSettings','FlightPlanStatus','FlightStatus','FlightTelemetryStats','GCSReceiver','GCSTelemetryStats','GPSExtendedStatus','GPSPositionSensor','GPSSatellites','GPSSettings','GPSTime','GPSVelocitySensor','GroundPathFollowerSettings','GroundTruth','GyroSensor','GyroState','HomeLocation','HwSettings','I2CStats','MagSensor','MagState','ManualControlCommand','ManualControlSettings','MixerSettings','MixerStatus','MPUGyroAccelSettings','NedAccel','ObjectPersistence','OPLinkReceiver','OPLinkSettings','OPLinkStatus','OsdSettings','OveroSyncSettings','OveroSyncStats','PathAction','PathDesired','PathPlan','PathStatus','PathSummary','PerfCounter','PIDStatus','PoiLearnSettings','PoiLocation','PositionState','RadioComBridgeStats','RateDesired','ReceiverActivity','ReceiverStatus','RevoCalibration','RevoSettings','SonarAltitude','StabilizationBank','StabilizationDesired','StabilizationSettings','StabilizationSettingsBank1','StabilizationSettingsBank2','StabilizationSettingsBank3','StabilizationStatus','StatusGroundDrive','StatusVtolAutoTakeoff','StatusVtolLand','SystemAlarms','SystemIdentSettings','SystemIdentState','SystemSettings','SystemStats','TakeOffLocation','TaskInfo','TxPIDSettings','TxPIDStatus','VelocityDesired','VelocityState','VtolPathFollowerSettings','VtolSelfTuningStats','WatchdogStatus','Waypoint','WaypointActive');
else
	OPLog2csv(AccelGyroSettings, 'AccelGyroSettings', logfile);
	OPLog2csv(AccelSensor, 'AccelSensor', logfile);
	OPLog2csv(AccelState, 'AccelState', logfile);
	OPLog2csv(AccessoryDesired, 'AccessoryDesired', logfile);
	OPLog2csv(ActuatorCommand, 'ActuatorCommand', logfile);
	OPLog2csv(ActuatorDesired, 'ActuatorDesired', logfile);
	OPLog2csv(ActuatorSettings, 'ActuatorSettings', logfile);
	OPLog2csv(AirspeedSensor, 'AirspeedSensor', logfile);
	OPLog2csv(AirspeedSettings, 'AirspeedSettings', logfile);
	OPLog2csv(AirspeedState, 'AirspeedState', logfile);
	OPLog2csv(AltitudeFilterSettings, 'AltitudeFilterSettings', logfile);
	OPLog2csv(AltitudeHoldSettings, 'AltitudeHoldSettings', logfile);
	OPLog2csv(AltitudeHoldStatus, 'AltitudeHoldStatus', logfile);
	OPLog2csv(AttitudeSettings, 'AttitudeSettings', logfile);
	OPLog2csv(AttitudeSimulated, 'AttitudeSimulated', logfile);
	OPLog2csv(AttitudeState, 'AttitudeState', logfile);
	OPLog2csv(AuxMagSensor, 'AuxMagSensor', logfile);
	OPLog2csv(AuxMagSettings, 'AuxMagSettings', logfile);
	OPLog2csv(BaroSensor, 'BaroSensor', logfile);
	OPLog2csv(CallbackInfo, 'CallbackInfo', logfile);
	OPLog2csv(CameraControlActivity, 'CameraControlActivity', logfile);
	OPLog2csv(CameraControlSettings, 'CameraControlSettings', logfile);
	OPLog2csv(CameraDesired, 'CameraDesired', logfile);
	OPLog2csv(CameraStabSettings, 'CameraStabSettings', logfile);
	OPLog2csv(DebugLogControl, 'DebugLogControl', logfile);
	OPLog2csv(DebugLogEntry, 'DebugLogEntry', logfile);
	OPLog2csv(DebugLogSettings, 'DebugLogSettings', logfile);
	OPLog2csv(DebugLogStatus, 'DebugLogStatus', logfile);
	OPLog2csv(EKFConfiguration, 'EKFConfiguration', logfile);
	OPLog2csv(EKFStateVariance, 'EKFStateVariance', logfile);
	OPLog2csv(FaultSettings, 'FaultSettings', logfile);
	OPLog2csv(FirmwareIAPObj, 'FirmwareIAPObj', logfile);
	OPLog2csv(FixedWingPathFollowerSettings, 'FixedWingPathFollowerSettings', logfile);
	OPLog2csv(FixedWingPathFollowerStatus, 'FixedWingPathFollowerStatus', logfile);
	OPLog2csv(FlightBatterySettings, 'FlightBatterySettings', logfile);
	OPLog2csv(FlightBatteryState, 'FlightBatteryState', logfile);
	OPLog2csv(FlightModeSettings, 'FlightModeSettings', logfile);
	OPLog2csv(FlightPlanControl, 'FlightPlanControl', logfile);
	OPLog2csv(FlightPlanSettings, 'FlightPlanSettings', logfile);
	OPLog2csv(FlightPlanStatus, 'FlightPlanStatus', logfile);
	OPLog2csv(FlightStatus, 'FlightStatus', logfile);
	OPLog2csv(FlightTelemetryStats, 'FlightTelemetryStats', logfile);
	OPLog2csv(GCSReceiver, 'GCSReceiver', logfile);
	OPLog2csv(GCSTelemetryStats, 'GCSTelemetryStats', logfile);
	OPLog2csv(GPSExtendedStatus, 'GPSExtendedStatus', logfile);
	OPLog2csv(GPSPositionSensor, 'GPSPositionSensor', logfile);
	OPLog2csv(GPSSatellites, 'GPSSatellites', logfile);
	OPLog2csv(GPSSettings, 'GPSSettings', logfile);
	OPLog2csv(GPSTime, 'GPSTime', logfile);
	OPLog2csv(GPSVelocitySensor, 'GPSVelocitySensor', logfile);
	OPLog2csv(GroundPathFollowerSettings, 'GroundPathFollowerSettings', logfile);
	OPLog2csv(GroundTruth, 'GroundTruth', logfile);
	OPLog2csv(GyroSensor, 'GyroSensor', logfile);
	OPLog2csv(GyroState, 'GyroState', logfile);
	OPLog2csv(HomeLocation, 'HomeLocation', logfile);
	OPLog2csv(HwSettings, 'HwSettings', logfile);
	OPLog2csv(I2CStats, 'I2CStats', logfile);
	OPLog2csv(MagSensor, 'MagSensor', logfile);
	OPLog2csv(MagState, 'MagState', logfile);
	OPLog2csv(ManualControlCommand, 'ManualControlCommand', logfile);
	OPLog2csv(ManualControlSettings, 'ManualControlSettings', logfile);
	OPLog2csv(MixerSettings, 'MixerSettings', logfile);
	OPLog2csv(MixerStatus, 'MixerStatus', logfile);
	OPLog2csv(MPUGyroAccelSettings, 'MPUGyroAccelSettings', logfile);
	OPLog2csv(NedAccel, 'NedAccel', logfile);
	OPLog2csv(ObjectPersistence, 'ObjectPersistence', logfile);
	OPLog2csv(OPLinkReceiver, 'OPLinkReceiver', logfile);
	OPLog2csv(OPLinkSettings, 'OPLinkSettings', logfile);
	OPLog2csv(OPLinkStatus, 'OPLinkStatus', logfile);
	OPLog2csv(OsdSettings, 'OsdSettings', logfile);
	OPLog2csv(OveroSyncSettings, 'OveroSyncSettings', logfile);
	OPLog2csv(OveroSyncStats, 'OveroSyncStats', logfile);
	OPLog2csv(PathAction, 'PathAction', logfile);
	OPLog2csv(PathDesired, 'PathDesired', logfile);
	OPLog2csv(PathPlan, 'PathPlan', logfile);
	OPLog2csv(PathStatus, 'PathStatus', logfile);
	OPLog2csv(PathSummary, 'PathSummary', logfile);
	OPLog2csv(PerfCounter, 'PerfCounter', logfile);
	OPLog2csv(PIDStatus, 'PIDStatus', logfile);
	OPLog2csv(PoiLearnSettings, 'PoiLearnSettings', logfile);
	OPLog2csv(PoiLocation, 'PoiLocation', logfile);
	OPLog2csv(PositionState, 'PositionState', logfile);
	OPLog2csv(RadioComBridgeStats, 'RadioComBridgeStats', logfile);
	OPLog2csv(RateDesired, 'RateDesired', logfile);
	OPLog2csv(ReceiverActivity, 'ReceiverActivity', logfile);
	OPLog2csv(ReceiverStatus, 'ReceiverStatus', logfile);
	OPLog2csv(RevoCalibration, 'RevoCalibration', logfile);
	OPLog2csv(RevoSettings, 'RevoSettings', logfile);
	OPLog2csv(SonarAltitude, 'SonarAltitude', logfile);
	OPLog2csv(StabilizationBank, 'StabilizationBank', logfile);
	OPLog2csv(StabilizationDesired, 'StabilizationDesired', logfile);
	OPLog2csv(StabilizationSettings, 'StabilizationSettings', logfile);
	OPLog2csv(StabilizationSettingsBank1, 'StabilizationSettingsBank1', logfile);
	OPLog2csv(StabilizationSettingsBank2, 'StabilizationSettingsBank2', logfile);
	OPLog2csv(StabilizationSettingsBank3, 'StabilizationSettingsBank3', logfile);
	OPLog2csv(StabilizationStatus, 'StabilizationStatus', logfile);
	OPLog2csv(StatusGroundDrive, 'StatusGroundDrive', logfile);
	OPLog2csv(StatusVtolAutoTakeoff, 'StatusVtolAutoTakeoff', logfile);
	OPLog2csv(StatusVtolLand, 'StatusVtolLand', logfile);
	OPLog2csv(SystemAlarms, 'SystemAlarms', logfile);
	OPLog2csv(SystemIdentSettings, 'SystemIdentSettings', logfile);
	OPLog2csv(SystemIdentState, 'SystemIdentState', logfile);
	OPLog2csv(SystemSettings, 'SystemSettings', logfile);
	OPLog2csv(SystemStats, 'SystemStats', logfile);
	OPLog2csv(TakeOffLocation, 'TakeOffLocation', logfile);
	OPLog2csv(TaskInfo, 'TaskInfo', logfile);
	OPLog2csv(TxPIDSettings, 'TxPIDSettings', logfile);
	OPLog2csv(TxPIDStatus, 'TxPIDStatus', logfile);
	OPLog2csv(VelocityDesired, 'VelocityDesired', logfile);
	OPLog2csv(VelocityState, 'VelocityState', logfile);
	OPLog2csv(VtolPathFollowerSettings, 'VtolPathFollowerSettings', logfile);
	OPLog2csv(VtolSelfTuningStats, 'VtolSelfTuningStats', logfile);
	OPLog2csv(WatchdogStatus, 'WatchdogStatus', logfile);
	OPLog2csv(Waypoint, 'Waypoint', logfile);
	OPLog2csv(WaypointActive, 'WaypointActive', logfile);

end

fprintf('%d records in %0.2f seconds.\n', length(buffer), etime(clock,startTime));



	
function	OPLog2csv(structIn, structName, logfile)
	%Get each field name from the structure
	fieldNames = fieldnames(structIn);
	
	%Create a text string with the field names
	headerOut=sprintf('%s,',fieldNames{:});
	headerOut=headerOut(1:end-1); %Trim off last `,` and `\t`
	
	%Assign the structure arrays to a matrix.
	matOut=zeros(max(size(structIn.(fieldNames{1}))), length(fieldNames));
	
	if	isempty(structIn.(fieldNames{1}));
		matOut=[];
	else
		for i=1:length(fieldNames)
			matOut(:,i)=structIn.(fieldNames{i});
		end
	end	
	% Create filename by replacing opl by csv
	[path, name] = fileparts(logfile);
	csvDirName=[name '_csv'];
	[dummyA, dummyB]=mkdir(fullfile(path, csvDirName)); %Dummy outputs so the program doens't throw warnings about "Directory already exists"
	csvfile=fullfile(path, csvDirName , [name '.csv']);
	
	%Write to csv.
	dlmwrite(csvfile, headerOut, '');
	dlmwrite(csvfile, matOut, '-append');

function crc = compute_crc(data)
    global crc_table;
    crc = 0;
    for i = 1:length(data)
        crc = crc_table(1+bitxor(data(i),crc));
    end

function out=mcolon(inStart, inFinish)
%% This function was inspired by Bruno Luong's 'mcolon'. The name is kept the same as his 'mcolon'
% function, found on Matlab's file exchange. The two functions return identical
% results, although his is much faster. Unfortunately, C-compiled mex
% code would make this function non-cross-platform, so a Matlab scripted
% version is provided here.
	if size(inStart,1) > 1 || size(inFinish,1) > 1
		if size(inStart,2) > 1 || size(inFinish,2) > 1
			error('Inputs must be vectors, i.e just one column wide.')		
		else
			inStart=inStart';
			inFinish=inFinish';
		end
	end
	
	diffIn=diff([inStart; inFinish]);
	numElements=sum(diffIn)+length(inStart);
	
	out=zeros(1,numElements);
	
	idx=1;
	for i=1:length(inStart)
		out(idx:idx+diffIn(i))=inStart(i):inFinish(i);
		idx=idx+diffIn(i)+1;
	end
