##
##############################################################################
#
# @file       cameracontrolsettings.py
# @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010.
# @brief      Implementation of the CameraControlSettings object. This file has been
#             automatically generated by the UAVObjectGenerator. For use with
#             the PyMite VM of the FlightPlan module.
#
# @note       Object definition file: cameracontrolsettings.xml.
#             This is an automatically generated file.
#             DO NOT modify manually.
#
# @see        The GNU Public License (GPL) Version 3
#
#############################################################################/
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
# for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

from uavobject import *

# Field OutputValues definition
class OutputValuesField(UAVObjectField):
    # Array element names
    IDLE = 0
    SHOT = 1
    VIDEO = 2
    def __init__(self):
        UAVObjectField.__init__(self, 6, 3)

# Field InputValues definition
class InputValuesField(UAVObjectField):
    # Array element names
    IDLE = 0
    SHOT = 1
    VIDEO = 2
    def __init__(self):
        UAVObjectField.__init__(self, 6, 3)

# Field TimeInterval definition
class TimeIntervalField(UAVObjectField):
    def __init__(self):
        UAVObjectField.__init__(self, 6, 1)

# Field SpaceInterval definition
class SpaceIntervalField(UAVObjectField):
    def __init__(self):
        UAVObjectField.__init__(self, 6, 1)

# Field MinimumTimeInterval definition
class MinimumTimeIntervalField(UAVObjectField):
    def __init__(self):
        UAVObjectField.__init__(self, 6, 1)

# Field TriggerPulseWidth definition
class TriggerPulseWidthField(UAVObjectField):
    def __init__(self):
        UAVObjectField.__init__(self, 4, 1)

# Field AutoTriggerInput definition
class AutoTriggerInputField(UAVObjectField):
    # Enumeration options
    NONE = 0
    ACCESSORY0 = 1
    ACCESSORY1 = 2
    ACCESSORY2 = 3
    ACCESSORY3 = 4
    ACCESSORY4 = 5
    ACCESSORY5 = 6
    def __init__(self):
        UAVObjectField.__init__(self, 7, 1)

# Field ManualTriggerInput definition
class ManualTriggerInputField(UAVObjectField):
    # Enumeration options
    NONE = 0
    ACCESSORY0 = 1
    ACCESSORY1 = 2
    ACCESSORY2 = 3
    ACCESSORY3 = 4
    ACCESSORY4 = 5
    ACCESSORY5 = 6
    def __init__(self):
        UAVObjectField.__init__(self, 7, 1)

# Field AutoTriggerMode definition
class AutoTriggerModeField(UAVObjectField):
    # Enumeration options
    DISABLED = 0
    WHENARMED = 1
    ALWAYS = 2
    INPUT = 3
    MISSION = 4
    def __init__(self):
        UAVObjectField.__init__(self, 7, 1)



# Object CameraControlSettings definition
class CameraControlSettings(UAVObject):
    # Object constants
    OBJID = 398494038

    # Constructor
    def __init__(self):
        UAVObject.__init__(self, CameraControlSettings.OBJID)

        # Create object fields
        self.OutputValues = OutputValuesField()
        self.addField(self.OutputValues)
        self.InputValues = InputValuesField()
        self.addField(self.InputValues)
        self.TimeInterval = TimeIntervalField()
        self.addField(self.TimeInterval)
        self.SpaceInterval = SpaceIntervalField()
        self.addField(self.SpaceInterval)
        self.MinimumTimeInterval = MinimumTimeIntervalField()
        self.addField(self.MinimumTimeInterval)
        self.TriggerPulseWidth = TriggerPulseWidthField()
        self.addField(self.TriggerPulseWidth)
        self.AutoTriggerInput = AutoTriggerInputField()
        self.addField(self.AutoTriggerInput)
        self.ManualTriggerInput = ManualTriggerInputField()
        self.addField(self.ManualTriggerInput)
        self.AutoTriggerMode = AutoTriggerModeField()
        self.addField(self.AutoTriggerMode)

        # Read field data
        self.read()
        self.metadata.read()
